//
// CardResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information about the card used in the transaction. */

public struct CardResponse: Codable {

    public enum FulfillmentStatus: String, Codable { 
        case issued = "ISSUED"
        case ordered = "ORDERED"
        case reordered = "REORDERED"
        case rejected = "REJECTED"
        case shipped = "SHIPPED"
        case delivered = "DELIVERED"
        case digitallyPresented = "DIGITALLY_PRESENTED"
    }
    public enum InstrumentType: String, Codable { 
        case physicalMsr = "PHYSICAL_MSR"
        case physicalIcc = "PHYSICAL_ICC"
        case physicalContactless = "PHYSICAL_CONTACTLESS"
        case physicalCombo = "PHYSICAL_COMBO"
        case virtualPan = "VIRTUAL_PAN"
    }
    public enum State: String, Codable { 
        case active = "ACTIVE"
        case suspended = "SUSPENDED"
        case terminated = "TERMINATED"
        case unsupported = "UNSUPPORTED"
        case unactivated = "UNACTIVATED"
        case limited = "LIMITED"
    }
    public var activationActions: ActivationActions?
    /** Barcode printed on the card, expressed as numerals. */
    public var barcode: String
    /** Unique identifier of the bulk card order. */
    public var bulkIssuanceToken: String?
    /** Unique identifier of the card product. */
    public var cardProductToken: String
    /** Three-digit card verification value (ICVV) stored on the chip of the card. */
    public var chipCvvNumber: String?
    /** Running count of the contactless transactions successfully completed since the last strong customer authentication (SCA) challenge was issued. You can limit the number of contactless transactions that can be performed without issuing an SCA challenge at the card product level.  For more information about strong customer authentication, see &lt;&lt;/core-api/card-products, Card Products&gt;&gt;. */
    public var contactlessExemptionCounter: Int?
    /** Running total of the money spent in contactless transactions successfully completed since the last strong customer authentication (SCA) challenge was issued. You can limit the total amount that can be spent in contactless transactions without issuing an SCA challenge at the card product level.  For more information about strong customer authentication, see &lt;&lt;/core-api/card-products, Card Products&gt;&gt;. */
    public var contactlessExemptionTotalAmount: Decimal?
    /** Date and time when the resource was created, in UTC. */
    public var createdTime: Date
    /** Three-digit card verification value (CVV2 or CVC2) printed on the card. */
    public var cvvNumber: String?
    /** A value of &#x60;true&#x60; indicates that you requested expedited processing of the card from your card fulfillment provider. */
    public var expedite: Bool?
    /** Expiration date in &#x60;MMyy&#x60; format. */
    public var expiration: String
    /** Expiration date and time, in UTC. */
    public var expirationTime: Date
    public var fulfillment: CardFulfillmentResponse?
    /** Card fulfillment status:  * *ISSUED:* Initial state of all newly created/issued cards. * *ORDERED:* Card ordered through the card fulfillment provider. * *REORDERED:* Card reordered through the card fulfillment provider. * *REJECTED:* Card rejected by the card fulfillment provider. * *SHIPPED:* Card shipped by the card fulfillment provider. * *DELIVERED:* Card delivered by the card fulfillment provider. * *DIGITALLY_PRESENTED:* Card digitally presented using the &#x60;/cards/{token}/showpan&#x60; endpoint; does not affect the delivery of physical cards. */
    public var fulfillmentStatus: FulfillmentStatus
    /** Instrument type of the card:  * *PHYSICAL_MSR:* A physical card with a magnetic stripe. This is the default physical card type. * *PHYSICAL_ICC:* A physical card with an integrated circuit, or \&quot;chip.\&quot; * *PHYSICAL_CONTACTLESS:* A physical card that uses radio frequency identification (RFID) or near-field communication (NFC) to enable payment over a secure radio interface. * *PHYSICAL_COMBO:* A physical card with a chip that also supports contactless payments. * *VIRTUAL_PAN:* A virtual card with a primary account number (PAN). */
    public var instrumentType: InstrumentType?
    /** Last four digits of the card primary account number (PAN). */
    public var lastFour: String
    /** Date and time when the resource was last modified, in UTC. */
    public var lastModifiedTime: Date
    /** Associates customer-provided metadata with the card. */
    public var metadata: [String:String]?
    /** Reissues the specified card (known as the \&quot;source\&quot; card) with a new primary account number (PAN). */
    public var newPanFromCardToken: String?
    /** Primary account number (PAN) of the card. */
    public var pan: String
    /** Specifies if the personal identification number (PIN) has been set for the card. */
    public var pinIsSet: Bool
    /** Reissues the specified card (known as the \&quot;source\&quot; card). */
    public var reissuePanFromCardToken: String?
    /** Indicates the state of the card. */
    public var state: State
    /** Descriptive reason for why the card is in its current state. For example, \&quot;Card activated by cardholder\&quot;. */
    public var stateReason: String
    /** Unique identifier of the card. */
    public var token: String
    /** Copies the personal identification number (PIN) from the specified source card to the newly created card. */
    public var translatePinFromCardToken: String?
    /** Unique identifier of the cardholder. */
    public var userToken: String

    public init(activationActions: ActivationActions? = nil, barcode: String, bulkIssuanceToken: String? = nil, cardProductToken: String, chipCvvNumber: String? = nil, contactlessExemptionCounter: Int? = nil, contactlessExemptionTotalAmount: Decimal? = nil, createdTime: Date, cvvNumber: String? = nil, expedite: Bool? = nil, expiration: String, expirationTime: Date, fulfillment: CardFulfillmentResponse? = nil, fulfillmentStatus: FulfillmentStatus, instrumentType: InstrumentType? = nil, lastFour: String, lastModifiedTime: Date, metadata: [String:String]? = nil, newPanFromCardToken: String? = nil, pan: String, pinIsSet: Bool, reissuePanFromCardToken: String? = nil, state: State, stateReason: String, token: String, translatePinFromCardToken: String? = nil, userToken: String) {
        self.activationActions = activationActions
        self.barcode = barcode
        self.bulkIssuanceToken = bulkIssuanceToken
        self.cardProductToken = cardProductToken
        self.chipCvvNumber = chipCvvNumber
        self.contactlessExemptionCounter = contactlessExemptionCounter
        self.contactlessExemptionTotalAmount = contactlessExemptionTotalAmount
        self.createdTime = createdTime
        self.cvvNumber = cvvNumber
        self.expedite = expedite
        self.expiration = expiration
        self.expirationTime = expirationTime
        self.fulfillment = fulfillment
        self.fulfillmentStatus = fulfillmentStatus
        self.instrumentType = instrumentType
        self.lastFour = lastFour
        self.lastModifiedTime = lastModifiedTime
        self.metadata = metadata
        self.newPanFromCardToken = newPanFromCardToken
        self.pan = pan
        self.pinIsSet = pinIsSet
        self.reissuePanFromCardToken = reissuePanFromCardToken
        self.state = state
        self.stateReason = stateReason
        self.token = token
        self.translatePinFromCardToken = translatePinFromCardToken
        self.userToken = userToken
    }

    public enum CodingKeys: String, CodingKey { 
        case activationActions = "activation_actions"
        case barcode
        case bulkIssuanceToken = "bulk_issuance_token"
        case cardProductToken = "card_product_token"
        case chipCvvNumber = "chip_cvv_number"
        case contactlessExemptionCounter = "contactless_exemption_counter"
        case contactlessExemptionTotalAmount = "contactless_exemption_total_amount"
        case createdTime = "created_time"
        case cvvNumber = "cvv_number"
        case expedite
        case expiration
        case expirationTime = "expiration_time"
        case fulfillment
        case fulfillmentStatus = "fulfillment_status"
        case instrumentType = "instrument_type"
        case lastFour = "last_four"
        case lastModifiedTime = "last_modified_time"
        case metadata
        case newPanFromCardToken = "new_pan_from_card_token"
        case pan
        case pinIsSet = "pin_is_set"
        case reissuePanFromCardToken = "reissue_pan_from_card_token"
        case state
        case stateReason = "state_reason"
        case token
        case translatePinFromCardToken = "translate_pin_from_card_token"
        case userToken = "user_token"
    }

}
