//
// ApplicationsResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct ApplicationsResponse: Codable {

    public enum PrimaryIncomeSource: String, Codable { 
        case employed = "EMPLOYED"
        case unemployed = "UNEMPLOYED"
        case selfEmployed = "SELF_EMPLOYED"
        case other = "OTHER"
    }
    public enum ResidenceType: String, Codable { 
        case own = "OWN"
        case rent = "RENT"
        case other = "OTHER"
    }
    /** Unique identifier of the credit account for which the user is applying.  Returned when retrieving an application in the &#x60;APPROVED&#x60; state. */
    public var accountToken: String
    /** A value of &#x60;true&#x60; indicates that the user has a non-taxable income source. */
    public var anyNonTaxableIncome: Bool?
    /** Date and time when the application was accepted on the Marqeta platform, in UTC.  Returned if the user accepted their approved application. */
    public var applicationAcceptedAt: Date?
    /** Date and time when the application was canceled on the Marqeta platform, in UTC. */
    public var applicationCanceledAt: Date?
    /** Date and time when Marqeta accepted the Benefits Disclosure, in UTC.  Returned if the user accepted their approved application. */
    public var benefitsDisclosureAcceptedAt: Date?
    /** Unique identifier of the bundle associated with the application. */
    public var bundleToken: String
    /** Date and time when Marqeta accepted the Card Membership Agreement, in UTC.  Returned if the user accepted their approved application. */
    public var cardMembershipAgreementAcceptedAt: Date?
    /** Date and time when the application was created on the Marqeta platform, in UTC. */
    public var createdDate: Date
    public var decisionModel: DecisionsResponse?
    /** Unique identifier of the decision made on the application. */
    public var decisionToken: String?
    public var deviceData: DeviceData?
    /** Date and time when Marqeta accepted the e-Disclosure, in UTC.  Returned if the user accepted their approved application. */
    public var eDisclosureAcceptedAt: Date
    public var errorDetails: ErrorDetailsResponse?
    /** Monthly amount of the mortgage or rent that the user currently pays. */
    public var monthlyMortgageOrRent: Decimal?
    /** Whether the primary income source comes from the user being employed, unemployed, self-employment, or another situation. */
    public var primaryIncomeSource: PrimaryIncomeSource?
    /** Date and time when Marqeta accepted the Privacy Policy, in UTC.  Returned if the user accepted their approved application. */
    public var privacyPolicyAcceptedAt: Date
    /** Whether the user owns or rents their residence, or has another situation. */
    public var residenceType: ResidenceType?
    /** Date and time when Marqeta accepted the Rewards Disclosure, in UTC.  Returned if the user accepted their approved application. */
    public var rewardsDisclosurePostTermsAcceptedAt: Date?
    /** Date and time when Marqeta accepted the Rewards Disclosure, in UTC.  Returned if the user accepted their approved application. */
    public var rewardsDisclosurePreTermsAcceptedAt: Date
    /** Date and time when Marqeta accepted the Summary of Credit Terms (SOCT), in UTC.  Returned if the user accepted their approved application. */
    public var soctAcceptedAt: Date
    public var state: ApplicationResourceState
    /** Date and time when Marqeta accepted the Terms Schedule, in UTC.  Returned if the user accepted their approved application. */
    public var termScheduleInformationAcceptedAt: Date?
    /** Unique identifier of the application. */
    public var token: String
    /** The total amount of the user&#x27;s annual income. */
    public var totalAnnualIncome: Decimal?
    /** Date and time when the application was last updated on the Marqeta platform, in UTC. */
    public var updatedDate: Date
    /** Unique identifier of the applicant, the user applying for a credit account. */
    public var userToken: String

    public init(accountToken: String, anyNonTaxableIncome: Bool? = nil, applicationAcceptedAt: Date? = nil, applicationCanceledAt: Date? = nil, benefitsDisclosureAcceptedAt: Date? = nil, bundleToken: String, cardMembershipAgreementAcceptedAt: Date? = nil, createdDate: Date, decisionModel: DecisionsResponse? = nil, decisionToken: String? = nil, deviceData: DeviceData? = nil, eDisclosureAcceptedAt: Date, errorDetails: ErrorDetailsResponse? = nil, monthlyMortgageOrRent: Decimal? = nil, primaryIncomeSource: PrimaryIncomeSource? = nil, privacyPolicyAcceptedAt: Date, residenceType: ResidenceType? = nil, rewardsDisclosurePostTermsAcceptedAt: Date? = nil, rewardsDisclosurePreTermsAcceptedAt: Date, soctAcceptedAt: Date, state: ApplicationResourceState, termScheduleInformationAcceptedAt: Date? = nil, token: String, totalAnnualIncome: Decimal? = nil, updatedDate: Date, userToken: String) {
        self.accountToken = accountToken
        self.anyNonTaxableIncome = anyNonTaxableIncome
        self.applicationAcceptedAt = applicationAcceptedAt
        self.applicationCanceledAt = applicationCanceledAt
        self.benefitsDisclosureAcceptedAt = benefitsDisclosureAcceptedAt
        self.bundleToken = bundleToken
        self.cardMembershipAgreementAcceptedAt = cardMembershipAgreementAcceptedAt
        self.createdDate = createdDate
        self.decisionModel = decisionModel
        self.decisionToken = decisionToken
        self.deviceData = deviceData
        self.eDisclosureAcceptedAt = eDisclosureAcceptedAt
        self.errorDetails = errorDetails
        self.monthlyMortgageOrRent = monthlyMortgageOrRent
        self.primaryIncomeSource = primaryIncomeSource
        self.privacyPolicyAcceptedAt = privacyPolicyAcceptedAt
        self.residenceType = residenceType
        self.rewardsDisclosurePostTermsAcceptedAt = rewardsDisclosurePostTermsAcceptedAt
        self.rewardsDisclosurePreTermsAcceptedAt = rewardsDisclosurePreTermsAcceptedAt
        self.soctAcceptedAt = soctAcceptedAt
        self.state = state
        self.termScheduleInformationAcceptedAt = termScheduleInformationAcceptedAt
        self.token = token
        self.totalAnnualIncome = totalAnnualIncome
        self.updatedDate = updatedDate
        self.userToken = userToken
    }

    public enum CodingKeys: String, CodingKey { 
        case accountToken = "account_token"
        case anyNonTaxableIncome = "any_non_taxable_income"
        case applicationAcceptedAt = "application_accepted_at"
        case applicationCanceledAt = "application_canceled_at"
        case benefitsDisclosureAcceptedAt = "benefits_disclosure_accepted_at"
        case bundleToken = "bundle_token"
        case cardMembershipAgreementAcceptedAt = "card_membership_agreement_accepted_at"
        case createdDate = "created_date"
        case decisionModel = "decision_model"
        case decisionToken = "decision_token"
        case deviceData = "device_data"
        case eDisclosureAcceptedAt = "e_disclosure_accepted_at"
        case errorDetails = "error_details"
        case monthlyMortgageOrRent = "monthly_mortgage_or_rent"
        case primaryIncomeSource = "primary_income_source"
        case privacyPolicyAcceptedAt = "privacy_policy_accepted_at"
        case residenceType = "residence_type"
        case rewardsDisclosurePostTermsAcceptedAt = "rewards_disclosure_post_terms_accepted_at"
        case rewardsDisclosurePreTermsAcceptedAt = "rewards_disclosure_pre_terms_accepted_at"
        case soctAcceptedAt = "soct_accepted_at"
        case state
        case termScheduleInformationAcceptedAt = "term_schedule_information_accepted_at"
        case token
        case totalAnnualIncome = "total_annual_income"
        case updatedDate = "updated_date"
        case userToken = "user_token"
    }

}
