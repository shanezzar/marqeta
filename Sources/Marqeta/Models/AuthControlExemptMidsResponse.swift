//
// AuthControlExemptMidsResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct AuthControlExemptMidsResponse: Codable {

    /** Indicates whether the merchant identifier authorization control exception is active.  This field is returned if it exists in the resource. */
    public var active: Bool?
    public var association: SpendControlAssociation?
    /** Date and time when the resource was created, in UTC.  This field is returned if it exists in the resource. */
    public var created: Date?
    /** Date and time when the exception ends, in UTC.  This field is returned if it exists in the resource. */
    public var endTime: Date?
    /** Date and time when the resource was last updated, in UTC.  This field is returned if it exists in the resource. */
    public var lastUpdated: Date?
    /** Unique identifier of the merchant group to be exempted.  This field is returned if it exists in the resource. */
    public var merchantGroupToken: String?
    /** Merchant to be exempted.  This field is returned if it exists in the resource. */
    public var mid: String?
    /** Name of the merchant identifier authorization control exemption. */
    public var name: String
    /** Date and time when the exception starts, in UTC.  This field is returned if it exists in the resource. */
    public var startTime: Date?
    /** Unique identifier of the merchant identifier authorization control exemption.  This field is always returned. */
    public var token: String?

    public init(active: Bool? = nil, association: SpendControlAssociation? = nil, created: Date? = nil, endTime: Date? = nil, lastUpdated: Date? = nil, merchantGroupToken: String? = nil, mid: String? = nil, name: String, startTime: Date? = nil, token: String? = nil) {
        self.active = active
        self.association = association
        self.created = created
        self.endTime = endTime
        self.lastUpdated = lastUpdated
        self.merchantGroupToken = merchantGroupToken
        self.mid = mid
        self.name = name
        self.startTime = startTime
        self.token = token
    }

    public enum CodingKeys: String, CodingKey { 
        case active
        case association
        case created
        case endTime = "end_time"
        case lastUpdated = "last_updated"
        case merchantGroupToken = "merchant_group_token"
        case mid
        case name
        case startTime = "start_time"
        case token
    }

}
