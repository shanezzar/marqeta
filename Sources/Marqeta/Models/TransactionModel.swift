//
// TransactionModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct TransactionModel: Codable {

    public enum IsaIndicator: String, Codable { 
        case multiCurrency = "MULTI_CURRENCY"
        case singleCurrency = "SINGLE_CURRENCY"
        case rebateCancelled = "REBATE_CANCELLED"
        case multiCurrencyNonUsCountries = "MULTI_CURRENCY_NON_US_COUNTRIES"
        case singleCurrencyPaidByIssuer = "SINGLE_CURRENCY_PAID_BY_ISSUER"
        case noChargeAssessed = "NO_CHARGE_ASSESSED"
    }
    public enum Polarity: String, Codable { 
        case credit = "CREDIT"
        case debit = "DEBIT"
        case pendingCredit = "PENDING_CREDIT"
        case pendingDebit = "PENDING_DEBIT"
    }
    public enum State: String, Codable { 
        case pending = "PENDING"
        case cleared = "CLEARED"
        case completion = "COMPLETION"
        case declined = "DECLINED"
        case error = "ERROR"
    }
    public enum ModelType: String, Codable { 
        case gpaCredit = "gpa.credit"
        case gpaCreditPending = "gpa.credit.pending"
        case gpaCreditPendingReversal = "gpa.credit.pending.reversal"
        case gpaCreditReversal = "gpa.credit.reversal"
        case gpaCreditNetworkload = "gpa.credit.networkload"
        case gpaCreditNetworkloadReversal = "gpa.credit.networkload.reversal"
        case gpaDebitNetworkload = "gpa.debit.networkload"
        case gpaDebit = "gpa.debit"
        case gpaDebitPending = "gpa.debit.pending"
        case gpaDebitPendingReversal = "gpa.debit.pending.reversal"
        case gpaGrant = "gpa.grant"
        case gpaCreditIssueroperator = "gpa.credit.issueroperator"
        case gpaDebitIssueroperator = "gpa.debit.issueroperator"
        case gpaCreditChargeback = "gpa.credit.chargeback"
        case gpaCreditChargebackReversal = "gpa.credit.chargeback.reversal"
        case gpaCreditBillpayment = "gpa.credit.billpayment"
        case gpaCreditAuthorizationBillpayment = "gpa.credit.authorization.billpayment"
        case gpaCreditAuthorizationBillpaymentReversal = "gpa.credit.authorization.billpayment.reversal"
        case msaCreditPending = "msa.credit.pending"
        case msaCreditPendingReversal = "msa.credit.pending.reversal"
        case msaCreditReversal = "msa.credit.reversal"
        case msaCredit = "msa.credit"
        case msaDebitPending = "msa.debit.pending"
        case msaDebitPendingReversal = "msa.debit.pending.reversal"
        case msaDebit = "msa.debit"
        case msaCreditChargeback = "msa.credit.chargeback"
        case msaCreditChargebackReversal = "msa.credit.chargeback.reversal"
        case authorization = "authorization"
        case authorizationAdvice = "authorization.advice"
        case authorizationReversal = "authorization.reversal"
        case authorizationClearing = "authorization.clearing"
        case authorizationReversalIssuerexpiration = "authorization.reversal.issuerexpiration"
        case disputeCredit = "dispute.credit"
        case disputeDebit = "dispute.debit"
        case authorizationClearingChargeback = "authorization.clearing.chargeback"
        case authorizationClearingChargebackReversal = "authorization.clearing.chargeback.reversal"
        case refund = "refund"
        case pindebitAtmWithdrawal = "pindebit.atm.withdrawal"
        case pindebitBalanceinquiry = "pindebit.balanceinquiry"
        case pindebitCashback = "pindebit.cashback"
        case pindebit = "pindebit"
        case programreserveCredit = "programreserve.credit"
        case programreserveDebit = "programreserve.debit"
        case feeChargePending = "fee.charge.pending"
        case feeCharge = "fee.charge"
        case feeChargePendingRefund = "fee.charge.pending.refund"
        case fundsExpire = "funds.expire"
        case rewardEarn = "reward.earn"
        case transferPeer = "transfer.peer"
        case transferFee = "transfer.fee"
        case accountFundingAuthorization = "account.funding.authorization"
        case accountFundingAuthorizationReversal = "account.funding.authorization.reversal"
        case accountFundingAuthorizationClearing = "account.funding.authorization.clearing"
        case accountFundingAuthPlusCapture = "account.funding.auth_plus_capture"
        case accountFundingAuthPlusCaptureReversal = "account.funding.auth_plus_capture.reversal"
        case accountCredit = "account.credit"
        case accountDebit = "account.debit"
        case balanceinquiry = "balanceinquiry"
        case authorizationAtmWithdrawal = "authorization.atm.withdrawal"
        case authorizationClearingAtmWithdrawal = "authorization.clearing.atm.withdrawal"
        case authorizationCashback = "authorization.cashback"
        case authorizationClearingCashback = "authorization.clearing.cashback"
        case transferProgram = "transfer.program"
        case authorizationQuasiCash = "authorization.quasi.cash"
        case authorizationClearingQuasiCash = "authorization.clearing.quasi.cash"
        case authorizationIncremental = "authorization.incremental"
        case gpaCreditAuthorization = "gpa.credit.authorization"
        case gpaCreditAuthorizationReversal = "gpa.credit.authorization.reversal"
        case gpaDebitAuthorization = "gpa.debit.authorization"
        case gpaDebitReversal = "gpa.debit.reversal"
        case originalCreditAuthorization = "original.credit.authorization"
        case originalCreditAuthorizationReversal = "original.credit.authorization.reversal"
        case originalCreditAuthorizationClearing = "original.credit.authorization.clearing"
        case originalCreditAuthPlusCapture = "original.credit.auth_plus_capture"
        case originalCreditAuthPlusCaptureReversal = "original.credit.auth_plus_capture.reversal"
        case refundAuthorization = "refund.authorization"
        case refundAuthorizationAdvice = "refund.authorization.advice"
        case refundAuthorizationClearing = "refund.authorization.clearing"
        case refundAuthorizationReversal = "refund.authorization.reversal"
        case tokenActivationRequest = "token.activation-request"
        case tokenAdvice = "token.advice"
        case pindebitAuthorization = "pindebit.authorization"
        case pindebitAuthorizationClearing = "pindebit.authorization.clearing"
        case pindebitAuthorizationReversal = "pindebit.authorization.reversal"
        case pindebitAuthorizationReversalIssuerexpiration = "pindebit.authorization.reversal.issuerexpiration"
        case authorizationStandin = "authorization.standin"
        case authorizationClearingChargebackCompleted = "authorization.clearing.chargeback.completed"
        case authorizationClearingChargebackProvisionalCredit = "authorization.clearing.chargeback.provisional.credit"
        case authorizationClearingChargebackProvisionalDebit = "authorization.clearing.chargeback.provisional.debit"
        case authorizationClearingChargebackWriteoff = "authorization.clearing.chargeback.writeoff"
        case directdepositCredit = "directdeposit.credit"
        case directdepositCreditPending = "directdeposit.credit.pending"
        case directdepositCreditReject = "directdeposit.credit.reject"
        case directdepositCreditPendingReversal = "directdeposit.credit.pending.reversal"
        case directdepositCreditReversal = "directdeposit.credit.reversal"
        case directdepositDebit = "directdeposit.debit"
        case directdepositDebitPending = "directdeposit.debit.pending"
        case directdepositDebitReject = "directdeposit.debit.reject"
        case directdepositDebitReversal = "directdeposit.debit.reversal"
        case directdepositDebitPendingReversal = "directdeposit.debit.pending.reversal"
        case feeChargeReversal = "fee.charge.reversal"
        case pindebitChargeback = "pindebit.chargeback"
        case pindebitChargebackCompleted = "pindebit.chargeback.completed"
        case pindebitChargebackProvisionalCredit = "pindebit.chargeback.provisional.credit"
        case pindebitChargebackProvisionalDebit = "pindebit.chargeback.provisional.debit"
        case pindebitChargebackReversal = "pindebit.chargeback.reversal"
        case pindebitChargebackWriteoff = "pindebit.chargeback.writeoff"
        case pindebitCreditAdjustment = "pindebit.credit.adjustment"
        case pindebitQuasicash = "pindebit.quasicash"
        case pindebitQuasiCash = "pindebit.quasi.cash"
        case pindebitRefund = "pindebit.refund"
        case pindebitRefundReversal = "pindebit.refund.reversal"
        case pindebitReversal = "pindebit.reversal"
        case pindebitTransfer = "pindebit.transfer"
        case pushtocardDebit = "pushtocard.debit"
        case pushtocardReversal = "pushtocard.reversal"
        case creditAdjustment = "credit.adjustment"
        case debitAdjustment = "debit.adjustment"
        case unknown = "unknown"
    }
    public var accountFunding: AccountFunding?
    public var acquirer: Acquirer?
    /** Indicates the amount of the acquirer fee. Account holders are sometimes charged an acquirer fee for card use at ATMs, fuel dispensers, and so on. */
    public var acquirerFeeAmount: Decimal?
    /** Acquirer-assigned unique identifier of the transaction. Useful for settlement and reconciliation. */
    public var acquirerReferenceId: String?
    /** Unique identifier of the user who conducted the transaction. This might be a child user configured to share its parent&#x27;s account balance. */
    public var actingUserToken: String
    public var addressVerification: AddressVerificationModel?
    public var adviceReasonCode: String?
    public var adviceReasonDetails: String?
    /** Amount of the transaction. */
    public var amount: Decimal
    /** Amount of original authorization to be released. This field appears in final clearing transactions where the clearing amount is lower than the authorization amount. */
    public var amountToBeReleased: Decimal?
    /** Unique identifier assigned to an authorization, printed on the receipt at point of sale. */
    public var approvalCode: String?
    public var atcInformation: AtcInformation?
    public var autoReload: AutoReloadModel?
    public var bankTransferToken: String?
    /** The batch number of the transaction. */
    public var batchNumber: String?
    public var business: BusinessMetadata?
    /** Unique identifier of the business that owns the account that funded the transaction. */
    public var businessToken: String?
    public var card: CardResponse?
    public var cardAcceptor: TransactionCardAcceptor?
    public var cardHolderModel: UserCardHolderResponse?
    public var cardProductToken: String?
    public var cardSecurityCodeVerification: CardSecurityCodeVerification?
    /** Unique identifier of the card. Useful when a single account holder has multiple cards. */
    public var cardToken: String?
    public var cardholderAuthenticationData: CardholderAuthenticationData?
    /** Amount of cash back requested by the cardholder during the transaction. Included in the total transaction amount. */
    public var cashBackAmount: Decimal?
    public var chargeback: ChargebackResponse?
    /** A sequence number that identifies a specific clearing message among multiple clearing messages for an authorization. */
    public var clearingRecordSequenceNumber: String?
    /** Date and time when the Marqeta platform created the transaction entry, in UTC format. For example, when Marqeta processed the clearing record for a refund. */
    public var createdTime: Date?
    /** Currency type of the transaction. */
    public var currencyCode: String?
    public var currencyConversion: CurrencyConversion?
    public var digitalWalletToken: DigitalWalletToken?
    public var directDeposit: DepositDepositResponse?
    public var dispute: DisputeModel?
    /** Duration of the transaction on Marqeta&#x27;s servers, in milliseconds. */
    public var duration: Int?
    /** The enhanced commercial card data token for the transaction. */
    public var enhancedDataToken: String?
    public var fee: Fee?
    public var feeTransfer: FeeTransferResponse?
    /** List of fees associated with the transaction.  This array is returned if it exists in the resource. */
    public var fees: [NetworkFeeModel]?
    public var fraud: FraudView?
    /** Specifies the account type for ATM transactions. */
    public var fromAccount: String?
    public var gpa: CardholderBalance?
    public var gpaOrder: GpaResponse?
    public var gpaOrderUnload: GpaReturns?
    /** Sequential identifier of the transaction. */
    public var identifier: String?
    /** An array of incremental authorization transaction tokens. */
    public var incrementalAuthorizationTransactionTokens: [String]?
    public var interchangeRateDescriptor: String?
    /** Indicates if the transaction is a pre-authorization. */
    public var isPreauthorization: Bool?
    /** The international service assessment indicator indicates if an ISA fee is applicable to the transaction. */
    public var isaIndicator: IsaIndicator?
    /** The amount of interchange charged by the card issuer. */
    public var issuerInterchangeAmount: Decimal?
    /** Unique identifier of the Marqeta platform server that received the transaction from the card network. */
    public var issuerPaymentNode: String?
    /** Date and time when the Marqeta platform received the transaction from the card network, in UTC. */
    public var issuerReceivedTime: String?
    public var merchant: MerchantResponseModel?
    public var msaOrderUnload: MsaReturns?
    /** If an authorization has multiple clearing transactions, this field displays their total number. For example, if an authorization has four clearing transactions, the sequence count is &#x60;04&#x60;. */
    public var multiClearingSequenceCount: String?
    /** If an authorization has multiple clearing transactions, this field displays the sequence number for the clearing transaction. For example, if this is the second clearing transaction of four, the sequence number is &#x60;02&#x60;. */
    public var multiClearingSequenceNumber: String?
    /** Indicates which card network was used to complete the transactions. */
    public var network: String?
    public var networkMetadata: NetworkMetadata?
    /** Network-assigned unique identifier of the transaction. Useful for settlement and reconciliation. */
    public var networkReferenceId: String?
    public var originalCredit: OriginalCredit?
    public var peerTransfer: PeerTransferResponse?
    /** Indicates whether the transaction is credit or debit. */
    public var polarity: Polarity?
    public var pos: Pos?
    /** Returned for final transaction types.  Unique identifier of the preceding related transaction. Useful for identifying the transaction that preceded the current one.  For example, &#x60;authorization&#x60;, a temporary transaction type, precedes and is completed by &#x60;authorization.clearing&#x60;, a final transaction type. In this case, the &#x60;authorization&#x60; token is returned with this field. For which transaction types are temporary or final, see &lt;&lt;/core-api/event-types#_transaction_events, Transaction events in Event Types&gt;&gt;. */
    public var precedingRelatedTransactionToken: String?
    public var precedingTransaction: PrecedingTransaction?
    public var program: Program?
    public var programTransfer: ProgramTransferResponse?
    public var realTimeFeeGroup: RealTimeFeeGroup?
    public var realTimeFeeType: String?
    /** Merchant-requested amount, including any fees. */
    public var requestAmount: Decimal?
    public var response: ModelResponse?
    /** Date and time when funds were moved for a transaction, in UTC. For example, in the case of a refund, when funds were credited to the cardholder. */
    public var settlementDate: Date?
    /** Indicates which party approved a transaction: the card network using stand-in processing, or Marqeta using Commando Mode. Returned only when a transaction is approved. */
    public var standinApprovedBy: String?
    /** Indicates which party approved a transaction: the card network using stand-in processing, or Marqeta using Commando Mode. */
    public var standinBy: String?
    /** Indicates why the card network handled a transaction requiring stand-in processing. */
    public var standinReason: String?
    /** Current state of the transaction. For more information about the &#x60;state&#x60; field, see &lt;&lt;/developer-guides/about-transactions#_the_transaction_lifecycle, The transaction lifecycle&gt;&gt;. */
    public var state: State
    public var store: StoreResponseModel?
    /** Indicates which subnetwork was used to complete the transaction. Possible values include the following:  * *VISANET* – Used for VisaNet signature-based transactions. * *VISANETDEBIT* – Used for VisaNet Debit PIN-based transaction. * *VISAINTERLINK* – Used for Visa Interlink PIN-based transactions. * *VISAPLUS* – Used for ATM withdrawals on Visa. * *MAESTRO* – Used for PIN-based transactions on Mastercard. * *CIRRUS* – Used for ATM withdrawals on Mastercard. * *MASTERCARDDEBIT* – Used for signature-based transactions on Mastercard. * *GATEWAY_JIT* – Used for Gateway JIT Funding transactions. * *MANAGED_JIT* – Used for Managed JIT Funding transactions or for transactions that occur while Commando Mode is enabled. */
    public var subnetwork: String?
    /** Unique identifier of the transaction, formatted as a UUID.  *NOTE:* For subsequent related transactions, this token value appears as the &#x60;preceding_related_transaction_token&#x60;. */
    public var token: String
    /** Additional transaction attributes. */
    public var transactionAttributes: [String:String]?
    public var transactionMetadata: TransactionMetadata?
    /** Transaction event type. For more information about the &#x60;type&#x60; field, see &lt;&lt;/core-api/event-types#_transaction_events, Transaction events&gt;&gt;. */
    public var type: ModelType
    public var user: CardholderMetadata?
    /** Unique identifier of the user who owns the account that funded the transaction; subsequent related transactions retain the same &#x60;user_token&#x60;, even if the card used to complete the transaction moves to another user. */
    public var userToken: String?
    /** Date and time when the user initiated the transaction, in UTC. For example, when a merchant performed the original authorization for a refund. */
    public var userTransactionTime: Date?

    public init(accountFunding: AccountFunding? = nil, acquirer: Acquirer? = nil, acquirerFeeAmount: Decimal? = nil, acquirerReferenceId: String? = nil, actingUserToken: String, addressVerification: AddressVerificationModel? = nil, adviceReasonCode: String? = nil, adviceReasonDetails: String? = nil, amount: Decimal, amountToBeReleased: Decimal? = nil, approvalCode: String? = nil, atcInformation: AtcInformation? = nil, autoReload: AutoReloadModel? = nil, bankTransferToken: String? = nil, batchNumber: String? = nil, business: BusinessMetadata? = nil, businessToken: String? = nil, card: CardResponse? = nil, cardAcceptor: TransactionCardAcceptor? = nil, cardHolderModel: UserCardHolderResponse? = nil, cardProductToken: String? = nil, cardSecurityCodeVerification: CardSecurityCodeVerification? = nil, cardToken: String? = nil, cardholderAuthenticationData: CardholderAuthenticationData? = nil, cashBackAmount: Decimal? = nil, chargeback: ChargebackResponse? = nil, clearingRecordSequenceNumber: String? = nil, createdTime: Date? = nil, currencyCode: String? = nil, currencyConversion: CurrencyConversion? = nil, digitalWalletToken: DigitalWalletToken? = nil, directDeposit: DepositDepositResponse? = nil, dispute: DisputeModel? = nil, duration: Int? = nil, enhancedDataToken: String? = nil, fee: Fee? = nil, feeTransfer: FeeTransferResponse? = nil, fees: [NetworkFeeModel]? = nil, fraud: FraudView? = nil, fromAccount: String? = nil, gpa: CardholderBalance? = nil, gpaOrder: GpaResponse? = nil, gpaOrderUnload: GpaReturns? = nil, identifier: String? = nil, incrementalAuthorizationTransactionTokens: [String]? = nil, interchangeRateDescriptor: String? = nil, isPreauthorization: Bool? = nil, isaIndicator: IsaIndicator? = nil, issuerInterchangeAmount: Decimal? = nil, issuerPaymentNode: String? = nil, issuerReceivedTime: String? = nil, merchant: MerchantResponseModel? = nil, msaOrderUnload: MsaReturns? = nil, multiClearingSequenceCount: String? = nil, multiClearingSequenceNumber: String? = nil, network: String? = nil, networkMetadata: NetworkMetadata? = nil, networkReferenceId: String? = nil, originalCredit: OriginalCredit? = nil, peerTransfer: PeerTransferResponse? = nil, polarity: Polarity? = nil, pos: Pos? = nil, precedingRelatedTransactionToken: String? = nil, precedingTransaction: PrecedingTransaction? = nil, program: Program? = nil, programTransfer: ProgramTransferResponse? = nil, realTimeFeeGroup: RealTimeFeeGroup? = nil, realTimeFeeType: String? = nil, requestAmount: Decimal? = nil, response: ModelResponse? = nil, settlementDate: Date? = nil, standinApprovedBy: String? = nil, standinBy: String? = nil, standinReason: String? = nil, state: State, store: StoreResponseModel? = nil, subnetwork: String? = nil, token: String, transactionAttributes: [String:String]? = nil, transactionMetadata: TransactionMetadata? = nil, type: ModelType, user: CardholderMetadata? = nil, userToken: String? = nil, userTransactionTime: Date? = nil) {
        self.accountFunding = accountFunding
        self.acquirer = acquirer
        self.acquirerFeeAmount = acquirerFeeAmount
        self.acquirerReferenceId = acquirerReferenceId
        self.actingUserToken = actingUserToken
        self.addressVerification = addressVerification
        self.adviceReasonCode = adviceReasonCode
        self.adviceReasonDetails = adviceReasonDetails
        self.amount = amount
        self.amountToBeReleased = amountToBeReleased
        self.approvalCode = approvalCode
        self.atcInformation = atcInformation
        self.autoReload = autoReload
        self.bankTransferToken = bankTransferToken
        self.batchNumber = batchNumber
        self.business = business
        self.businessToken = businessToken
        self.card = card
        self.cardAcceptor = cardAcceptor
        self.cardHolderModel = cardHolderModel
        self.cardProductToken = cardProductToken
        self.cardSecurityCodeVerification = cardSecurityCodeVerification
        self.cardToken = cardToken
        self.cardholderAuthenticationData = cardholderAuthenticationData
        self.cashBackAmount = cashBackAmount
        self.chargeback = chargeback
        self.clearingRecordSequenceNumber = clearingRecordSequenceNumber
        self.createdTime = createdTime
        self.currencyCode = currencyCode
        self.currencyConversion = currencyConversion
        self.digitalWalletToken = digitalWalletToken
        self.directDeposit = directDeposit
        self.dispute = dispute
        self.duration = duration
        self.enhancedDataToken = enhancedDataToken
        self.fee = fee
        self.feeTransfer = feeTransfer
        self.fees = fees
        self.fraud = fraud
        self.fromAccount = fromAccount
        self.gpa = gpa
        self.gpaOrder = gpaOrder
        self.gpaOrderUnload = gpaOrderUnload
        self.identifier = identifier
        self.incrementalAuthorizationTransactionTokens = incrementalAuthorizationTransactionTokens
        self.interchangeRateDescriptor = interchangeRateDescriptor
        self.isPreauthorization = isPreauthorization
        self.isaIndicator = isaIndicator
        self.issuerInterchangeAmount = issuerInterchangeAmount
        self.issuerPaymentNode = issuerPaymentNode
        self.issuerReceivedTime = issuerReceivedTime
        self.merchant = merchant
        self.msaOrderUnload = msaOrderUnload
        self.multiClearingSequenceCount = multiClearingSequenceCount
        self.multiClearingSequenceNumber = multiClearingSequenceNumber
        self.network = network
        self.networkMetadata = networkMetadata
        self.networkReferenceId = networkReferenceId
        self.originalCredit = originalCredit
        self.peerTransfer = peerTransfer
        self.polarity = polarity
        self.pos = pos
        self.precedingRelatedTransactionToken = precedingRelatedTransactionToken
        self.precedingTransaction = precedingTransaction
        self.program = program
        self.programTransfer = programTransfer
        self.realTimeFeeGroup = realTimeFeeGroup
        self.realTimeFeeType = realTimeFeeType
        self.requestAmount = requestAmount
        self.response = response
        self.settlementDate = settlementDate
        self.standinApprovedBy = standinApprovedBy
        self.standinBy = standinBy
        self.standinReason = standinReason
        self.state = state
        self.store = store
        self.subnetwork = subnetwork
        self.token = token
        self.transactionAttributes = transactionAttributes
        self.transactionMetadata = transactionMetadata
        self.type = type
        self.user = user
        self.userToken = userToken
        self.userTransactionTime = userTransactionTime
    }

    public enum CodingKeys: String, CodingKey { 
        case accountFunding = "account_funding"
        case acquirer
        case acquirerFeeAmount = "acquirer_fee_amount"
        case acquirerReferenceId = "acquirer_reference_id"
        case actingUserToken = "acting_user_token"
        case addressVerification = "address_verification"
        case adviceReasonCode = "advice_reason_code"
        case adviceReasonDetails = "advice_reason_details"
        case amount
        case amountToBeReleased = "amount_to_be_released"
        case approvalCode = "approval_code"
        case atcInformation = "atc_information"
        case autoReload = "auto_reload"
        case bankTransferToken = "bank_transfer_token"
        case batchNumber = "batch_number"
        case business
        case businessToken = "business_token"
        case card
        case cardAcceptor = "card_acceptor"
        case cardHolderModel = "card_holder_model"
        case cardProductToken = "card_product_token"
        case cardSecurityCodeVerification = "card_security_code_verification"
        case cardToken = "card_token"
        case cardholderAuthenticationData = "cardholder_authentication_data"
        case cashBackAmount = "cash_back_amount"
        case chargeback
        case clearingRecordSequenceNumber = "clearing_record_sequence_number"
        case createdTime = "created_time"
        case currencyCode = "currency_code"
        case currencyConversion = "currency_conversion"
        case digitalWalletToken = "digital_wallet_token"
        case directDeposit = "direct_deposit"
        case dispute
        case duration
        case enhancedDataToken = "enhanced_data_token"
        case fee
        case feeTransfer = "fee_transfer"
        case fees
        case fraud
        case fromAccount = "from_account"
        case gpa
        case gpaOrder = "gpa_order"
        case gpaOrderUnload = "gpa_order_unload"
        case identifier
        case incrementalAuthorizationTransactionTokens = "incremental_authorization_transaction_tokens"
        case interchangeRateDescriptor = "interchange_rate_descriptor"
        case isPreauthorization = "is_preauthorization"
        case isaIndicator
        case issuerInterchangeAmount = "issuer_interchange_amount"
        case issuerPaymentNode = "issuer_payment_node"
        case issuerReceivedTime = "issuer_received_time"
        case merchant
        case msaOrderUnload = "msa_order_unload"
        case multiClearingSequenceCount = "multi_clearing_sequence_count"
        case multiClearingSequenceNumber = "multi_clearing_sequence_number"
        case network
        case networkMetadata = "network_metadata"
        case networkReferenceId = "network_reference_id"
        case originalCredit = "original_credit"
        case peerTransfer = "peer_transfer"
        case polarity
        case pos
        case precedingRelatedTransactionToken = "preceding_related_transaction_token"
        case precedingTransaction = "preceding_transaction"
        case program
        case programTransfer = "program_transfer"
        case realTimeFeeGroup = "real_time_fee_group"
        case realTimeFeeType = "real_time_fee_type"
        case requestAmount = "request_amount"
        case response
        case settlementDate = "settlement_date"
        case standinApprovedBy = "standin_approved_by"
        case standinBy = "standin_by"
        case standinReason = "standin_reason"
        case state
        case store
        case subnetwork
        case token
        case transactionAttributes = "transaction_attributes"
        case transactionMetadata = "transaction_metadata"
        case type
        case user
        case userToken = "user_token"
        case userTransactionTime = "user_transaction_time"
    }

}
