//
// StrongCustomerAuthenticationLimits.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information about Strong Customer Authentication (SCA) behavior for contactless point-of-sale (POS) and low-value payment (LVP) e-commerce transactions. */

public struct StrongCustomerAuthenticationLimits: Codable {

    /** Specifies the cumulative limit of transactions the cardholder can perform before receiving an SCA challenge.  A value of &#x60;0&#x60; in this field means that the cumulative amount spent in contactless POS transactions performed by the cardholder does not impact the decision of whether or not an SCA challenge is served. */
    public var scaContactlessCumulativeAmountLimit: Decimal?
    /** Specifies the maximum allowable amount for a single contactless point-of-sale (POS) transaction, above which the cardholder receives a strong customer authentication (SCA) challenge.  A value of &#x60;0&#x60; in this field means that the amount of any single contactless POS transaction performed by the cardholder does not impact the decision of whether or not an SCA challenge is served. */
    public var scaContactlessTransactionLimit: Decimal?
    /** Specifies the number of contactless POS transactions the cardholder can perform before receiving an SCA challenge.  A value of &#x60;0&#x60; in this field means that the number of contactless POS transactions performed by the cardholder does not impact the decision of whether or not an SCA challenge is served. */
    public var scaContactlessTransactionsCountLimit: Int?
    /** Specifies the currency type for contactless POS transactions.  This field is required if either the &#x60;sca_contactless_transaction_limit&#x60; field or the &#x60;sca_contactless_cumulative_amount_limit&#x60; field in this object contains a value, even if that value is &#x60;0&#x60;. */
    public var scaContactlessTransactionsCurrency: String?
    /** Specifies the cumulative limit of LVP e-commerce transactions the cardholder can perform before receiving an SCA challenge.  For example, if you set the value of this field to &#x60;100.00&#x60;, your cardholder can perform two transactions for &#x60;30.00&#x60; and two transactions for &#x60;20.00&#x60; before receiving an SCA challenge.  If you leave this field blank, the cumulative amount spent in LVP e-commerce transactions performed by the cardholder does not impact the decision of whether or not an SCA challenge is served. */
    public var scaLvpCumulativeAmountLimit: Decimal?
    /** Specifies the maximum allowable amount for a single low-value payment (LVP) e-commerce transaction, above which the cardholder receives a strong customer authentication (SCA) challenge.  If you leave this field blank, the amount of any single LVP e-commerce transaction performed by the cardholder does not impact the decision of whether or not an SCA challenge is served. */
    public var scaLvpTransactionLimit: Decimal?
    /** Specifies the number of LVP e-commerce transactions the cardholder can perform before receiving an SCA challenge.  If you leave this field blank, the total number of LVP e-commerce transactions performed by the cardholder does not impact the decision of whether or not an SCA challenge is served. */
    public var scaLvpTransactionsCountLimit: Int?
    /** Specifies the currency type for LVP e-commerce transaction limits.  This field is required if any one of the &#x60;sca_lvp_transaction_limit&#x60;, &#x60;sca_lvp_cumulative_amount_limit&#x60;, or &#x60;sca_lvp_transactions_count_limit&#x60; fields in this object contains a value, even if that value is &#x60;0&#x60;. */
    public var scaLvpTransactionsCurrency: String?
    /** Specifies the maximum allowable amount for a single low-value payment (LVP) e-commerce transaction with transaction risk analysis (TRA) exemption sent by the merchant or acquirer. If the transaction amount exceeds the specified limit, then the transaction is either approved or it receives a strong customer authentication (SCA) challenge based on &#x60;sca_lvp_transaction_limit&#x60; and &#x60;sca_lvp_transactions_currency&#x60;. */
    public var scaTraExemptionAmountLimit: Decimal?

    public init(scaContactlessCumulativeAmountLimit: Decimal? = nil, scaContactlessTransactionLimit: Decimal? = nil, scaContactlessTransactionsCountLimit: Int? = nil, scaContactlessTransactionsCurrency: String? = nil, scaLvpCumulativeAmountLimit: Decimal? = nil, scaLvpTransactionLimit: Decimal? = nil, scaLvpTransactionsCountLimit: Int? = nil, scaLvpTransactionsCurrency: String? = nil, scaTraExemptionAmountLimit: Decimal? = nil) {
        self.scaContactlessCumulativeAmountLimit = scaContactlessCumulativeAmountLimit
        self.scaContactlessTransactionLimit = scaContactlessTransactionLimit
        self.scaContactlessTransactionsCountLimit = scaContactlessTransactionsCountLimit
        self.scaContactlessTransactionsCurrency = scaContactlessTransactionsCurrency
        self.scaLvpCumulativeAmountLimit = scaLvpCumulativeAmountLimit
        self.scaLvpTransactionLimit = scaLvpTransactionLimit
        self.scaLvpTransactionsCountLimit = scaLvpTransactionsCountLimit
        self.scaLvpTransactionsCurrency = scaLvpTransactionsCurrency
        self.scaTraExemptionAmountLimit = scaTraExemptionAmountLimit
    }

    public enum CodingKeys: String, CodingKey { 
        case scaContactlessCumulativeAmountLimit = "sca_contactless_cumulative_amount_limit"
        case scaContactlessTransactionLimit = "sca_contactless_transaction_limit"
        case scaContactlessTransactionsCountLimit = "sca_contactless_transactions_count_limit"
        case scaContactlessTransactionsCurrency = "sca_contactless_transactions_currency"
        case scaLvpCumulativeAmountLimit = "sca_lvp_cumulative_amount_limit"
        case scaLvpTransactionLimit = "sca_lvp_transaction_limit"
        case scaLvpTransactionsCountLimit = "sca_lvp_transactions_count_limit"
        case scaLvpTransactionsCurrency = "sca_lvp_transactions_currency"
        case scaTraExemptionAmountLimit = "sca_tra_exemption_amount_limit"
    }

}
