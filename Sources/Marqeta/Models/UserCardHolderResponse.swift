//
// UserCardHolderResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information about a cardholder. */

public struct UserCardHolderResponse: Codable {

    public enum Gender: String, Codable { 
        case f = "F"
        case m = "M"
    }
    public enum Status: String, Codable { 
        case unverified = "UNVERIFIED"
        case limited = "LIMITED"
        case active = "ACTIVE"
        case suspended = "SUSPENDED"
        case closed = "CLOSED"
    }
    /** Associates the specified account holder group with the cardholder. */
    public var accountHolderGroupToken: String?
    /** Specifies if the cardholder is in the &#x60;ACTIVE&#x60; state on the Marqeta platform. */
    public var active: Bool?
    /** Cardholder&#x27;s address. */
    public var address1: String?
    /** Additional address information for the cardholder. */
    public var address2: String?
    public var authentication: Authentication?
    /** Cardholder&#x27;s date of birth. */
    public var birthDate: String?
    /** Unique identifier of the business resource. */
    public var businessToken: String?
    /** City where the cardholder resides. */
    public var city: String?
    /** Company name. */
    public var company: String?
    /** Specifies if the cardholder holds a corporate card. */
    public var corporateCardHolder: Bool?
    /** Country where the cardholder resides. */
    public var country: String?
    /** Date and time when the resource was created, in UTC. */
    public var createdTime: Date
    /** Valid email address of the cardholder. */
    public var email: String?
    /** Cardholder&#x27;s first name. */
    public var firstName: String?
    /** Gender of the cardholder. */
    public var gender: Gender?
    /** Cardholder&#x27;s title or prefix: Dr., Miss, Mr., Ms., and so on. */
    public var honorific: String?
    /** Expiration date of the cardholder&#x27;s identification. */
    public var idCardExpirationDate: String?
    /** Cardholder&#x27;s identification card number. */
    public var idCardNumber: String?
    /** One or more objects containing identifications associated with the cardholder. */
    public var identifications: [IdentificationResponseModel]?
    /** Cardholder&#x27;s IP address. */
    public var ipAddress: String?
    /** Date and time when the resource was last updated, in UTC. */
    public var lastModifiedTime: Date
    /** Cardholder&#x27;s last name. */
    public var lastName: String?
    /** Associates any additional metadata you provide with the cardholder. */
    public var metadata: [String:String]?
    /** Cardholder&#x27;s middle name. */
    public var middleName: String?
    /** Cardholder&#x27;s nationality. */
    public var nationality: String?
    /** Any additional information pertaining to the cardholder. */
    public var notes: String?
    /** Unique identifier of the parent user or business resource. */
    public var parentToken: String?
    /** Expiration date of the cardholder&#x27;s passport. */
    public var passportExpirationDate: String?
    /** Cardholder&#x27;s passport number. */
    public var passportNumber: String?
    /** Password to the cardholder&#x27;s user account on the Marqeta platform. */
    public var password: String?
    /** Cardholder&#x27;s telephone number. */
    public var phone: String?
    /** Postal code of the cardholder&#x27;s address. */
    public var postalCode: String?
    /** Cardholder&#x27;s Social Security Number (SSN). */
    public var ssn: String?
    /** State or province where the cardholder resides. */
    public var state: String?
    /** Specifies the status of the cardholder on the Marqeta platform. */
    public var status: Status?
    /** Unique identifier of the cardholder. */
    public var token: String?
    /** Indicates whether the child shares balances with the parent (&#x60;true&#x60;), or the child&#x27;s balances are independent of the parent (&#x60;false&#x60;). */
    public var usesParentAccount: Bool?
    /** United States ZIP code of the cardholder&#x27;s address. */
    public var zip: String?

    public init(accountHolderGroupToken: String? = nil, active: Bool? = nil, address1: String? = nil, address2: String? = nil, authentication: Authentication? = nil, birthDate: String? = nil, businessToken: String? = nil, city: String? = nil, company: String? = nil, corporateCardHolder: Bool? = nil, country: String? = nil, createdTime: Date, email: String? = nil, firstName: String? = nil, gender: Gender? = nil, honorific: String? = nil, idCardExpirationDate: String? = nil, idCardNumber: String? = nil, identifications: [IdentificationResponseModel]? = nil, ipAddress: String? = nil, lastModifiedTime: Date, lastName: String? = nil, metadata: [String:String]? = nil, middleName: String? = nil, nationality: String? = nil, notes: String? = nil, parentToken: String? = nil, passportExpirationDate: String? = nil, passportNumber: String? = nil, password: String? = nil, phone: String? = nil, postalCode: String? = nil, ssn: String? = nil, state: String? = nil, status: Status? = nil, token: String? = nil, usesParentAccount: Bool? = nil, zip: String? = nil) {
        self.accountHolderGroupToken = accountHolderGroupToken
        self.active = active
        self.address1 = address1
        self.address2 = address2
        self.authentication = authentication
        self.birthDate = birthDate
        self.businessToken = businessToken
        self.city = city
        self.company = company
        self.corporateCardHolder = corporateCardHolder
        self.country = country
        self.createdTime = createdTime
        self.email = email
        self.firstName = firstName
        self.gender = gender
        self.honorific = honorific
        self.idCardExpirationDate = idCardExpirationDate
        self.idCardNumber = idCardNumber
        self.identifications = identifications
        self.ipAddress = ipAddress
        self.lastModifiedTime = lastModifiedTime
        self.lastName = lastName
        self.metadata = metadata
        self.middleName = middleName
        self.nationality = nationality
        self.notes = notes
        self.parentToken = parentToken
        self.passportExpirationDate = passportExpirationDate
        self.passportNumber = passportNumber
        self.password = password
        self.phone = phone
        self.postalCode = postalCode
        self.ssn = ssn
        self.state = state
        self.status = status
        self.token = token
        self.usesParentAccount = usesParentAccount
        self.zip = zip
    }

    public enum CodingKeys: String, CodingKey { 
        case accountHolderGroupToken = "account_holder_group_token"
        case active
        case address1
        case address2
        case authentication
        case birthDate = "birth_date"
        case businessToken = "business_token"
        case city
        case company
        case corporateCardHolder = "corporate_card_holder"
        case country
        case createdTime = "created_time"
        case email
        case firstName = "first_name"
        case gender
        case honorific
        case idCardExpirationDate = "id_card_expiration_date"
        case idCardNumber = "id_card_number"
        case identifications
        case ipAddress = "ip_address"
        case lastModifiedTime = "last_modified_time"
        case lastName = "last_name"
        case metadata
        case middleName = "middle_name"
        case nationality
        case notes
        case parentToken = "parent_token"
        case passportExpirationDate = "passport_expiration_date"
        case passportNumber = "passport_number"
        case password
        case phone
        case postalCode = "postal_code"
        case ssn
        case state
        case status
        case token
        case usesParentAccount = "uses_parent_account"
        case zip
    }

}
