//
// OriginalCredit.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information about an original credit transaction (OCT), which enables the cardholder to receive funds on the specified card from an external source via the card network. */

public struct OriginalCredit: Codable {

    public enum DeferredHoldBy: String, Codable { 
        case absent = "absent"
        case visa = "visa"
        case originator = "originator"
    }
    public enum FundingSource: String, Codable { 
        case credit = "CREDIT"
        case debit = "DEBIT"
        case prepaid = "PREPAID"
        case depositAccount = "DEPOSIT_ACCOUNT"
        case cash = "CASH"
        case mobileMoneyAccount = "MOBILE_MONEY_ACCOUNT"
        case nonVisaCredit = "NON_VISA_CREDIT"
    }
    public enum SenderAccountType: String, Codable { 
        case other = "OTHER"
        case rtnBankAccount = "RTN_BANK_ACCOUNT"
        case iban = "IBAN"
        case cardAccount = "CARD_ACCOUNT"
        case email = "EMAIL"
        case phoneNumber = "PHONE_NUMBER"
        case bankAccountNumberAndBankIdentificationCode = "BANK_ACCOUNT_NUMBER_AND_BANK_IDENTIFICATION_CODE"
        case walletId = "WALLET_ID"
        case socialNetworkId = "SOCIAL_NETWORK_ID"
    }
    public enum TransactionType: String, Codable { 
        case accountToAccount = "account_to_account"
        case personToPerson = "person_to_person"
        case walletTransfer = "wallet_transfer"
        case moneyTransferByBank = "money_transfer_by_bank"
        case businessToBusiness = "business_to_business"
        case disbursement = "disbursement"
        case governmentDisbursement = "government_disbursement"
        case gamblingPayout = "gambling_payout"
        case loyalty = "loyalty"
        case merchantDisbursement = "merchant_disbursement"
        case onlineGamblingPayout = "online_gambling_payout"
        case pensionDisbursement = "pension_disbursement"
        case prepaidLoads = "prepaid_loads"
        case cardBillPayment = "card_bill_payment"
        case billPayment = "bill_payment"
        case cashClaim = "cash_claim"
        case cashIn = "cash_in"
        case cashOut = "cash_out"
        case mobileAirTimePayment = "mobile_air_time_payment"
        case moneyTransferByMerchant = "money_transfer_by_merchant"
        case faceToFaceMerchantPayment = "face_to_face_merchant_payment"
        case governmentPayment = "government_payment"
        case paymentsGoodsServices = "payments_goods_services"
        case fundsTransfer = "funds_transfer"
        case generalBusinessToBusinessTransfer = "general_business_to_business_transfer"
        case businessToBusinessTransfer = "business_to_business_transfer"
        case cashDeposit = "cash_deposit"
        case purchaseRepayment = "purchase_repayment"
    }
    public var deferredHoldBy: DeferredHoldBy?
    /** Sender&#x27;s account from which the OCT draws funds. */
    public var fundingSource: FundingSource?
    /** Sanctions screening score to assist with meeting Anti-Money Laundering (AML) obligations.  Higher scores indicate that the sender&#x27;s data more closely resembles an entry on the regulatory watchlist.  A value of 999 means that no screening score is available. */
    public var screeningScore: String?
    /** The type of account from which the OCT draws funds. */
    public var senderAccountType: SenderAccountType?
    /** Sender&#x27;s street address. */
    public var senderAddress: String?
    /** Sender&#x27;s city. */
    public var senderCity: String?
    /** Sender&#x27;s country. */
    public var senderCountry: String?
    /** Full name of the sender. */
    public var senderName: String?
    /** Sender&#x27;s state. */
    public var senderState: String?
    /** The purpose of the original credit transaction. */
    public var transactionPurpose: String?
    /** Type of original credit transaction. */
    public var transactionType: TransactionType?

    public init(deferredHoldBy: DeferredHoldBy? = nil, fundingSource: FundingSource? = nil, screeningScore: String? = nil, senderAccountType: SenderAccountType? = nil, senderAddress: String? = nil, senderCity: String? = nil, senderCountry: String? = nil, senderName: String? = nil, senderState: String? = nil, transactionPurpose: String? = nil, transactionType: TransactionType? = nil) {
        self.deferredHoldBy = deferredHoldBy
        self.fundingSource = fundingSource
        self.screeningScore = screeningScore
        self.senderAccountType = senderAccountType
        self.senderAddress = senderAddress
        self.senderCity = senderCity
        self.senderCountry = senderCountry
        self.senderName = senderName
        self.senderState = senderState
        self.transactionPurpose = transactionPurpose
        self.transactionType = transactionType
    }

    public enum CodingKeys: String, CodingKey { 
        case deferredHoldBy = "deferred_hold_by"
        case fundingSource = "funding_source"
        case screeningScore = "screening_score"
        case senderAccountType = "sender_account_type"
        case senderAddress = "sender_address"
        case senderCity = "sender_city"
        case senderCountry = "sender_country"
        case senderName = "sender_name"
        case senderState = "sender_state"
        case transactionPurpose = "transaction_purpose"
        case transactionType = "transaction_type"
    }

}
