//
// AccountAdjustmentReq.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information relevant to creating an account adjustment. */

public struct AccountAdjustmentReq: Codable {

    public enum Reason: String, Codable { 
        case dispute = "DISPUTE"
        case disputeResolution = "DISPUTE_RESOLUTION"
        case returnedOrCanceledPayment = "RETURNED_OR_CANCELED_PAYMENT"
        case other = "OTHER"
    }
    /** Amount of the adjustment.  Value must be negative if &#x60;original_ledger_entry_token&#x60; is not passed. */
    public var amount: Decimal
    public var currencyCode: CurrencyCode
    /** Description of the adjustment. */
    public var _description: String
    /** Unique identifier you provide of an associated external adjustment that exists outside Marqeta&#x27;s credit platform. */
    public var externalAdjustmentId: UUID?
    /** Additional information on the adjustment. */
    public var note: String?
    /** Unique identifier of the original journal entry needing the adjustment.  Required when adjusting an existing journal entry. */
    public var originalLedgerEntryToken: UUID?
    /** Reason for the adjustment.  * &#x60;DISPUTE&#x60; - The adjustment occurred because a dispute was initiated. * &#x60;DISPUTE_RESOLUTION&#x60; - The adjustment occurred because of the result of a dispute resolution. * &#x60;RETURNED_OR_CANCELED_PAYMENT&#x60; - The adjustment occurred because a payment was returned or canceled. * &#x60;OTHER&#x60; - Any other reason the adjustment occurred. For example, a waived fee or account write-off. */
    public var reason: Reason?
    /** Unique identifier of the adjustment. */
    public var token: String?

    public init(amount: Decimal, currencyCode: CurrencyCode, _description: String, externalAdjustmentId: UUID? = nil, note: String? = nil, originalLedgerEntryToken: UUID? = nil, reason: Reason? = nil, token: String? = nil) {
        self.amount = amount
        self.currencyCode = currencyCode
        self._description = _description
        self.externalAdjustmentId = externalAdjustmentId
        self.note = note
        self.originalLedgerEntryToken = originalLedgerEntryToken
        self.reason = reason
        self.token = token
    }

    public enum CodingKeys: String, CodingKey { 
        case amount
        case currencyCode = "currency_code"
        case _description = "description"
        case externalAdjustmentId = "external_adjustment_id"
        case note
        case originalLedgerEntryToken = "original_ledger_entry_token"
        case reason
        case token
    }

}
