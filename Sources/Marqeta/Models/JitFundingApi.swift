//
// JitFundingApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information about the JIT Funding load event, in which funds are loaded into an account. */

public struct JitFundingApi: Codable {

    public enum DeclineReason: String, Codable { 
        case invalidAmount = "INVALID_AMOUNT"
        case insufficientFunds = "INSUFFICIENT_FUNDS"
        case transactionNotPermitted = "TRANSACTION_NOT_PERMITTED"
        case suspectedFraud = "SUSPECTED_FRAUD"
        case amountLimitExceeded = "AMOUNT_LIMIT_EXCEEDED"
        case transactionCountLimitExceeded = "TRANSACTION_COUNT_LIMIT_EXCEEDED"
        case duplicateTransaction = "DUPLICATE_TRANSACTION"
        case invalidMerchant = "INVALID_MERCHANT"
        case invalidCard = "INVALID_CARD"
        case noCreditAccount = "NO_CREDIT_ACCOUNT"
        case expiredCard = "EXPIRED_CARD"
        case noCheckingAccount = "NO_CHECKING_ACCOUNT"
        case noSavingsAccount = "NO_SAVINGS_ACCOUNT"
        case stopPayment = "STOP_PAYMENT"
        case revocationAuthorizationOrder = "REVOCATION_AUTHORIZATION_ORDER"
        case revocationAllAuthorizationOrder = "REVOCATION_ALL_AUTHORIZATION_ORDER"
        case softDeclineAuthenticationRequired = "SOFT_DECLINE_AUTHENTICATION_REQUIRED"
        case closedAccount = "CLOSED_ACCOUNT"
        case softDeclinePinRequired = "SOFT_DECLINE_PIN_REQUIRED"
        case cardNotActive = "CARD_NOT_ACTIVE"
        case cardholderNotActive = "CARDHOLDER_NOT_ACTIVE"
    }
    public enum Method: String, Codable { 
        case authorization = "pgfs.authorization"
        case balanceinquiry = "pgfs.balanceinquiry"
        case authorizationIncremental = "pgfs.authorization.incremental"
        case authorizationCapture = "pgfs.authorization.capture"
        case authorizationReversal = "pgfs.authorization.reversal"
        case authPlusCapture = "pgfs.auth_plus_capture"
        case refund = "pgfs.refund"
        case forceCapture = "pgfs.force_capture"
        case authorizationCaptureChargeback = "pgfs.authorization.capture.chargeback"
        case authorizationCaptureChargebackReversal = "pgfs.authorization.capture.chargeback.reversal"
        case pindebitChargeback = "pgfs.pindebit.chargeback"
        case pindebitChargebackReversal = "pgfs.pindebit.chargeback.reversal"
        case disputeCredit = "pgfs.dispute.credit"
        case disputeDebit = "pgfs.dispute.debit"
        case directdepositCredit = "pgfs.directdeposit.credit"
        case directdepositDebit = "pgfs.directdeposit.debit"
        case directdepositCreditReversal = "pgfs.directdeposit.credit.reversal"
        case directdepositDebitReversal = "pgfs.directdeposit.debit.reversal"
        case adjustmentCredit = "pgfs.adjustment.credit"
        case adjustmentDebit = "pgfs.adjustment.debit"
        case authPlusCaptureStandin = "pgfs.auth_plus_capture.standin"
        case authorizationStandin = "pgfs.authorization.standin"
        case networkLoad = "pgfs.network.load"
        case originalCreditAuthorization = "pgfs.original.credit.authorization"
        case originalCreditAuthPlusCapture = "pgfs.original.credit.auth_plus_capture"
        case refundAuthorization = "pgfs.refund.authorization"
        case refundAuthorizationReversalpgfsBillpayment = "pgfs.refund.authorization.reversalpgfs.billpayment"
        case billpaymentCapture = "pgfs.billpayment.capture"
        case billpaymentReversal = "pgfs.billpayment.reversal"
        case authorizationAccountVerification = "pgfs.authorization.account_verification"
    }
    /** User who conducted the transaction.  Can be a child user configured to share its parent&#x27;s account balance. */
    public var actingUserToken: String?
    public var addressVerification: JitAddressVerification?
    /** Requested amount of funding. */
    public var amount: Decimal
    /** Contains the GPA&#x27;s balance details. */
    public var balances: [String:CardholderBalance]?
    /** Holder of the business account that was funded. */
    public var businessToken: String?
    /** Reason why the transaction was declined. */
    public var declineReason: DeclineReason?
    /** Array of tokens referencing the JIT Funding tokens of all previous associated incremental authorization JIT Funding requests. Useful for ascertaining the final transaction amount when the original amount was incremented. */
    public var incrementalAuthorizationJitFundingTokens: [String]?
    /** Additional information that describes the JIT Funding transaction. */
    public var memo: String?
    /** JIT Funding response type. See &lt;&lt;/core-api/gateway-jit-funding-messages#_the_jit_funding_object, The jit_funding object&gt;&gt; for the purpose, funding event type, and description of each method. */
    public var method: Method
    /** Unique identifier of the first associated JIT Funding message. Useful for correlating related JIT Funding messages (that is, those associated with the same GPA order). Not included in the first of any set of related messages. */
    public var originalJitFundingToken: String?
    /** Customer-defined tags related to the JIT Funding transaction. */
    public var tags: String?
    /** Existing JIT Funding token matching the &#x60;funding.gateway_log.transaction_id&#x60; field of the associated GPA order. Note that the &#x60;transaction_id&#x60; field updates if a subsequent JIT Funding message associated with that GPA order is sent. If multiple JIT Funding messages are associated with the same GPA order, the &#x60;transaction_id&#x60; field matches the token of the most recent message. */
    public var token: String
    /** Holder of the user account that was funded. */
    public var userToken: String

    public init(actingUserToken: String? = nil, addressVerification: JitAddressVerification? = nil, amount: Decimal, balances: [String:CardholderBalance]? = nil, businessToken: String? = nil, declineReason: DeclineReason? = nil, incrementalAuthorizationJitFundingTokens: [String]? = nil, memo: String? = nil, method: Method, originalJitFundingToken: String? = nil, tags: String? = nil, token: String, userToken: String) {
        self.actingUserToken = actingUserToken
        self.addressVerification = addressVerification
        self.amount = amount
        self.balances = balances
        self.businessToken = businessToken
        self.declineReason = declineReason
        self.incrementalAuthorizationJitFundingTokens = incrementalAuthorizationJitFundingTokens
        self.memo = memo
        self.method = method
        self.originalJitFundingToken = originalJitFundingToken
        self.tags = tags
        self.token = token
        self.userToken = userToken
    }

    public enum CodingKeys: String, CodingKey { 
        case actingUserToken = "acting_user_token"
        case addressVerification = "address_verification"
        case amount
        case balances
        case businessToken = "business_token"
        case declineReason = "decline_reason"
        case incrementalAuthorizationJitFundingTokens = "incremental_authorization_jit_funding_tokens"
        case memo
        case method
        case originalJitFundingToken = "original_jit_funding_token"
        case tags
        case token
        case userToken = "user_token"
    }

}
