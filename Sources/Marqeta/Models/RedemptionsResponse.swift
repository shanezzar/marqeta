//
// RedemptionsResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information on a reward redemption. */

public struct RedemptionsResponse: Codable {

    /** Amount to redeem. */
    public var amount: Decimal
    /** Date and time when the reward redemption was created on the Marqeta platform, in UTC. */
    public var createdTime: Date
    public var destination: DestinationType?
    /** Date and time when the reward redemption was settled on your external platform.  This field is returned if you handled the reward redemption outside of Marqeta&#x27;s credit platform. */
    public var externalSettlementDateTime: Date?
    public var note: String
    /** Unique identifier of the external account receiving the reward redemption. This token is equivalent to the &lt;&lt;/core-api/payment-sources, payment source&gt;&gt; token. */
    public var receivingAccountToken: String?
    /** Contains one or more reward entries related to the redemption. */
    public var relatedRewardEntries: [RewardProgramsEntriesResponse]?
    /** Unique identifier of the reward program for which to redeem rewards. */
    public var rewardProgramToken: String
    /** Unique identifier of the system of reward (SOR) reward that was created to represent the reward redemption as a &#x60;STATEMENT_CREDIT&#x60; on a credit account. The SOR entry is a positive amount that is added to the account balance. */
    public var sorRewardToken: String?
    public var status: RedemptionStatus
    /** Unique identifier of the reward redemption. */
    public var token: String
    public var type: RedemptionType
    /** Date and time when the reward redemption was last updated on the Marqeta platform, in UTC. */
    public var updatedTime: Date

    public init(amount: Decimal, createdTime: Date, destination: DestinationType? = nil, externalSettlementDateTime: Date? = nil, note: String, receivingAccountToken: String? = nil, relatedRewardEntries: [RewardProgramsEntriesResponse]? = nil, rewardProgramToken: String, sorRewardToken: String? = nil, status: RedemptionStatus, token: String, type: RedemptionType, updatedTime: Date) {
        self.amount = amount
        self.createdTime = createdTime
        self.destination = destination
        self.externalSettlementDateTime = externalSettlementDateTime
        self.note = note
        self.receivingAccountToken = receivingAccountToken
        self.relatedRewardEntries = relatedRewardEntries
        self.rewardProgramToken = rewardProgramToken
        self.sorRewardToken = sorRewardToken
        self.status = status
        self.token = token
        self.type = type
        self.updatedTime = updatedTime
    }

    public enum CodingKeys: String, CodingKey { 
        case amount
        case createdTime = "created_time"
        case destination
        case externalSettlementDateTime = "external_settlement_date_time"
        case note
        case receivingAccountToken = "receiving_account_token"
        case relatedRewardEntries = "related_reward_entries"
        case rewardProgramToken = "reward_program_token"
        case sorRewardToken = "sor_reward_token"
        case status
        case token
        case type
        case updatedTime = "updated_time"
    }

}
