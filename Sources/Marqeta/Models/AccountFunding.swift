//
// AccountFunding.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct AccountFunding: Codable {

    public enum FundingSource: String, Codable { 
        case credit = "CREDIT"
        case debit = "DEBIT"
        case prepaid = "PREPAID"
        case depositAccount = "DEPOSIT_ACCOUNT"
        case cash = "CASH"
        case mobileMoneyAccount = "MOBILE_MONEY_ACCOUNT"
        case nonVisaCredit = "NON_VISA_CREDIT"
    }
    public enum ReceiverAccountType: String, Codable { 
        case other = "OTHER"
        case rtnBankAccount = "RTN_BANK_ACCOUNT"
        case iban = "IBAN"
        case cardAccount = "CARD_ACCOUNT"
        case email = "EMAIL"
        case phoneNumber = "PHONE_NUMBER"
        case bankAccountNumberAndBankIdentificationCode = "BANK_ACCOUNT_NUMBER_AND_BANK_IDENTIFICATION_CODE"
        case walletId = "WALLET_ID"
        case socialNetworkId = "SOCIAL_NETWORK_ID"
    }
    public enum TransactionType: String, Codable { 
        case accountToAccount = "ACCOUNT_TO_ACCOUNT"
        case personToPerson = "PERSON_TO_PERSON"
        case walletTransfer = "WALLET_TRANSFER"
        case moneyTransferByBank = "MONEY_TRANSFER_BY_BANK"
        case businessToBusiness = "BUSINESS_TO_BUSINESS"
        case disbursement = "DISBURSEMENT"
        case governmentDisbursement = "GOVERNMENT_DISBURSEMENT"
        case gamblingPayout = "GAMBLING_PAYOUT"
        case loyalty = "LOYALTY"
        case merchantDisbursement = "MERCHANT_DISBURSEMENT"
        case onlineGamblingPayout = "ONLINE_GAMBLING_PAYOUT"
        case pensionDisbursement = "PENSION_DISBURSEMENT"
        case prepaidLoads = "PREPAID_LOADS"
        case cardBillPayment = "CARD_BILL_PAYMENT"
        case billPayment = "BILL_PAYMENT"
        case cashClaim = "CASH_CLAIM"
        case cashIn = "CASH_IN"
        case cashOut = "CASH_OUT"
        case mobileAirTimePayment = "MOBILE_AIR_TIME_PAYMENT"
        case moneyTransferByMerchant = "MONEY_TRANSFER_BY_MERCHANT"
        case faceToFaceMerchantPayment = "FACE_TO_FACE_MERCHANT_PAYMENT"
        case governmentPayment = "GOVERNMENT_PAYMENT"
        case paymentsGoodsServices = "PAYMENTS_GOODS_SERVICES"
        case fundsTransfer = "FUNDS_TRANSFER"
        case generalBusinessToBusinessTransfer = "GENERAL_BUSINESS_TO_BUSINESS_TRANSFER"
        case businessToBusinessTransfer = "BUSINESS_TO_BUSINESS_TRANSFER"
        case cashDeposit = "CASH_DEPOSIT"
        case purchaseRepayment = "PURCHASE_REPAYMENT"
    }
    public var fundingSource: FundingSource?
    public var receiverAccountType: ReceiverAccountType?
    public var receiverName: String?
    public var screeningScore: String?
    public var transactionPurpose: String?
    public var transactionType: TransactionType?

    public init(fundingSource: FundingSource? = nil, receiverAccountType: ReceiverAccountType? = nil, receiverName: String? = nil, screeningScore: String? = nil, transactionPurpose: String? = nil, transactionType: TransactionType? = nil) {
        self.fundingSource = fundingSource
        self.receiverAccountType = receiverAccountType
        self.receiverName = receiverName
        self.screeningScore = screeningScore
        self.transactionPurpose = transactionPurpose
        self.transactionType = transactionType
    }

    public enum CodingKeys: String, CodingKey { 
        case fundingSource = "funding_source"
        case receiverAccountType = "receiver_account_type"
        case receiverName = "receiver_name"
        case screeningScore = "screening_score"
        case transactionPurpose = "transaction_purpose"
        case transactionType = "transaction_type"
    }

}
