//
// SelectiveAuth.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information about authorization decisions. */

public struct SelectiveAuth: Codable {

    public enum DmdLocationSensitivity: Int, Codable { 
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }
    public enum SaMode: Int, Codable { 
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    /** Determines what type of merchant information is required for a match (authorization). Not relevant if &#x60;enable_regex_search_chain &#x3D; false&#x60;.  * *0* – Requires exact match on card acceptor name and postal code to existing entry in Marqeta Merchant database (most restrictive). * *1* – Partial match on card acceptor name (least restrictive). * *2* – Partial match on card acceptor name; exact match on card acceptor city. * *3* – Partial match on card acceptor name; exact match on card acceptor postal code. * *4* – Partial match on card acceptor name; exact match on street address 1 and postal code. */
    public var dmdLocationSensitivity: DmdLocationSensitivity?
    /** Set to &#x60;true&#x60; to perform regular expression checking on the description received in the authorization. */
    public var enableRegexSearchChain: Bool?
    /** Specifies the selective authorization mode.  * *0* — Inactive * *1* — Active (attempts to authorize a merchant that does not have a recognized MID by matching other pieces of information) * *2* — Logging and notification (checks the transaction and logs results, but does not authorize)  Selective authorization applies to transactions that are limited to specific merchants. Matching requirements for authorization are set by the &#x60;dmd_location_sensitivity&#x60; field. */
    public var saMode: SaMode?

    public init(dmdLocationSensitivity: DmdLocationSensitivity? = nil, enableRegexSearchChain: Bool? = nil, saMode: SaMode? = nil) {
        self.dmdLocationSensitivity = dmdLocationSensitivity
        self.enableRegexSearchChain = enableRegexSearchChain
        self.saMode = saMode
    }

    public enum CodingKeys: String, CodingKey { 
        case dmdLocationSensitivity = "dmd_location_sensitivity"
        case enableRegexSearchChain = "enable_regex_search_chain"
        case saMode = "sa_mode"
    }

}
