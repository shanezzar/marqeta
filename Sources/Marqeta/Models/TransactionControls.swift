//
// TransactionControls.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Controls transactional characteristics of card usage. */

public struct TransactionControls: Codable {

    /** Set to &#x60;accept_us_only&#x60; to allow transactions only within the US.  Set to &#x60;decline_ofac_countries&#x60; to allow international transactions except with countries that the Financial Action Task Force (FATF) and Office of Foreign Assets Control (OFAC) have identified as high risk.  Users with the Admin role can create and update additional lists of accepted countries for transactions at the &#x60;/acceptedcountries&#x60; endpoint. See &lt;&lt;/core-api/accepted-countries, Accepted Countries&gt;&gt;. */
    public var acceptedCountriesToken: String?
    public var addressVerification: AvsControls?
    /** Indicates whether to allow transactions where a Europay Mastercard and Visa (EMV) chip-enabled card was processed using the magstripe as fallback. */
    public var allowChipFallback: Bool?
    /** *WARNING:* This field is deprecated and will be unsupported in a future release.  Allows cardholders to define a personal identification number (PIN) as they complete their first PIN-debit transaction. */
    public var allowFirstPinSetViaFinancialTransaction: Bool?
    /** If set to &#x60;true&#x60;, transactions can be authorized using GPA funds.  *NOTE:* For most programs, this field should be set to &#x60;true&#x60;. */
    public var allowGpaAuth: Bool?
    /** The &lt;&lt;/core-api/mcc-groups, MCC group&gt;&gt; &#x60;authorization_controls&#x60; object allows you to automatically increase authorization holds and to specify authorization expiration times based on merchant type. By default, these settings apply to all cards in your program. You can, however, exempt cards associated with a particular card product by setting this field to &#x60;false&#x60;.  *NOTE:* Partial authorizations are disallowed if this field is set to &#x60;true&#x60;. */
    public var allowMccGroupAuthorizationControls: Bool?
    /** Indicates whether card network loads are allowed. The associated card&#x27;s state must be &#x60;ACTIVE&#x60; or the load will be rejected. */
    public var allowNetworkLoad: Bool?
    /** Indicates whether card network loads are allowed. Sets the associated card&#x27;s state to &#x60;ACTIVE&#x60; if its current state is &#x60;INACTIVE&#x60;. */
    public var allowNetworkLoadCardActivation: Bool?
    /** Indicates whether quasi-cash transactions are allowed. In a quasi-cash transaction, the cardholder purchases an item that can be directly converted to cash, such as traveler&#x27;s checks, money orders, casino chips, or lottery tickets. */
    public var allowQuasiCash: Bool?
    /** If set to &#x60;true&#x60;, cards of this card product type require an Integrated Circuit Card. */
    public var alwaysRequireIcc: Bool?
    /** If set to &#x60;true&#x60;, cards of this card product type require a personal identification number (PIN). */
    public var alwaysRequirePin: Bool?
    public var enableCreditService: Bool?
    /** Set to &#x60;true&#x60; to enable partial authorizations.  When this setting is &#x60;false&#x60; and the requested authorization amount exceeds available funds, the transaction is declined. When this setting is &#x60;true&#x60; and the requested authorization amount exceeds available funds, the transaction is authorized for the amount of available funds. */
    public var enablePartialAuthApproval: Bool?
    /** Allows transactions to be approved even if the card&#x27;s &#x60;state &#x3D; SUSPENDED&#x60;. When this field is set to &#x60;true&#x60;, the card behaves as if its &#x60;state &#x3D; ACTIVE&#x60;. */
    public var ignoreCardSuspendedState: Bool?
    /** Specifies the language for 3D Secure and digital wallet token notifications sent to cardholders under this card program. By default, notifications are sent in English. You can also send notifications to your cardholders in Czech, French, Italian, German, Polish, Spanish, and Swedish.  To specify the language for OTP notifications at the user level, see &lt;&lt;/core-api/users, Users&gt;&gt;. Languages set at the user level take precedence over the language set at the card product level. */
    public var notificationLanguage: String?
    /** The token of the merchant group that you want to exempt from quasi-cash transaction authorization control, allowing your cardholders to conduct quasi-cash transactions. In a quasi-cash transaction, the cardholder purchases an item that can be directly converted to cash, such as traveler&#x27;s checks, money orders, casino chips, or lottery tickets.  You can specify a merchant group token in addition to whatever merchant identifiers you listed in the &#x60;quasi_cash_exempt_mids&#x60; field, if any. For more information, see &lt;&lt;/core-api/merchant-groups, Merchant Groups&gt;&gt;. */
    public var quasiCashExemptMerchantGroupToken: String?
    /** Comma-separated list of merchant identifiers that you want to exempt from quasi-cash transaction authorization control, allowing your cardholders to conduct quasi-cash transactions. In a quasi-cash transaction, the cardholder purchases an item that can be directly converted to cash, such as traveler&#x27;s checks, money orders, casino chips, or lottery tickets. */
    public var quasiCashExemptMids: String?
    /** A value of &#x60;true&#x60; indicates that if &#x60;card_presence_required&#x60; is &#x60;true&#x60;, the card&#x27;s security code is required. */
    public var requireCardNotPresentCardSecurityCode: Bool?
    public var strongCustomerAuthenticationLimits: StrongCustomerAuthenticationLimits?

    public init(acceptedCountriesToken: String? = nil, addressVerification: AvsControls? = nil, allowChipFallback: Bool? = nil, allowFirstPinSetViaFinancialTransaction: Bool? = nil, allowGpaAuth: Bool? = nil, allowMccGroupAuthorizationControls: Bool? = nil, allowNetworkLoad: Bool? = nil, allowNetworkLoadCardActivation: Bool? = nil, allowQuasiCash: Bool? = nil, alwaysRequireIcc: Bool? = nil, alwaysRequirePin: Bool? = nil, enableCreditService: Bool? = nil, enablePartialAuthApproval: Bool? = nil, ignoreCardSuspendedState: Bool? = nil, notificationLanguage: String? = nil, quasiCashExemptMerchantGroupToken: String? = nil, quasiCashExemptMids: String? = nil, requireCardNotPresentCardSecurityCode: Bool? = nil, strongCustomerAuthenticationLimits: StrongCustomerAuthenticationLimits? = nil) {
        self.acceptedCountriesToken = acceptedCountriesToken
        self.addressVerification = addressVerification
        self.allowChipFallback = allowChipFallback
        self.allowFirstPinSetViaFinancialTransaction = allowFirstPinSetViaFinancialTransaction
        self.allowGpaAuth = allowGpaAuth
        self.allowMccGroupAuthorizationControls = allowMccGroupAuthorizationControls
        self.allowNetworkLoad = allowNetworkLoad
        self.allowNetworkLoadCardActivation = allowNetworkLoadCardActivation
        self.allowQuasiCash = allowQuasiCash
        self.alwaysRequireIcc = alwaysRequireIcc
        self.alwaysRequirePin = alwaysRequirePin
        self.enableCreditService = enableCreditService
        self.enablePartialAuthApproval = enablePartialAuthApproval
        self.ignoreCardSuspendedState = ignoreCardSuspendedState
        self.notificationLanguage = notificationLanguage
        self.quasiCashExemptMerchantGroupToken = quasiCashExemptMerchantGroupToken
        self.quasiCashExemptMids = quasiCashExemptMids
        self.requireCardNotPresentCardSecurityCode = requireCardNotPresentCardSecurityCode
        self.strongCustomerAuthenticationLimits = strongCustomerAuthenticationLimits
    }

    public enum CodingKeys: String, CodingKey { 
        case acceptedCountriesToken = "accepted_countries_token"
        case addressVerification = "address_verification"
        case allowChipFallback = "allow_chip_fallback"
        case allowFirstPinSetViaFinancialTransaction = "allow_first_pin_set_via_financial_transaction"
        case allowGpaAuth = "allow_gpa_auth"
        case allowMccGroupAuthorizationControls = "allow_mcc_group_authorization_controls"
        case allowNetworkLoad = "allow_network_load"
        case allowNetworkLoadCardActivation = "allow_network_load_card_activation"
        case allowQuasiCash = "allow_quasi_cash"
        case alwaysRequireIcc = "always_require_icc"
        case alwaysRequirePin = "always_require_pin"
        case enableCreditService = "enable_credit_service"
        case enablePartialAuthApproval = "enable_partial_auth_approval"
        case ignoreCardSuspendedState = "ignore_card_suspended_state"
        case notificationLanguage = "notification_language"
        case quasiCashExemptMerchantGroupToken = "quasi_cash_exempt_merchant_group_token"
        case quasiCashExemptMids = "quasi_cash_exempt_mids"
        case requireCardNotPresentCardSecurityCode = "require_card_not_present_card_security_code"
        case strongCustomerAuthenticationLimits = "strong_customer_authentication_limits"
    }

}
