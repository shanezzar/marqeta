//
// BusinessCardHolderUpdate.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct BusinessCardHolderUpdate: Codable {

    /** Associates the specified account holder group with the business. */
    public var accountHolderGroupToken: String?
    /** Specifies if the business is in the &#x60;ACTIVE&#x60; state on the Marqeta platform. */
    public var active: Bool?
    /** Indicates that the attester agrees that the information provided is correct and truthful.  This field is required for KYC verification (US-based accounts only). */
    public var attestationConsent: Bool?
    /** Timestamp of the attestation.  This field is required for KYC verification (US-based accounts only). */
    public var attestationDate: Date?
    /** Name of the attester for KYC verification.  This field is required for KYC verification (US-based accounts only). */
    public var attesterName: String?
    /** Title of the attester for KYC verification. */
    public var attesterTitle: String?
    public var beneficialOwner1: BeneficialOwnerRequest?
    public var beneficialOwner2: BeneficialOwnerRequest?
    public var beneficialOwner3: BeneficialOwnerRequest?
    public var beneficialOwner4: BeneficialOwnerRequest?
    /** Fictitious business name (\&quot;Doing Business As\&quot; or DBA).  This field is required for KYC verification (US-based accounts only). If your business does not use a fictitious business name, enter your legal business name again in this field. */
    public var businessNameDba: String?
    /** Legal name of business.  This field is required for KYC verification (US-based accounts only). */
    public var businessNameLegal: String?
    /** Indicates the type of business, for example business-to-business (B2B) or business-to-consumer (B2C). */
    public var businessType: String?
    /** Date the business was established.  This field is required for KYC verification (US-based accounts only). */
    public var dateEstablished: Date?
    /** Data Universal Numbering System (DUNS) number of the business. */
    public var dunsNumber: String?
    /** General description of the business. */
    public var generalBusinessDescription: String?
    /** History of the business. */
    public var history: String?
    /** One or more objects containing identifications associated with the business. */
    public var identifications: [IdentificationRequestModel]?
    /** Date on which the business office opened in its current location. */
    public var inCurrentLocationSince: Date?
    public var incorporation: BusinessIncorporation?
    /** Locations of the business&#x27; offices outside the United States. */
    public var internationalOfficeLocations: String?
    /** IP address of the business. */
    public var ipAddress: String?
    /** Associates any additional metadata you provide with the business. */
    public var metadata: [String:String]?
    /** Any additional information pertaining to the business. */
    public var notes: String?
    public var officeLocation: AddressRequestModel?
    /** Password for the business account on the Marqeta platform. */
    public var password: String?
    /** 10-digit telephone number of business. */
    public var phone: String?
    public var primaryContact: PrimaryContactInfoModel?
    /** Indicates that the proprietor or officer of the business is also a beneficial owner.  This field is required for KYC verification in the United States if the business proprietor or officer is also a beneficial owner. If the proprietor or business officer is a beneficial owner, use this field to indicate their beneficial ownership. Do not include information about the proprietor or business officer in a &#x60;beneficial_owner&#x60; object. */
    public var proprietorIsBeneficialOwner: Bool?
    public var proprietorOrOfficer: BusinessProprietor?
    /** Taxpayer identifier of the business. */
    public var taxpayerId: String?
    /** Unique identifier of the business.  Send a &#x60;GET&#x60; request to &#x60;/businesses&#x60; to retrieve business tokens. */
    public var token: String?
    /** URL of the business&#x27; website. */
    public var website: String?

    public init(accountHolderGroupToken: String? = nil, active: Bool? = nil, attestationConsent: Bool? = nil, attestationDate: Date? = nil, attesterName: String? = nil, attesterTitle: String? = nil, beneficialOwner1: BeneficialOwnerRequest? = nil, beneficialOwner2: BeneficialOwnerRequest? = nil, beneficialOwner3: BeneficialOwnerRequest? = nil, beneficialOwner4: BeneficialOwnerRequest? = nil, businessNameDba: String? = nil, businessNameLegal: String? = nil, businessType: String? = nil, dateEstablished: Date? = nil, dunsNumber: String? = nil, generalBusinessDescription: String? = nil, history: String? = nil, identifications: [IdentificationRequestModel]? = nil, inCurrentLocationSince: Date? = nil, incorporation: BusinessIncorporation? = nil, internationalOfficeLocations: String? = nil, ipAddress: String? = nil, metadata: [String:String]? = nil, notes: String? = nil, officeLocation: AddressRequestModel? = nil, password: String? = nil, phone: String? = nil, primaryContact: PrimaryContactInfoModel? = nil, proprietorIsBeneficialOwner: Bool? = nil, proprietorOrOfficer: BusinessProprietor? = nil, taxpayerId: String? = nil, token: String? = nil, website: String? = nil) {
        self.accountHolderGroupToken = accountHolderGroupToken
        self.active = active
        self.attestationConsent = attestationConsent
        self.attestationDate = attestationDate
        self.attesterName = attesterName
        self.attesterTitle = attesterTitle
        self.beneficialOwner1 = beneficialOwner1
        self.beneficialOwner2 = beneficialOwner2
        self.beneficialOwner3 = beneficialOwner3
        self.beneficialOwner4 = beneficialOwner4
        self.businessNameDba = businessNameDba
        self.businessNameLegal = businessNameLegal
        self.businessType = businessType
        self.dateEstablished = dateEstablished
        self.dunsNumber = dunsNumber
        self.generalBusinessDescription = generalBusinessDescription
        self.history = history
        self.identifications = identifications
        self.inCurrentLocationSince = inCurrentLocationSince
        self.incorporation = incorporation
        self.internationalOfficeLocations = internationalOfficeLocations
        self.ipAddress = ipAddress
        self.metadata = metadata
        self.notes = notes
        self.officeLocation = officeLocation
        self.password = password
        self.phone = phone
        self.primaryContact = primaryContact
        self.proprietorIsBeneficialOwner = proprietorIsBeneficialOwner
        self.proprietorOrOfficer = proprietorOrOfficer
        self.taxpayerId = taxpayerId
        self.token = token
        self.website = website
    }

    public enum CodingKeys: String, CodingKey { 
        case accountHolderGroupToken = "account_holder_group_token"
        case active
        case attestationConsent = "attestation_consent"
        case attestationDate = "attestation_date"
        case attesterName = "attester_name"
        case attesterTitle = "attester_title"
        case beneficialOwner1 = "beneficial_owner1"
        case beneficialOwner2 = "beneficial_owner2"
        case beneficialOwner3 = "beneficial_owner3"
        case beneficialOwner4 = "beneficial_owner4"
        case businessNameDba = "business_name_dba"
        case businessNameLegal = "business_name_legal"
        case businessType = "business_type"
        case dateEstablished = "date_established"
        case dunsNumber = "duns_number"
        case generalBusinessDescription = "general_business_description"
        case history
        case identifications
        case inCurrentLocationSince = "in_current_location_since"
        case incorporation
        case internationalOfficeLocations = "international_office_locations"
        case ipAddress = "ip_address"
        case metadata
        case notes
        case officeLocation = "office_location"
        case password
        case phone
        case primaryContact = "primary_contact"
        case proprietorIsBeneficialOwner = "proprietor_is_beneficial_owner"
        case proprietorOrOfficer = "proprietor_or_officer"
        case taxpayerId = "taxpayer_id"
        case token
        case website
    }

}
