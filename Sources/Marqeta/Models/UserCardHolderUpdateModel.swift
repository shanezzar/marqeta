//
// UserCardHolderUpdateModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct UserCardHolderUpdateModel: Codable {

    public enum Gender: String, Codable { 
        case f = "F"
        case m = "M"
    }
    /** Associates the specified account holder group with the cardholder. Send a &#x60;GET&#x60; request to &#x60;/accountholdergroups&#x60; to retrieve account holder group tokens. */
    public var accountHolderGroupToken: String?
    /** Cardholder address.  *NOTE:* Required for KYC verification (US-based cardholders only). Cannot perform KYC if set to a PO Box. */
    public var address1: String?
    /** Additional address information for the cardholder.  *NOTE:* Cannot perform KYC if set to a PO Box. */
    public var address2: String?
    /** Cardholder date of birth.  *NOTE:* Required for KYC verification (US-based cardholders only). */
    public var birthDate: String?
    /** The city that corresponds to the address.  *NOTE:* Required for KYC verification (US-based cardholders only). */
    public var city: String?
    /** Company name. */
    public var company: String?
    /** Specifies if the cardholder holds a corporate card. */
    public var corporateCardHolder: Bool?
    /** Country in which the cardholder resides.  *NOTE:* Required for KYC verification (US-based cardholders only). */
    public var country: String?
    /** Valid email address for the cardholder.  This value must be unique among cardholders. */
    public var email: String?
    /** Cardholder first name.  *NOTE:* Required for KYC verification (US-based cardholders only). */
    public var firstName: String?
    /** Gender of the cardholder. */
    public var gender: Gender?
    /** Cardholder title or prefix: Ms., Mr., Miss, Mrs. */
    public var honorific: String?
    /** Expiration date of the cardholder&#x27;s identification card. */
    public var idCardExpirationDate: String?
    /** Cardholder&#x27;s identification card number. */
    public var idCardNumber: String?
    /** One or more objects containing identifications associated with the cardholder. */
    public var identifications: [IdentificationRequestModel]?
    /** Cardholder IP address. */
    public var ipAddress: String?
    /** Cardholder last name.  *NOTE:* Required for KYC verification (US-based cardholders only). */
    public var lastName: String?
    /** Associates any additional metadata you provide with the cardholder. */
    public var metadata: [String:String]?
    /** Cardholder middle name. */
    public var middleName: String?
    /** Cardholder nationality. */
    public var nationality: String?
    /** Any additional information pertaining to the cardholder. */
    public var notes: String?
    /** Unique identifier of an existing user or business resource.  Required if &#x60;uses_parent_account &#x3D; true&#x60;. This account holder is configured as the parent of the current cardholder.  To unlink a child account from a parent account, update this field to a null value. */
    public var parentToken: String?
    /** Expiration date of the cardholder&#x27;s passport. */
    public var passportExpirationDate: String?
    /** Cardholder passport number. */
    public var passportNumber: String?
    /** Cardholder&#x27;s user account password on the Marqeta platform. */
    public var password: String?
    /** Cardholder telephone number (including area code), prepended by the &#x60;+&#x60; symbol and the 1- to 3-digit country calling code. Do not include hyphens, spaces, or parentheses. */
    public var phone: String?
    /** Postal code of the cardholder&#x27;s address.  *NOTE:* Required for KYC verification (US-based cardholders only). */
    public var postalCode: String?
    /** Cardholder&#x27;s Social Security Number (SSN). */
    public var ssn: String?
    /** State where the cardholder resides.  *NOTE:* &lt;&lt;/core-api/kyc-verification#_valid_state_provincial_and_territorial_abbreviations, Valid two-character abbreviation&gt;&gt; required for KYC verification (US-based cardholders only). */
    public var state: String?
    /** Unique identifier of the cardholder. */
    public var token: String?
    /** Indicates whether the child shares balances with the parent (&#x60;true&#x60;), or the child&#x27;s balances are independent of the parent (&#x60;false&#x60;).  If set to &#x60;true&#x60;, you must also include a &#x60;parent_token&#x60; in the request. This value cannot be updated. */
    public var usesParentAccount: Bool?

    public init(accountHolderGroupToken: String? = nil, address1: String? = nil, address2: String? = nil, birthDate: String? = nil, city: String? = nil, company: String? = nil, corporateCardHolder: Bool? = nil, country: String? = nil, email: String? = nil, firstName: String? = nil, gender: Gender? = nil, honorific: String? = nil, idCardExpirationDate: String? = nil, idCardNumber: String? = nil, identifications: [IdentificationRequestModel]? = nil, ipAddress: String? = nil, lastName: String? = nil, metadata: [String:String]? = nil, middleName: String? = nil, nationality: String? = nil, notes: String? = nil, parentToken: String? = nil, passportExpirationDate: String? = nil, passportNumber: String? = nil, password: String? = nil, phone: String? = nil, postalCode: String? = nil, ssn: String? = nil, state: String? = nil, token: String? = nil, usesParentAccount: Bool? = nil) {
        self.accountHolderGroupToken = accountHolderGroupToken
        self.address1 = address1
        self.address2 = address2
        self.birthDate = birthDate
        self.city = city
        self.company = company
        self.corporateCardHolder = corporateCardHolder
        self.country = country
        self.email = email
        self.firstName = firstName
        self.gender = gender
        self.honorific = honorific
        self.idCardExpirationDate = idCardExpirationDate
        self.idCardNumber = idCardNumber
        self.identifications = identifications
        self.ipAddress = ipAddress
        self.lastName = lastName
        self.metadata = metadata
        self.middleName = middleName
        self.nationality = nationality
        self.notes = notes
        self.parentToken = parentToken
        self.passportExpirationDate = passportExpirationDate
        self.passportNumber = passportNumber
        self.password = password
        self.phone = phone
        self.postalCode = postalCode
        self.ssn = ssn
        self.state = state
        self.token = token
        self.usesParentAccount = usesParentAccount
    }

    public enum CodingKeys: String, CodingKey { 
        case accountHolderGroupToken = "account_holder_group_token"
        case address1
        case address2
        case birthDate = "birth_date"
        case city
        case company
        case corporateCardHolder = "corporate_card_holder"
        case country
        case email
        case firstName = "first_name"
        case gender
        case honorific
        case idCardExpirationDate = "id_card_expiration_date"
        case idCardNumber = "id_card_number"
        case identifications
        case ipAddress = "ip_address"
        case lastName = "last_name"
        case metadata
        case middleName = "middle_name"
        case nationality
        case notes
        case parentToken = "parent_token"
        case passportExpirationDate = "passport_expiration_date"
        case passportNumber = "passport_number"
        case password
        case phone
        case postalCode = "postal_code"
        case ssn
        case state
        case token
        case usesParentAccount = "uses_parent_account"
    }

}
