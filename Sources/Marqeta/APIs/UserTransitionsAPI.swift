//
// UserTransitionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UserTransitionsAPI {
    /**
     Retrieve user transition

     - parameter token: (path) Unique identifier of the user transition you want to retrieve. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsertransitionsToken(token: String, fields: String? = nil, completion: @escaping ((_ data: UserTransitionResponse?,_ error: Error?) -> Void)) {
        getUsertransitionsTokenWithRequestBuilder(token: token, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve user transition
     - GET /usertransitions/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "reason_code" : "00",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "reason" : "reason",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "channel" : "API",
  "user_token" : "user_token",
  "status" : "UNVERIFIED",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the user transition you want to retrieve. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<UserTransitionResponse> 
     */
    open class func getUsertransitionsTokenWithRequestBuilder(token: String, fields: String? = nil) -> RequestBuilder<UserTransitionResponse> {
        var path = "/usertransitions/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<UserTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List transitions for user

     - parameter userToken: (path) Unique identifier of the user resource. 
     - parameter count: (query) Number of user transitions to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -id)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsertransitionsUserUsertoken(userToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: UserTransitionListResponse?,_ error: Error?) -> Void)) {
        getUsertransitionsUserUsertokenWithRequestBuilder(userToken: userToken, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List transitions for user
     - GET /usertransitions/user/{user_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "reason_code" : "00",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "channel" : "API",
    "user_token" : "user_token",
    "status" : "UNVERIFIED",
    "token" : "token"
  }, {
    "reason_code" : "00",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "channel" : "API",
    "user_token" : "user_token",
    "status" : "UNVERIFIED",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter userToken: (path) Unique identifier of the user resource. 
     - parameter count: (query) Number of user transitions to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -id)

     - returns: RequestBuilder<UserTransitionListResponse> 
     */
    open class func getUsertransitionsUserUsertokenWithRequestBuilder(userToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<UserTransitionListResponse> {
        var path = "/usertransitions/user/{user_token}"
        let userTokenPreEscape = "\(userToken)"
        let userTokenPostEscape = userTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_token}", with: userTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<UserTransitionListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create user transition

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsertransitions(body: UserTransitionRequest? = nil, completion: @escaping ((_ data: UserTransitionResponse?,_ error: Error?) -> Void)) {
        postUsertransitionsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create user transition
     - POST /usertransitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "reason_code" : "00",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "reason" : "reason",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "channel" : "API",
  "user_token" : "user_token",
  "status" : "UNVERIFIED",
  "token" : "token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<UserTransitionResponse> 
     */
    open class func postUsertransitionsWithRequestBuilder(body: UserTransitionRequest? = nil) -> RequestBuilder<UserTransitionResponse> {
        let path = "/usertransitions"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
