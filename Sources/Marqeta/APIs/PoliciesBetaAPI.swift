//
// PoliciesBetaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PoliciesBetaAPI {
    /**
     Clone APR policy

     - parameter token: (path) The unique identifier of the APR policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/aprs&#x60; to retrieve existing APR policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cloneAprPolicy(token: String, completion: @escaping ((_ data: PolicyAprResponse?,_ error: Error?) -> Void)) {
        cloneAprPolicyWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clone APR policy
     - POST /credit/policies/aprs/{token}/clone

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "purchases" : {
    "external_token" : "external_token",
    "tiers" : [ {
      "apr" : 6.027456183070403,
      "margin_rate" : 1.4658129805029452
    }, {
      "apr" : 6.027456183070403,
      "margin_rate" : 1.4658129805029452
    } ],
    "name" : "name"
  },
  "effective_date" : "2000-01-23",
  "name" : "name",
  "description" : "description",
  "token" : "token"
}}]
     - parameter token: (path) The unique identifier of the APR policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/aprs&#x60; to retrieve existing APR policy tokens. 

     - returns: RequestBuilder<PolicyAprResponse> 
     */
    open class func cloneAprPolicyWithRequestBuilder(token: String) -> RequestBuilder<PolicyAprResponse> {
        var path = "/credit/policies/aprs/{token}/clone"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyAprResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Clone document policy

     - parameter token: (path) The unique identifier of the document policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/documents&#x60; to retrieve existing document policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cloneDocumentPolicy(token: String, completion: @escaping ((_ data: PolicyDocumentResponse?,_ error: Error?) -> Void)) {
        cloneDocumentPolicyWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clone document policy
     - POST /credit/policies/documents/{token}/clone

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "account_statement" : {
    "template_token" : "template_token",
    "template_urls" : {
      "html" : "html"
    },
    "template_created_time" : "2000-01-23T04:56:07.000+00:00"
  },
  "benefits_disclosure_premium" : {
    "asset_urls" : {
      "pdf" : "pdf",
      "png" : "png",
      "html" : "html"
    },
    "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
    "asset_token" : "asset_token"
  },
  "token" : "token",
  "rewards_disclosure" : {
    "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
    "template_token" : "template_token",
    "asset_token" : "asset_token",
    "template_created_time" : "2000-01-23T04:56:07.000+00:00"
  },
  "name" : "name"
}}]
     - parameter token: (path) The unique identifier of the document policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/documents&#x60; to retrieve existing document policy tokens. 

     - returns: RequestBuilder<PolicyDocumentResponse> 
     */
    open class func cloneDocumentPolicyWithRequestBuilder(token: String) -> RequestBuilder<PolicyDocumentResponse> {
        var path = "/credit/policies/documents/{token}/clone"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyDocumentResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Clone fee policy

     - parameter token: (path) The unique identifier of the fee policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/fee&#x60; to retrieve existing fee policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cloneFeePolicy(token: String, completion: @escaping ((_ data: PolicyFeeResponse?,_ error: Error?) -> Void)) {
        cloneFeePolicyWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clone fee policy
     - POST /credit/policies/fees/{token}/clone

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "account" : {
    "late_payment" : {
      "default_value" : 7.386281948385884,
      "default_method" : "FLAT"
    }
  },
  "token" : "token"
}}]
     - parameter token: (path) The unique identifier of the fee policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/fee&#x60; to retrieve existing fee policy tokens. 

     - returns: RequestBuilder<PolicyFeeResponse> 
     */
    open class func cloneFeePolicyWithRequestBuilder(token: String) -> RequestBuilder<PolicyFeeResponse> {
        var path = "/credit/policies/fees/{token}/clone"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyFeeResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Clone credit product policy

     - parameter token: (path) The unique identifier of the credit product policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/products&#x60; to retrieve existing credit product policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cloneProductPolicy(token: String, completion: @escaping ((_ data: PolicyProductResponse?,_ error: Error?) -> Void)) {
        cloneProductPolicyWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clone credit product policy
     - POST /credit/policies/products/{token}/clone

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "card_products" : [ {
    "level" : "PREMIUM",
    "network" : "VISA",
    "token" : "token"
  }, {
    "level" : "PREMIUM",
    "network" : "VISA",
    "token" : "token"
  } ],
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "interest_calculation" : {
    "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
    "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
    "application_of_credits" : {
      "cycle_type" : "BEGINNING_REVOLVING",
      "day" : 7
    },
    "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
    "grace_days_application" : "NEXT_CYCLE_DATE",
    "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
    "minimum_interest" : 7.061401241503038E11,
    "day_count" : "ACTUAL"
  },
  "payments" : {
    "due_day" : 31,
    "billing_cycle_day" : 1,
    "allocation_order" : [ "INTEREST", "INTEREST" ],
    "min_payment_calculation" : {
      "min_payment_flat_amount" : 2.027123023002322,
      "include_overlimit_amount" : true,
      "min_payment_percentage" : {
        "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
        "include_interest_charged" : true,
        "percentage_of_balance" : 41.45613884275906
      },
      "include_past_due_amount" : true
    }
  },
  "usage" : [ "PURCHASE", "PURCHASE" ],
  "description" : "description",
  "classification" : "CONSUMER",
  "currency_code" : "USD",
  "token" : "token",
  "product_sub_type" : "CREDIT_CARD",
  "credit_line" : {
    "min" : 5.637376656633271E11,
    "max" : 5.962133916683123E11
  },
  "product_type" : "REVOLVING",
  "name" : "name"
}}]
     - parameter token: (path) The unique identifier of the credit product policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/products&#x60; to retrieve existing credit product policy tokens. 

     - returns: RequestBuilder<PolicyProductResponse> 
     */
    open class func cloneProductPolicyWithRequestBuilder(token: String) -> RequestBuilder<PolicyProductResponse> {
        var path = "/credit/policies/products/{token}/clone"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyProductResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Clone reward policy

     - parameter token: (path) The unique identifier of the reward policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/rewards&#x60; to retrieve existing reward policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cloneRewardPolicy(token: String, completion: @escaping ((_ data: PolicyRewardResponse?,_ error: Error?) -> Void)) {
        cloneRewardPolicyWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clone reward policy
     - POST /credit/policies/rewards/{token}/clone

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "rules" : [ {
    "filters" : {
      "amount" : {
        "greater_than" : 0.12315135367772556,
        "less_than" : 0.10246457001441578
      },
      "mcc_dynamic" : {
        "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
      }
    },
    "type" : "CASHBACK",
    "outcome" : {
      "percentage" : 0.684685269835264,
      "max_amount" : 0.14894159098541704
    }
  }, {
    "filters" : {
      "amount" : {
        "greater_than" : 0.12315135367772556,
        "less_than" : 0.10246457001441578
      },
      "mcc_dynamic" : {
        "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
      }
    },
    "type" : "CASHBACK",
    "outcome" : {
      "percentage" : 0.684685269835264,
      "max_amount" : 0.14894159098541704
    }
  } ],
  "token" : "token"
}}]
     - parameter token: (path) The unique identifier of the reward policy to clone.  Send a &#x60;GET&#x60; request to &#x60;/policies/rewards&#x60; to retrieve existing reward policy tokens. 

     - returns: RequestBuilder<PolicyRewardResponse> 
     */
    open class func cloneRewardPolicyWithRequestBuilder(token: String) -> RequestBuilder<PolicyRewardResponse> {
        var path = "/credit/policies/rewards/{token}/clone"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyRewardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create APR policy

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAprPolicy(body: PolicyAprCreateReq, completion: @escaping ((_ data: PolicyAprResponse?,_ error: Error?) -> Void)) {
        createAprPolicyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create APR policy
     - POST /credit/policies/aprs

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "purchases" : {
    "external_token" : "external_token",
    "tiers" : [ {
      "apr" : 6.027456183070403,
      "margin_rate" : 1.4658129805029452
    }, {
      "apr" : 6.027456183070403,
      "margin_rate" : 1.4658129805029452
    } ],
    "name" : "name"
  },
  "effective_date" : "2000-01-23",
  "name" : "name",
  "description" : "description",
  "token" : "token"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PolicyAprResponse> 
     */
    open class func createAprPolicyWithRequestBuilder(body: PolicyAprCreateReq) -> RequestBuilder<PolicyAprResponse> {
        let path = "/credit/policies/aprs"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyAprResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create document policy

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDocumentPolicy(body: PolicyDocumentCreateReq, completion: @escaping ((_ data: PolicyDocumentResponse?,_ error: Error?) -> Void)) {
        createDocumentPolicyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create document policy
     - POST /credit/policies/documents

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "account_statement" : {
    "template_token" : "template_token",
    "template_urls" : {
      "html" : "html"
    },
    "template_created_time" : "2000-01-23T04:56:07.000+00:00"
  },
  "benefits_disclosure_premium" : {
    "asset_urls" : {
      "pdf" : "pdf",
      "png" : "png",
      "html" : "html"
    },
    "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
    "asset_token" : "asset_token"
  },
  "token" : "token",
  "rewards_disclosure" : {
    "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
    "template_token" : "template_token",
    "asset_token" : "asset_token",
    "template_created_time" : "2000-01-23T04:56:07.000+00:00"
  },
  "name" : "name"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PolicyDocumentResponse> 
     */
    open class func createDocumentPolicyWithRequestBuilder(body: PolicyDocumentCreateReq) -> RequestBuilder<PolicyDocumentResponse> {
        let path = "/credit/policies/documents"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyDocumentResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create fee policy

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFeePolicy(body: PolicyFeeCreateReq, completion: @escaping ((_ data: PolicyFeeResponse?,_ error: Error?) -> Void)) {
        createFeePolicyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create fee policy
     - POST /credit/policies/fees

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "account" : {
    "late_payment" : {
      "default_value" : 7.386281948385884,
      "default_method" : "FLAT"
    }
  },
  "token" : "token"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PolicyFeeResponse> 
     */
    open class func createFeePolicyWithRequestBuilder(body: PolicyFeeCreateReq) -> RequestBuilder<PolicyFeeResponse> {
        let path = "/credit/policies/fees"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyFeeResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create credit product policy

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProductPolicy(body: PolicyProductCreateReq, completion: @escaping ((_ data: PolicyProductResponse?,_ error: Error?) -> Void)) {
        createProductPolicyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create credit product policy
     - POST /credit/policies/products

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "card_products" : [ {
    "level" : "PREMIUM",
    "network" : "VISA",
    "token" : "token"
  }, {
    "level" : "PREMIUM",
    "network" : "VISA",
    "token" : "token"
  } ],
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "interest_calculation" : {
    "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
    "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
    "application_of_credits" : {
      "cycle_type" : "BEGINNING_REVOLVING",
      "day" : 7
    },
    "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
    "grace_days_application" : "NEXT_CYCLE_DATE",
    "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
    "minimum_interest" : 7.061401241503038E11,
    "day_count" : "ACTUAL"
  },
  "payments" : {
    "due_day" : 31,
    "billing_cycle_day" : 1,
    "allocation_order" : [ "INTEREST", "INTEREST" ],
    "min_payment_calculation" : {
      "min_payment_flat_amount" : 2.027123023002322,
      "include_overlimit_amount" : true,
      "min_payment_percentage" : {
        "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
        "include_interest_charged" : true,
        "percentage_of_balance" : 41.45613884275906
      },
      "include_past_due_amount" : true
    }
  },
  "usage" : [ "PURCHASE", "PURCHASE" ],
  "description" : "description",
  "classification" : "CONSUMER",
  "currency_code" : "USD",
  "token" : "token",
  "product_sub_type" : "CREDIT_CARD",
  "credit_line" : {
    "min" : 5.637376656633271E11,
    "max" : 5.962133916683123E11
  },
  "product_type" : "REVOLVING",
  "name" : "name"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PolicyProductResponse> 
     */
    open class func createProductPolicyWithRequestBuilder(body: PolicyProductCreateReq) -> RequestBuilder<PolicyProductResponse> {
        let path = "/credit/policies/products"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyProductResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create reward policy

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRewardPolicy(body: PolicyRewardReq, completion: @escaping ((_ data: PolicyRewardResponse?,_ error: Error?) -> Void)) {
        createRewardPolicyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create reward policy
     - POST /credit/policies/rewards

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "rules" : [ {
    "filters" : {
      "amount" : {
        "greater_than" : 0.12315135367772556,
        "less_than" : 0.10246457001441578
      },
      "mcc_dynamic" : {
        "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
      }
    },
    "type" : "CASHBACK",
    "outcome" : {
      "percentage" : 0.684685269835264,
      "max_amount" : 0.14894159098541704
    }
  }, {
    "filters" : {
      "amount" : {
        "greater_than" : 0.12315135367772556,
        "less_than" : 0.10246457001441578
      },
      "mcc_dynamic" : {
        "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
      }
    },
    "type" : "CASHBACK",
    "outcome" : {
      "percentage" : 0.684685269835264,
      "max_amount" : 0.14894159098541704
    }
  } ],
  "token" : "token"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PolicyRewardResponse> 
     */
    open class func createRewardPolicyWithRequestBuilder(body: PolicyRewardReq) -> RequestBuilder<PolicyRewardResponse> {
        let path = "/credit/policies/rewards"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyRewardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_getAprPolicies: String { 
        case effectivedate = "effectiveDate"
        case effectivedate_1 = "-effectiveDate"
    }

    /**
     List APR policies

     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;effectiveDate&#x60;, and not by the field names appearing in response bodies such as &#x60;effective_date&#x60;. (optional, default to -effectiveDate)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAprPolicies(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getAprPolicies? = nil, completion: @escaping ((_ data: PolicyAprsPage?,_ error: Error?) -> Void)) {
        getAprPoliciesWithRequestBuilder(count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List APR policies
     - GET /credit/policies/aprs

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "purchases" : {
      "external_token" : "external_token",
      "tiers" : [ {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      }, {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      } ],
      "name" : "name"
    },
    "effective_date" : "2000-01-23",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "purchases" : {
      "external_token" : "external_token",
      "tiers" : [ {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      }, {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      } ],
      "name" : "name"
    },
    "effective_date" : "2000-01-23",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;effectiveDate&#x60;, and not by the field names appearing in response bodies such as &#x60;effective_date&#x60;. (optional, default to -effectiveDate)

     - returns: RequestBuilder<PolicyAprsPage> 
     */
    open class func getAprPoliciesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getAprPolicies? = nil) -> RequestBuilder<PolicyAprsPage> {
        let path = "/credit/policies/aprs"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<PolicyAprsPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve APR policy

     - parameter token: (path) The unique identifier of the APR policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/aprs&#x60; to retrieve existing APR policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAprPolicyByToken(token: String, completion: @escaping ((_ data: PolicyAprResponse?,_ error: Error?) -> Void)) {
        getAprPolicyByTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve APR policy
     - GET /credit/policies/aprs/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "purchases" : {
    "external_token" : "external_token",
    "tiers" : [ {
      "apr" : 6.027456183070403,
      "margin_rate" : 1.4658129805029452
    }, {
      "apr" : 6.027456183070403,
      "margin_rate" : 1.4658129805029452
    } ],
    "name" : "name"
  },
  "effective_date" : "2000-01-23",
  "name" : "name",
  "description" : "description",
  "token" : "token"
}}]
     - parameter token: (path) The unique identifier of the APR policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/aprs&#x60; to retrieve existing APR policy tokens. 

     - returns: RequestBuilder<PolicyAprResponse> 
     */
    open class func getAprPolicyByTokenWithRequestBuilder(token: String) -> RequestBuilder<PolicyAprResponse> {
        var path = "/credit/policies/aprs/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyAprResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_getAprPolicySchedulesWithToken: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List APR schedules

     - parameter token: (path) The unique identifier of the APR policy on which to retrieve APR schedules.  Send a &#x60;GET&#x60; request to &#x60;/policies/aprs&#x60; to retrieve existing product policy tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAprPolicySchedulesWithToken(token: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getAprPolicySchedulesWithToken? = nil, completion: @escaping ((_ data: PolicyAprsPage?,_ error: Error?) -> Void)) {
        getAprPolicySchedulesWithTokenWithRequestBuilder(token: token, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List APR schedules
     - GET /credit/policies/aprs/{token}/schedule

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "purchases" : {
      "external_token" : "external_token",
      "tiers" : [ {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      }, {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      } ],
      "name" : "name"
    },
    "effective_date" : "2000-01-23",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "purchases" : {
      "external_token" : "external_token",
      "tiers" : [ {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      }, {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      } ],
      "name" : "name"
    },
    "effective_date" : "2000-01-23",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter token: (path) The unique identifier of the APR policy on which to retrieve APR schedules.  Send a &#x60;GET&#x60; request to &#x60;/policies/aprs&#x60; to retrieve existing product policy tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<PolicyAprsPage> 
     */
    open class func getAprPolicySchedulesWithTokenWithRequestBuilder(token: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getAprPolicySchedulesWithToken? = nil) -> RequestBuilder<PolicyAprsPage> {
        var path = "/credit/policies/aprs/{token}/schedule"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<PolicyAprsPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_getFeePolicies: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List fee policies

     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFeePolicies(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getFeePolicies? = nil, completion: @escaping ((_ data: PolicyFeesPage?,_ error: Error?) -> Void)) {
        getFeePoliciesWithRequestBuilder(count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List fee policies
     - GET /credit/policies/fees

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "account" : {
      "late_payment" : {
        "default_value" : 7.386281948385884,
        "default_method" : "FLAT"
      }
    },
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "account" : {
      "late_payment" : {
        "default_value" : 7.386281948385884,
        "default_method" : "FLAT"
      }
    },
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<PolicyFeesPage> 
     */
    open class func getFeePoliciesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getFeePolicies? = nil) -> RequestBuilder<PolicyFeesPage> {
        let path = "/credit/policies/fees"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<PolicyFeesPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve fee policy

     - parameter token: (path) The unique identifier of the fee policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/fee&#x60; to retrieve existing fee policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFeePolicyByToken(token: String, completion: @escaping ((_ data: PolicyFeeResponse?,_ error: Error?) -> Void)) {
        getFeePolicyByTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve fee policy
     - GET /credit/policies/fees/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "account" : {
    "late_payment" : {
      "default_value" : 7.386281948385884,
      "default_method" : "FLAT"
    }
  },
  "token" : "token"
}}]
     - parameter token: (path) The unique identifier of the fee policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/fee&#x60; to retrieve existing fee policy tokens. 

     - returns: RequestBuilder<PolicyFeeResponse> 
     */
    open class func getFeePolicyByTokenWithRequestBuilder(token: String) -> RequestBuilder<PolicyFeeResponse> {
        var path = "/credit/policies/fees/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyFeeResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listDocumentPolicies: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List document policies

     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDocumentPolicies(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listDocumentPolicies? = nil, completion: @escaping ((_ data: PoliciesDocumentPage?,_ error: Error?) -> Void)) {
        listDocumentPoliciesWithRequestBuilder(count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List document policies
     - GET /credit/policies/documents

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "account_statement" : {
      "template_token" : "template_token",
      "template_urls" : {
        "html" : "html"
      },
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "benefits_disclosure_premium" : {
      "asset_urls" : {
        "pdf" : "pdf",
        "png" : "png",
        "html" : "html"
      },
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "asset_token" : "asset_token"
    },
    "token" : "token",
    "rewards_disclosure" : {
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "template_token" : "template_token",
      "asset_token" : "asset_token",
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "name" : "name"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "account_statement" : {
      "template_token" : "template_token",
      "template_urls" : {
        "html" : "html"
      },
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "benefits_disclosure_premium" : {
      "asset_urls" : {
        "pdf" : "pdf",
        "png" : "png",
        "html" : "html"
      },
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "asset_token" : "asset_token"
    },
    "token" : "token",
    "rewards_disclosure" : {
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "template_token" : "template_token",
      "asset_token" : "asset_token",
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "name" : "name"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<PoliciesDocumentPage> 
     */
    open class func listDocumentPoliciesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listDocumentPolicies? = nil) -> RequestBuilder<PoliciesDocumentPage> {
        let path = "/credit/policies/documents"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<PoliciesDocumentPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listProductPolicies: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List credit product policies

     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProductPolicies(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listProductPolicies? = nil, completion: @escaping ((_ data: PoliciesProductPage?,_ error: Error?) -> Void)) {
        listProductPoliciesWithRequestBuilder(count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List credit product policies
     - GET /credit/policies/products

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "card_products" : [ {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    }, {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    } ],
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "interest_calculation" : {
      "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
      "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
      "application_of_credits" : {
        "cycle_type" : "BEGINNING_REVOLVING",
        "day" : 7
      },
      "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
      "grace_days_application" : "NEXT_CYCLE_DATE",
      "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
      "minimum_interest" : 7.061401241503038E11,
      "day_count" : "ACTUAL"
    },
    "payments" : {
      "due_day" : 31,
      "billing_cycle_day" : 1,
      "allocation_order" : [ "INTEREST", "INTEREST" ],
      "min_payment_calculation" : {
        "min_payment_flat_amount" : 2.027123023002322,
        "include_overlimit_amount" : true,
        "min_payment_percentage" : {
          "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
          "include_interest_charged" : true,
          "percentage_of_balance" : 41.45613884275906
        },
        "include_past_due_amount" : true
      }
    },
    "usage" : [ "PURCHASE", "PURCHASE" ],
    "description" : "description",
    "classification" : "CONSUMER",
    "currency_code" : "USD",
    "token" : "token",
    "product_sub_type" : "CREDIT_CARD",
    "credit_line" : {
      "min" : 5.637376656633271E11,
      "max" : 5.962133916683123E11
    },
    "product_type" : "REVOLVING",
    "name" : "name"
  }, {
    "card_products" : [ {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    }, {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    } ],
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "interest_calculation" : {
      "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
      "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
      "application_of_credits" : {
        "cycle_type" : "BEGINNING_REVOLVING",
        "day" : 7
      },
      "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
      "grace_days_application" : "NEXT_CYCLE_DATE",
      "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
      "minimum_interest" : 7.061401241503038E11,
      "day_count" : "ACTUAL"
    },
    "payments" : {
      "due_day" : 31,
      "billing_cycle_day" : 1,
      "allocation_order" : [ "INTEREST", "INTEREST" ],
      "min_payment_calculation" : {
        "min_payment_flat_amount" : 2.027123023002322,
        "include_overlimit_amount" : true,
        "min_payment_percentage" : {
          "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
          "include_interest_charged" : true,
          "percentage_of_balance" : 41.45613884275906
        },
        "include_past_due_amount" : true
      }
    },
    "usage" : [ "PURCHASE", "PURCHASE" ],
    "description" : "description",
    "classification" : "CONSUMER",
    "currency_code" : "USD",
    "token" : "token",
    "product_sub_type" : "CREDIT_CARD",
    "credit_line" : {
      "min" : 5.637376656633271E11,
      "max" : 5.962133916683123E11
    },
    "product_type" : "REVOLVING",
    "name" : "name"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<PoliciesProductPage> 
     */
    open class func listProductPoliciesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listProductPolicies? = nil) -> RequestBuilder<PoliciesProductPage> {
        let path = "/credit/policies/products"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<PoliciesProductPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listRewardPolicies: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List reward policies

     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listRewardPolicies(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listRewardPolicies? = nil, completion: @escaping ((_ data: PolicyRewardPage?,_ error: Error?) -> Void)) {
        listRewardPoliciesWithRequestBuilder(count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List reward policies
     - GET /credit/policies/rewards

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "rules" : [ {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    }, {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    } ],
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "rules" : [ {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    }, {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    } ],
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<PolicyRewardPage> 
     */
    open class func listRewardPoliciesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listRewardPolicies? = nil) -> RequestBuilder<PolicyRewardPage> {
        let path = "/credit/policies/rewards"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<PolicyRewardPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve document policy

     - parameter token: (path) The unique identifier of the document policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/documents&#x60; to retrieve existing document policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveDocumentPolicy(token: String, completion: @escaping ((_ data: PolicyDocumentResponse?,_ error: Error?) -> Void)) {
        retrieveDocumentPolicyWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve document policy
     - GET /credit/policies/documents/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "account_statement" : {
    "template_token" : "template_token",
    "template_urls" : {
      "html" : "html"
    },
    "template_created_time" : "2000-01-23T04:56:07.000+00:00"
  },
  "benefits_disclosure_premium" : {
    "asset_urls" : {
      "pdf" : "pdf",
      "png" : "png",
      "html" : "html"
    },
    "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
    "asset_token" : "asset_token"
  },
  "token" : "token",
  "rewards_disclosure" : {
    "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
    "template_token" : "template_token",
    "asset_token" : "asset_token",
    "template_created_time" : "2000-01-23T04:56:07.000+00:00"
  },
  "name" : "name"
}}]
     - parameter token: (path) The unique identifier of the document policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/documents&#x60; to retrieve existing document policy tokens. 

     - returns: RequestBuilder<PolicyDocumentResponse> 
     */
    open class func retrieveDocumentPolicyWithRequestBuilder(token: String) -> RequestBuilder<PolicyDocumentResponse> {
        var path = "/credit/policies/documents/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyDocumentResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve credit product policy

     - parameter token: (path) The unique identifier of the credit product policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/products&#x60; to retrieve existing credit product policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveProductPolicy(token: String, completion: @escaping ((_ data: PolicyProductResponse?,_ error: Error?) -> Void)) {
        retrieveProductPolicyWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve credit product policy
     - GET /credit/policies/products/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "card_products" : [ {
    "level" : "PREMIUM",
    "network" : "VISA",
    "token" : "token"
  }, {
    "level" : "PREMIUM",
    "network" : "VISA",
    "token" : "token"
  } ],
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "interest_calculation" : {
    "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
    "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
    "application_of_credits" : {
      "cycle_type" : "BEGINNING_REVOLVING",
      "day" : 7
    },
    "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
    "grace_days_application" : "NEXT_CYCLE_DATE",
    "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
    "minimum_interest" : 7.061401241503038E11,
    "day_count" : "ACTUAL"
  },
  "payments" : {
    "due_day" : 31,
    "billing_cycle_day" : 1,
    "allocation_order" : [ "INTEREST", "INTEREST" ],
    "min_payment_calculation" : {
      "min_payment_flat_amount" : 2.027123023002322,
      "include_overlimit_amount" : true,
      "min_payment_percentage" : {
        "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
        "include_interest_charged" : true,
        "percentage_of_balance" : 41.45613884275906
      },
      "include_past_due_amount" : true
    }
  },
  "usage" : [ "PURCHASE", "PURCHASE" ],
  "description" : "description",
  "classification" : "CONSUMER",
  "currency_code" : "USD",
  "token" : "token",
  "product_sub_type" : "CREDIT_CARD",
  "credit_line" : {
    "min" : 5.637376656633271E11,
    "max" : 5.962133916683123E11
  },
  "product_type" : "REVOLVING",
  "name" : "name"
}}]
     - parameter token: (path) The unique identifier of the credit product policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/products&#x60; to retrieve existing credit product policy tokens. 

     - returns: RequestBuilder<PolicyProductResponse> 
     */
    open class func retrieveProductPolicyWithRequestBuilder(token: String) -> RequestBuilder<PolicyProductResponse> {
        var path = "/credit/policies/products/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyProductResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve reward policy

     - parameter token: (path) The unique identifier of the reward policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/rewards&#x60; to retrieve existing reward policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRewardPolicy(token: String, completion: @escaping ((_ data: PolicyRewardResponse?,_ error: Error?) -> Void)) {
        retrieveRewardPolicyWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve reward policy
     - GET /credit/policies/rewards/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "rules" : [ {
    "filters" : {
      "amount" : {
        "greater_than" : 0.12315135367772556,
        "less_than" : 0.10246457001441578
      },
      "mcc_dynamic" : {
        "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
      }
    },
    "type" : "CASHBACK",
    "outcome" : {
      "percentage" : 0.684685269835264,
      "max_amount" : 0.14894159098541704
    }
  }, {
    "filters" : {
      "amount" : {
        "greater_than" : 0.12315135367772556,
        "less_than" : 0.10246457001441578
      },
      "mcc_dynamic" : {
        "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
      }
    },
    "type" : "CASHBACK",
    "outcome" : {
      "percentage" : 0.684685269835264,
      "max_amount" : 0.14894159098541704
    }
  } ],
  "token" : "token"
}}]
     - parameter token: (path) The unique identifier of the reward policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/rewards&#x60; to retrieve existing reward policy tokens. 

     - returns: RequestBuilder<PolicyRewardResponse> 
     */
    open class func retrieveRewardPolicyWithRequestBuilder(token: String) -> RequestBuilder<PolicyRewardResponse> {
        var path = "/credit/policies/rewards/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyRewardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update APR policy

     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the APR policy to update.  Send a &#x60;GET&#x60; request to &#x60;/policies/aprs&#x60; to retrieve existing APR policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAprPolicyWithToken(body: PolicyAprUpdateReq, token: String, completion: @escaping ((_ data: PolicyAprResponse?,_ error: Error?) -> Void)) {
        updateAprPolicyWithTokenWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update APR policy
     - PUT /credit/policies/aprs/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "purchases" : {
    "external_token" : "external_token",
    "tiers" : [ {
      "apr" : 6.027456183070403,
      "margin_rate" : 1.4658129805029452
    }, {
      "apr" : 6.027456183070403,
      "margin_rate" : 1.4658129805029452
    } ],
    "name" : "name"
  },
  "effective_date" : "2000-01-23",
  "name" : "name",
  "description" : "description",
  "token" : "token"
}}]
     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the APR policy to update.  Send a &#x60;GET&#x60; request to &#x60;/policies/aprs&#x60; to retrieve existing APR policy tokens. 

     - returns: RequestBuilder<PolicyAprResponse> 
     */
    open class func updateAprPolicyWithTokenWithRequestBuilder(body: PolicyAprUpdateReq, token: String) -> RequestBuilder<PolicyAprResponse> {
        var path = "/credit/policies/aprs/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyAprResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update document policy

     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the document policy to update.  Send a &#x60;GET&#x60; request to &#x60;/policies/documents&#x60; to retrieve existing document policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDocumentPolicy(body: PolicyDocumentUpdateReq, token: String, completion: @escaping ((_ data: PolicyDocumentResponse?,_ error: Error?) -> Void)) {
        updateDocumentPolicyWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update document policy
     - PUT /credit/policies/documents/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "account_statement" : {
    "template_token" : "template_token",
    "template_urls" : {
      "html" : "html"
    },
    "template_created_time" : "2000-01-23T04:56:07.000+00:00"
  },
  "benefits_disclosure_premium" : {
    "asset_urls" : {
      "pdf" : "pdf",
      "png" : "png",
      "html" : "html"
    },
    "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
    "asset_token" : "asset_token"
  },
  "token" : "token",
  "rewards_disclosure" : {
    "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
    "template_token" : "template_token",
    "asset_token" : "asset_token",
    "template_created_time" : "2000-01-23T04:56:07.000+00:00"
  },
  "name" : "name"
}}]
     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the document policy to update.  Send a &#x60;GET&#x60; request to &#x60;/policies/documents&#x60; to retrieve existing document policy tokens. 

     - returns: RequestBuilder<PolicyDocumentResponse> 
     */
    open class func updateDocumentPolicyWithRequestBuilder(body: PolicyDocumentUpdateReq, token: String) -> RequestBuilder<PolicyDocumentResponse> {
        var path = "/credit/policies/documents/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyDocumentResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update fee policy

     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the fee policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/fee&#x60; to retrieve existing fee policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateFeePolicyWithToken(body: PolicyFeeUpdateReq, token: String, completion: @escaping ((_ data: PolicyFeeResponse?,_ error: Error?) -> Void)) {
        updateFeePolicyWithTokenWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update fee policy
     - PUT /credit/policies/fees/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "account" : {
    "late_payment" : {
      "default_value" : 7.386281948385884,
      "default_method" : "FLAT"
    }
  },
  "token" : "token"
}}]
     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the fee policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/fee&#x60; to retrieve existing fee policy tokens. 

     - returns: RequestBuilder<PolicyFeeResponse> 
     */
    open class func updateFeePolicyWithTokenWithRequestBuilder(body: PolicyFeeUpdateReq, token: String) -> RequestBuilder<PolicyFeeResponse> {
        var path = "/credit/policies/fees/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyFeeResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update credit product policy

     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the credit product policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/products&#x60; to retrieve existing credit product policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProductPolicy(body: PolicyProductUpdateReq, token: String, completion: @escaping ((_ data: PolicyProductResponse?,_ error: Error?) -> Void)) {
        updateProductPolicyWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update credit product policy
     - PUT /credit/policies/products/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "card_products" : [ {
    "level" : "PREMIUM",
    "network" : "VISA",
    "token" : "token"
  }, {
    "level" : "PREMIUM",
    "network" : "VISA",
    "token" : "token"
  } ],
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "interest_calculation" : {
    "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
    "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
    "application_of_credits" : {
      "cycle_type" : "BEGINNING_REVOLVING",
      "day" : 7
    },
    "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
    "grace_days_application" : "NEXT_CYCLE_DATE",
    "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
    "minimum_interest" : 7.061401241503038E11,
    "day_count" : "ACTUAL"
  },
  "payments" : {
    "due_day" : 31,
    "billing_cycle_day" : 1,
    "allocation_order" : [ "INTEREST", "INTEREST" ],
    "min_payment_calculation" : {
      "min_payment_flat_amount" : 2.027123023002322,
      "include_overlimit_amount" : true,
      "min_payment_percentage" : {
        "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
        "include_interest_charged" : true,
        "percentage_of_balance" : 41.45613884275906
      },
      "include_past_due_amount" : true
    }
  },
  "usage" : [ "PURCHASE", "PURCHASE" ],
  "description" : "description",
  "classification" : "CONSUMER",
  "currency_code" : "USD",
  "token" : "token",
  "product_sub_type" : "CREDIT_CARD",
  "credit_line" : {
    "min" : 5.637376656633271E11,
    "max" : 5.962133916683123E11
  },
  "product_type" : "REVOLVING",
  "name" : "name"
}}]
     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the credit product policy to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/policies/products&#x60; to retrieve existing credit product policy tokens. 

     - returns: RequestBuilder<PolicyProductResponse> 
     */
    open class func updateProductPolicyWithRequestBuilder(body: PolicyProductUpdateReq, token: String) -> RequestBuilder<PolicyProductResponse> {
        var path = "/credit/policies/products/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyProductResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update reward policy

     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the reward policy to update.  Send a &#x60;GET&#x60; request to &#x60;/policies/rewards&#x60; to retrieve existing reward policy tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateRewardPolicy(body: PolicyRewardReq, token: String, completion: @escaping ((_ data: PolicyRewardResponse?,_ error: Error?) -> Void)) {
        updateRewardPolicyWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update reward policy
     - PUT /credit/policies/rewards/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "rules" : [ {
    "filters" : {
      "amount" : {
        "greater_than" : 0.12315135367772556,
        "less_than" : 0.10246457001441578
      },
      "mcc_dynamic" : {
        "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
      }
    },
    "type" : "CASHBACK",
    "outcome" : {
      "percentage" : 0.684685269835264,
      "max_amount" : 0.14894159098541704
    }
  }, {
    "filters" : {
      "amount" : {
        "greater_than" : 0.12315135367772556,
        "less_than" : 0.10246457001441578
      },
      "mcc_dynamic" : {
        "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
      }
    },
    "type" : "CASHBACK",
    "outcome" : {
      "percentage" : 0.684685269835264,
      "max_amount" : 0.14894159098541704
    }
  } ],
  "token" : "token"
}}]
     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the reward policy to update.  Send a &#x60;GET&#x60; request to &#x60;/policies/rewards&#x60; to retrieve existing reward policy tokens. 

     - returns: RequestBuilder<PolicyRewardResponse> 
     */
    open class func updateRewardPolicyWithRequestBuilder(body: PolicyRewardReq, token: String) -> RequestBuilder<PolicyRewardResponse> {
        var path = "/credit/policies/rewards/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PolicyRewardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
