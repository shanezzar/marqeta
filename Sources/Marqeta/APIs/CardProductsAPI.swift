//
// CardProductsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CardProductsAPI {
    /**
     List card products

     - parameter count: (query) Number of resources to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     - parameter startIndex: (query) The sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCardproducts(count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil, completion: @escaping ((_ data: CardProductListResponse?,_ error: Error?) -> Void)) {
        getCardproductsWithRequestBuilder(count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List card products
     - GET /cardproducts

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "end_date" : "2000-01-23",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : false,
    "config" : {
      "jit_funding" : {
        "programgateway_funding_source" : {
          "refunds_destination" : "GATEWAY",
          "always_fund" : false,
          "enabled" : false,
          "funding_source_token" : "funding_source_token"
        },
        "program_funding_source" : {
          "refunds_destination" : "PROGRAM_FUNDING_SOURCE",
          "enabled" : false,
          "funding_source_token" : "funding_source_token"
        },
        "paymentcard_funding_source" : {
          "refunds_destination" : "GATEWAY",
          "enabled" : false
        }
      },
      "special" : {
        "merchant_on_boarding" : false
      },
      "transaction_controls" : {
        "require_card_not_present_card_security_code" : false,
        "address_verification" : {
          "auth_messages" : {
            "decline_on_postal_code_mismatch" : true,
            "decline_on_address_number_mismatch" : false,
            "validate" : true
          }
        },
        "allow_network_load" : false,
        "allow_chip_fallback" : false,
        "enable_credit_service" : false,
        "allow_mcc_group_authorization_controls" : false,
        "allow_first_pin_set_via_financial_transaction" : false,
        "allow_network_load_card_activation" : false,
        "always_require_pin" : false,
        "quasi_cash_exempt_merchant_group_token" : "quasi_cash_exempt_merchant_group_token",
        "quasi_cash_exempt_mids" : "quasi_cash_exempt_mids",
        "accepted_countries_token" : "accepted_countries_token",
        "notification_language" : "notification_language",
        "ignore_card_suspended_state" : false,
        "allow_gpa_auth" : false,
        "allow_quasi_cash" : false,
        "enable_partial_auth_approval" : false,
        "strong_customer_authentication_limits" : {
          "sca_lvp_transactions_count_limit" : 7,
          "sca_contactless_transaction_limit" : 9.301444243932576,
          "sca_lvp_transactions_currency" : "sca_lvp_transactions_currency",
          "sca_tra_exemption_amount_limit" : 1.2315135367772556,
          "sca_contactless_transactions_count_limit" : 3,
          "sca_contactless_transactions_currency" : "sca_contactless_transactions_currency",
          "sca_lvp_cumulative_amount_limit" : 2.027123023002322,
          "sca_lvp_transaction_limit" : 4.145608029883936,
          "sca_contactless_cumulative_amount_limit" : 7.061401241503109
        },
        "always_require_icc" : false
      },
      "card_life_cycle" : {
        "activate_upon_issue" : false,
        "expiration_offset" : {
          "unit" : "YEARS",
          "value" : 5,
          "min_offset" : {
            "unit" : "YEARS",
            "value" : 1
          }
        },
        "card_service_code" : 6,
        "update_expiration_upon_activation" : false
      },
      "digital_wallet_tokenization" : {
        "card_art_id" : "card_art_id",
        "provisioning_controls" : {
          "force_yellow_path_for_card_product" : true,
          "in_app_provisioning" : {
            "address_verification" : {
              "validate" : true
            },
            "enabled" : false
          },
          "wallet_provider_card_on_file" : {
            "enabled" : false
          },
          "web_push_provisioning" : {
            "wpp_google_piaid" : "wpp_google_piaid",
            "wpp_apple_partner_id" : "wpp_apple_partner_id",
            "wpp_apple_card_template_id" : "wpp_apple_card_template_id"
          },
          "manual_entry" : {
            "enabled" : false
          }
        }
      },
      "clearing_and_settlement" : {
        "overdraft_destination" : "GPA"
      },
      "fulfillment" : {
        "enable_offline_pin" : false,
        "allow_card_creation" : true,
        "shipping" : {
          "care_of_line" : "care_of_line",
          "method" : "LOCAL_MAIL",
          "recipient_address" : {
            "zip" : "zip",
            "country" : "country",
            "address2" : "address2",
            "city" : "city",
            "phone" : "phone",
            "address1" : "address1",
            "last_name" : "last_name",
            "state" : "state",
            "middle_name" : "middle_name",
            "postal_code" : "postal_code",
            "first_name" : "first_name"
          }
        },
        "all_zero_card_security_code" : false,
        "payment_instrument" : "PHYSICAL_MSR",
        "pan_length" : "16",
        "card_personalization" : {
          "carrier" : {
            "message_file" : "message_file",
            "logo_file" : "logo_file",
            "message_line" : "message_line",
            "template_id" : "template_id",
            "logo_thumbnail_file" : "logo_thumbnail_file"
          },
          "images" : {
            "carrier" : {
              "message_1" : "message_1",
              "name" : "name"
            },
            "signature" : {
              "name" : "name"
            },
            "carrier_return_window" : {
              "name" : "name"
            },
            "card" : {
              "name" : "name",
              "thermal_color" : "thermal_color"
            }
          },
          "text" : {
            "name_line_1" : {
              "value" : "value"
            }
          },
          "perso_type" : "EMBOSS"
        },
        "package_id" : "0",
        "uppercase_name_lines" : true,
        "bulk_ship" : false,
        "fulfillment_provider" : "PERFECTPLASTIC",
        "bin_prefix" : "bin_prefix"
      },
      "poi" : {
        "other" : {
          "allow" : true,
          "use_static_pin" : false,
          "track1_discretionary_data" : "track1_discretionary_data",
          "track2_discretionary_data" : "track2_discretionary_data",
          "card_presence_required" : false,
          "cardholder_presence_required" : false
        },
        "ecommerce" : true,
        "atm" : false
      },
      "selective_auth" : {
        "sa_mode" : 2,
        "enable_regex_search_chain" : false,
        "dmd_location_sensitivity" : 5
      }
    },
    "start_date" : "2000-01-23",
    "token" : "token"
  }, {
    "end_date" : "2000-01-23",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : false,
    "config" : {
      "jit_funding" : {
        "programgateway_funding_source" : {
          "refunds_destination" : "GATEWAY",
          "always_fund" : false,
          "enabled" : false,
          "funding_source_token" : "funding_source_token"
        },
        "program_funding_source" : {
          "refunds_destination" : "PROGRAM_FUNDING_SOURCE",
          "enabled" : false,
          "funding_source_token" : "funding_source_token"
        },
        "paymentcard_funding_source" : {
          "refunds_destination" : "GATEWAY",
          "enabled" : false
        }
      },
      "special" : {
        "merchant_on_boarding" : false
      },
      "transaction_controls" : {
        "require_card_not_present_card_security_code" : false,
        "address_verification" : {
          "auth_messages" : {
            "decline_on_postal_code_mismatch" : true,
            "decline_on_address_number_mismatch" : false,
            "validate" : true
          }
        },
        "allow_network_load" : false,
        "allow_chip_fallback" : false,
        "enable_credit_service" : false,
        "allow_mcc_group_authorization_controls" : false,
        "allow_first_pin_set_via_financial_transaction" : false,
        "allow_network_load_card_activation" : false,
        "always_require_pin" : false,
        "quasi_cash_exempt_merchant_group_token" : "quasi_cash_exempt_merchant_group_token",
        "quasi_cash_exempt_mids" : "quasi_cash_exempt_mids",
        "accepted_countries_token" : "accepted_countries_token",
        "notification_language" : "notification_language",
        "ignore_card_suspended_state" : false,
        "allow_gpa_auth" : false,
        "allow_quasi_cash" : false,
        "enable_partial_auth_approval" : false,
        "strong_customer_authentication_limits" : {
          "sca_lvp_transactions_count_limit" : 7,
          "sca_contactless_transaction_limit" : 9.301444243932576,
          "sca_lvp_transactions_currency" : "sca_lvp_transactions_currency",
          "sca_tra_exemption_amount_limit" : 1.2315135367772556,
          "sca_contactless_transactions_count_limit" : 3,
          "sca_contactless_transactions_currency" : "sca_contactless_transactions_currency",
          "sca_lvp_cumulative_amount_limit" : 2.027123023002322,
          "sca_lvp_transaction_limit" : 4.145608029883936,
          "sca_contactless_cumulative_amount_limit" : 7.061401241503109
        },
        "always_require_icc" : false
      },
      "card_life_cycle" : {
        "activate_upon_issue" : false,
        "expiration_offset" : {
          "unit" : "YEARS",
          "value" : 5,
          "min_offset" : {
            "unit" : "YEARS",
            "value" : 1
          }
        },
        "card_service_code" : 6,
        "update_expiration_upon_activation" : false
      },
      "digital_wallet_tokenization" : {
        "card_art_id" : "card_art_id",
        "provisioning_controls" : {
          "force_yellow_path_for_card_product" : true,
          "in_app_provisioning" : {
            "address_verification" : {
              "validate" : true
            },
            "enabled" : false
          },
          "wallet_provider_card_on_file" : {
            "enabled" : false
          },
          "web_push_provisioning" : {
            "wpp_google_piaid" : "wpp_google_piaid",
            "wpp_apple_partner_id" : "wpp_apple_partner_id",
            "wpp_apple_card_template_id" : "wpp_apple_card_template_id"
          },
          "manual_entry" : {
            "enabled" : false
          }
        }
      },
      "clearing_and_settlement" : {
        "overdraft_destination" : "GPA"
      },
      "fulfillment" : {
        "enable_offline_pin" : false,
        "allow_card_creation" : true,
        "shipping" : {
          "care_of_line" : "care_of_line",
          "method" : "LOCAL_MAIL",
          "recipient_address" : {
            "zip" : "zip",
            "country" : "country",
            "address2" : "address2",
            "city" : "city",
            "phone" : "phone",
            "address1" : "address1",
            "last_name" : "last_name",
            "state" : "state",
            "middle_name" : "middle_name",
            "postal_code" : "postal_code",
            "first_name" : "first_name"
          }
        },
        "all_zero_card_security_code" : false,
        "payment_instrument" : "PHYSICAL_MSR",
        "pan_length" : "16",
        "card_personalization" : {
          "carrier" : {
            "message_file" : "message_file",
            "logo_file" : "logo_file",
            "message_line" : "message_line",
            "template_id" : "template_id",
            "logo_thumbnail_file" : "logo_thumbnail_file"
          },
          "images" : {
            "carrier" : {
              "message_1" : "message_1",
              "name" : "name"
            },
            "signature" : {
              "name" : "name"
            },
            "carrier_return_window" : {
              "name" : "name"
            },
            "card" : {
              "name" : "name",
              "thermal_color" : "thermal_color"
            }
          },
          "text" : {
            "name_line_1" : {
              "value" : "value"
            }
          },
          "perso_type" : "EMBOSS"
        },
        "package_id" : "0",
        "uppercase_name_lines" : true,
        "bulk_ship" : false,
        "fulfillment_provider" : "PERFECTPLASTIC",
        "bin_prefix" : "bin_prefix"
      },
      "poi" : {
        "other" : {
          "allow" : true,
          "use_static_pin" : false,
          "track1_discretionary_data" : "track1_discretionary_data",
          "track2_discretionary_data" : "track2_discretionary_data",
          "card_presence_required" : false,
          "cardholder_presence_required" : false
        },
        "ecommerce" : true,
        "atm" : false
      },
      "selective_auth" : {
        "sa_mode" : 2,
        "enable_regex_search_chain" : false,
        "dmd_location_sensitivity" : 5
      }
    },
    "start_date" : "2000-01-23",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 1
}}]
     - parameter count: (query) Number of resources to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     - parameter startIndex: (query) The sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)

     - returns: RequestBuilder<CardProductListResponse> 
     */
    open class func getCardproductsWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil) -> RequestBuilder<CardProductListResponse> {
        let path = "/cardproducts"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<CardProductListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve card product

     - parameter token: (path) Unique identifier of the card product to retrieve. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCardproductsToken(token: String, completion: @escaping ((_ data: CardProductResponse?,_ error: Error?) -> Void)) {
        getCardproductsTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve card product
     - GET /cardproducts/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "end_date" : "2000-01-23",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : false,
  "config" : {
    "jit_funding" : {
      "programgateway_funding_source" : {
        "refunds_destination" : "GATEWAY",
        "always_fund" : false,
        "enabled" : false,
        "funding_source_token" : "funding_source_token"
      },
      "program_funding_source" : {
        "refunds_destination" : "PROGRAM_FUNDING_SOURCE",
        "enabled" : false,
        "funding_source_token" : "funding_source_token"
      },
      "paymentcard_funding_source" : {
        "refunds_destination" : "GATEWAY",
        "enabled" : false
      }
    },
    "special" : {
      "merchant_on_boarding" : false
    },
    "transaction_controls" : {
      "require_card_not_present_card_security_code" : false,
      "address_verification" : {
        "auth_messages" : {
          "decline_on_postal_code_mismatch" : true,
          "decline_on_address_number_mismatch" : false,
          "validate" : true
        }
      },
      "allow_network_load" : false,
      "allow_chip_fallback" : false,
      "enable_credit_service" : false,
      "allow_mcc_group_authorization_controls" : false,
      "allow_first_pin_set_via_financial_transaction" : false,
      "allow_network_load_card_activation" : false,
      "always_require_pin" : false,
      "quasi_cash_exempt_merchant_group_token" : "quasi_cash_exempt_merchant_group_token",
      "quasi_cash_exempt_mids" : "quasi_cash_exempt_mids",
      "accepted_countries_token" : "accepted_countries_token",
      "notification_language" : "notification_language",
      "ignore_card_suspended_state" : false,
      "allow_gpa_auth" : false,
      "allow_quasi_cash" : false,
      "enable_partial_auth_approval" : false,
      "strong_customer_authentication_limits" : {
        "sca_lvp_transactions_count_limit" : 7,
        "sca_contactless_transaction_limit" : 9.301444243932576,
        "sca_lvp_transactions_currency" : "sca_lvp_transactions_currency",
        "sca_tra_exemption_amount_limit" : 1.2315135367772556,
        "sca_contactless_transactions_count_limit" : 3,
        "sca_contactless_transactions_currency" : "sca_contactless_transactions_currency",
        "sca_lvp_cumulative_amount_limit" : 2.027123023002322,
        "sca_lvp_transaction_limit" : 4.145608029883936,
        "sca_contactless_cumulative_amount_limit" : 7.061401241503109
      },
      "always_require_icc" : false
    },
    "card_life_cycle" : {
      "activate_upon_issue" : false,
      "expiration_offset" : {
        "unit" : "YEARS",
        "value" : 5,
        "min_offset" : {
          "unit" : "YEARS",
          "value" : 1
        }
      },
      "card_service_code" : 6,
      "update_expiration_upon_activation" : false
    },
    "digital_wallet_tokenization" : {
      "card_art_id" : "card_art_id",
      "provisioning_controls" : {
        "force_yellow_path_for_card_product" : true,
        "in_app_provisioning" : {
          "address_verification" : {
            "validate" : true
          },
          "enabled" : false
        },
        "wallet_provider_card_on_file" : {
          "enabled" : false
        },
        "web_push_provisioning" : {
          "wpp_google_piaid" : "wpp_google_piaid",
          "wpp_apple_partner_id" : "wpp_apple_partner_id",
          "wpp_apple_card_template_id" : "wpp_apple_card_template_id"
        },
        "manual_entry" : {
          "enabled" : false
        }
      }
    },
    "clearing_and_settlement" : {
      "overdraft_destination" : "GPA"
    },
    "fulfillment" : {
      "enable_offline_pin" : false,
      "allow_card_creation" : true,
      "shipping" : {
        "care_of_line" : "care_of_line",
        "method" : "LOCAL_MAIL",
        "recipient_address" : {
          "zip" : "zip",
          "country" : "country",
          "address2" : "address2",
          "city" : "city",
          "phone" : "phone",
          "address1" : "address1",
          "last_name" : "last_name",
          "state" : "state",
          "middle_name" : "middle_name",
          "postal_code" : "postal_code",
          "first_name" : "first_name"
        }
      },
      "all_zero_card_security_code" : false,
      "payment_instrument" : "PHYSICAL_MSR",
      "pan_length" : "16",
      "card_personalization" : {
        "carrier" : {
          "message_file" : "message_file",
          "logo_file" : "logo_file",
          "message_line" : "message_line",
          "template_id" : "template_id",
          "logo_thumbnail_file" : "logo_thumbnail_file"
        },
        "images" : {
          "carrier" : {
            "message_1" : "message_1",
            "name" : "name"
          },
          "signature" : {
            "name" : "name"
          },
          "carrier_return_window" : {
            "name" : "name"
          },
          "card" : {
            "name" : "name",
            "thermal_color" : "thermal_color"
          }
        },
        "text" : {
          "name_line_1" : {
            "value" : "value"
          }
        },
        "perso_type" : "EMBOSS"
      },
      "package_id" : "0",
      "uppercase_name_lines" : true,
      "bulk_ship" : false,
      "fulfillment_provider" : "PERFECTPLASTIC",
      "bin_prefix" : "bin_prefix"
    },
    "poi" : {
      "other" : {
        "allow" : true,
        "use_static_pin" : false,
        "track1_discretionary_data" : "track1_discretionary_data",
        "track2_discretionary_data" : "track2_discretionary_data",
        "card_presence_required" : false,
        "cardholder_presence_required" : false
      },
      "ecommerce" : true,
      "atm" : false
    },
    "selective_auth" : {
      "sa_mode" : 2,
      "enable_regex_search_chain" : false,
      "dmd_location_sensitivity" : 5
    }
  },
  "start_date" : "2000-01-23",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the card product to retrieve. 

     - returns: RequestBuilder<CardProductResponse> 
     */
    open class func getCardproductsTokenWithRequestBuilder(token: String) -> RequestBuilder<CardProductResponse> {
        var path = "/cardproducts/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CardProductResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create card product

     - parameter body: (body) Card product object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCardproducts(body: CardProductRequest, completion: @escaping ((_ data: CardProductResponse?,_ error: Error?) -> Void)) {
        postCardproductsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create card product
     - POST /cardproducts

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "end_date" : "2000-01-23",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : false,
  "config" : {
    "jit_funding" : {
      "programgateway_funding_source" : {
        "refunds_destination" : "GATEWAY",
        "always_fund" : false,
        "enabled" : false,
        "funding_source_token" : "funding_source_token"
      },
      "program_funding_source" : {
        "refunds_destination" : "PROGRAM_FUNDING_SOURCE",
        "enabled" : false,
        "funding_source_token" : "funding_source_token"
      },
      "paymentcard_funding_source" : {
        "refunds_destination" : "GATEWAY",
        "enabled" : false
      }
    },
    "special" : {
      "merchant_on_boarding" : false
    },
    "transaction_controls" : {
      "require_card_not_present_card_security_code" : false,
      "address_verification" : {
        "auth_messages" : {
          "decline_on_postal_code_mismatch" : true,
          "decline_on_address_number_mismatch" : false,
          "validate" : true
        }
      },
      "allow_network_load" : false,
      "allow_chip_fallback" : false,
      "enable_credit_service" : false,
      "allow_mcc_group_authorization_controls" : false,
      "allow_first_pin_set_via_financial_transaction" : false,
      "allow_network_load_card_activation" : false,
      "always_require_pin" : false,
      "quasi_cash_exempt_merchant_group_token" : "quasi_cash_exempt_merchant_group_token",
      "quasi_cash_exempt_mids" : "quasi_cash_exempt_mids",
      "accepted_countries_token" : "accepted_countries_token",
      "notification_language" : "notification_language",
      "ignore_card_suspended_state" : false,
      "allow_gpa_auth" : false,
      "allow_quasi_cash" : false,
      "enable_partial_auth_approval" : false,
      "strong_customer_authentication_limits" : {
        "sca_lvp_transactions_count_limit" : 7,
        "sca_contactless_transaction_limit" : 9.301444243932576,
        "sca_lvp_transactions_currency" : "sca_lvp_transactions_currency",
        "sca_tra_exemption_amount_limit" : 1.2315135367772556,
        "sca_contactless_transactions_count_limit" : 3,
        "sca_contactless_transactions_currency" : "sca_contactless_transactions_currency",
        "sca_lvp_cumulative_amount_limit" : 2.027123023002322,
        "sca_lvp_transaction_limit" : 4.145608029883936,
        "sca_contactless_cumulative_amount_limit" : 7.061401241503109
      },
      "always_require_icc" : false
    },
    "card_life_cycle" : {
      "activate_upon_issue" : false,
      "expiration_offset" : {
        "unit" : "YEARS",
        "value" : 5,
        "min_offset" : {
          "unit" : "YEARS",
          "value" : 1
        }
      },
      "card_service_code" : 6,
      "update_expiration_upon_activation" : false
    },
    "digital_wallet_tokenization" : {
      "card_art_id" : "card_art_id",
      "provisioning_controls" : {
        "force_yellow_path_for_card_product" : true,
        "in_app_provisioning" : {
          "address_verification" : {
            "validate" : true
          },
          "enabled" : false
        },
        "wallet_provider_card_on_file" : {
          "enabled" : false
        },
        "web_push_provisioning" : {
          "wpp_google_piaid" : "wpp_google_piaid",
          "wpp_apple_partner_id" : "wpp_apple_partner_id",
          "wpp_apple_card_template_id" : "wpp_apple_card_template_id"
        },
        "manual_entry" : {
          "enabled" : false
        }
      }
    },
    "clearing_and_settlement" : {
      "overdraft_destination" : "GPA"
    },
    "fulfillment" : {
      "enable_offline_pin" : false,
      "allow_card_creation" : true,
      "shipping" : {
        "care_of_line" : "care_of_line",
        "method" : "LOCAL_MAIL",
        "recipient_address" : {
          "zip" : "zip",
          "country" : "country",
          "address2" : "address2",
          "city" : "city",
          "phone" : "phone",
          "address1" : "address1",
          "last_name" : "last_name",
          "state" : "state",
          "middle_name" : "middle_name",
          "postal_code" : "postal_code",
          "first_name" : "first_name"
        }
      },
      "all_zero_card_security_code" : false,
      "payment_instrument" : "PHYSICAL_MSR",
      "pan_length" : "16",
      "card_personalization" : {
        "carrier" : {
          "message_file" : "message_file",
          "logo_file" : "logo_file",
          "message_line" : "message_line",
          "template_id" : "template_id",
          "logo_thumbnail_file" : "logo_thumbnail_file"
        },
        "images" : {
          "carrier" : {
            "message_1" : "message_1",
            "name" : "name"
          },
          "signature" : {
            "name" : "name"
          },
          "carrier_return_window" : {
            "name" : "name"
          },
          "card" : {
            "name" : "name",
            "thermal_color" : "thermal_color"
          }
        },
        "text" : {
          "name_line_1" : {
            "value" : "value"
          }
        },
        "perso_type" : "EMBOSS"
      },
      "package_id" : "0",
      "uppercase_name_lines" : true,
      "bulk_ship" : false,
      "fulfillment_provider" : "PERFECTPLASTIC",
      "bin_prefix" : "bin_prefix"
    },
    "poi" : {
      "other" : {
        "allow" : true,
        "use_static_pin" : false,
        "track1_discretionary_data" : "track1_discretionary_data",
        "track2_discretionary_data" : "track2_discretionary_data",
        "card_presence_required" : false,
        "cardholder_presence_required" : false
      },
      "ecommerce" : true,
      "atm" : false
    },
    "selective_auth" : {
      "sa_mode" : 2,
      "enable_regex_search_chain" : false,
      "dmd_location_sensitivity" : 5
    }
  },
  "start_date" : "2000-01-23",
  "token" : "token"
}}]
     - parameter body: (body) Card product object 

     - returns: RequestBuilder<CardProductResponse> 
     */
    open class func postCardproductsWithRequestBuilder(body: CardProductRequest) -> RequestBuilder<CardProductResponse> {
        let path = "/cardproducts"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CardProductResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update card product

     - parameter body: (body) Card product object 
     - parameter token: (path) Unique identifier of the card product to update. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCardproductsToken(body: CardProductUpdateModel, token: String, completion: @escaping ((_ data: CardProductResponse?,_ error: Error?) -> Void)) {
        putCardproductsTokenWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update card product
     - PUT /cardproducts/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "end_date" : "2000-01-23",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : false,
  "config" : {
    "jit_funding" : {
      "programgateway_funding_source" : {
        "refunds_destination" : "GATEWAY",
        "always_fund" : false,
        "enabled" : false,
        "funding_source_token" : "funding_source_token"
      },
      "program_funding_source" : {
        "refunds_destination" : "PROGRAM_FUNDING_SOURCE",
        "enabled" : false,
        "funding_source_token" : "funding_source_token"
      },
      "paymentcard_funding_source" : {
        "refunds_destination" : "GATEWAY",
        "enabled" : false
      }
    },
    "special" : {
      "merchant_on_boarding" : false
    },
    "transaction_controls" : {
      "require_card_not_present_card_security_code" : false,
      "address_verification" : {
        "auth_messages" : {
          "decline_on_postal_code_mismatch" : true,
          "decline_on_address_number_mismatch" : false,
          "validate" : true
        }
      },
      "allow_network_load" : false,
      "allow_chip_fallback" : false,
      "enable_credit_service" : false,
      "allow_mcc_group_authorization_controls" : false,
      "allow_first_pin_set_via_financial_transaction" : false,
      "allow_network_load_card_activation" : false,
      "always_require_pin" : false,
      "quasi_cash_exempt_merchant_group_token" : "quasi_cash_exempt_merchant_group_token",
      "quasi_cash_exempt_mids" : "quasi_cash_exempt_mids",
      "accepted_countries_token" : "accepted_countries_token",
      "notification_language" : "notification_language",
      "ignore_card_suspended_state" : false,
      "allow_gpa_auth" : false,
      "allow_quasi_cash" : false,
      "enable_partial_auth_approval" : false,
      "strong_customer_authentication_limits" : {
        "sca_lvp_transactions_count_limit" : 7,
        "sca_contactless_transaction_limit" : 9.301444243932576,
        "sca_lvp_transactions_currency" : "sca_lvp_transactions_currency",
        "sca_tra_exemption_amount_limit" : 1.2315135367772556,
        "sca_contactless_transactions_count_limit" : 3,
        "sca_contactless_transactions_currency" : "sca_contactless_transactions_currency",
        "sca_lvp_cumulative_amount_limit" : 2.027123023002322,
        "sca_lvp_transaction_limit" : 4.145608029883936,
        "sca_contactless_cumulative_amount_limit" : 7.061401241503109
      },
      "always_require_icc" : false
    },
    "card_life_cycle" : {
      "activate_upon_issue" : false,
      "expiration_offset" : {
        "unit" : "YEARS",
        "value" : 5,
        "min_offset" : {
          "unit" : "YEARS",
          "value" : 1
        }
      },
      "card_service_code" : 6,
      "update_expiration_upon_activation" : false
    },
    "digital_wallet_tokenization" : {
      "card_art_id" : "card_art_id",
      "provisioning_controls" : {
        "force_yellow_path_for_card_product" : true,
        "in_app_provisioning" : {
          "address_verification" : {
            "validate" : true
          },
          "enabled" : false
        },
        "wallet_provider_card_on_file" : {
          "enabled" : false
        },
        "web_push_provisioning" : {
          "wpp_google_piaid" : "wpp_google_piaid",
          "wpp_apple_partner_id" : "wpp_apple_partner_id",
          "wpp_apple_card_template_id" : "wpp_apple_card_template_id"
        },
        "manual_entry" : {
          "enabled" : false
        }
      }
    },
    "clearing_and_settlement" : {
      "overdraft_destination" : "GPA"
    },
    "fulfillment" : {
      "enable_offline_pin" : false,
      "allow_card_creation" : true,
      "shipping" : {
        "care_of_line" : "care_of_line",
        "method" : "LOCAL_MAIL",
        "recipient_address" : {
          "zip" : "zip",
          "country" : "country",
          "address2" : "address2",
          "city" : "city",
          "phone" : "phone",
          "address1" : "address1",
          "last_name" : "last_name",
          "state" : "state",
          "middle_name" : "middle_name",
          "postal_code" : "postal_code",
          "first_name" : "first_name"
        }
      },
      "all_zero_card_security_code" : false,
      "payment_instrument" : "PHYSICAL_MSR",
      "pan_length" : "16",
      "card_personalization" : {
        "carrier" : {
          "message_file" : "message_file",
          "logo_file" : "logo_file",
          "message_line" : "message_line",
          "template_id" : "template_id",
          "logo_thumbnail_file" : "logo_thumbnail_file"
        },
        "images" : {
          "carrier" : {
            "message_1" : "message_1",
            "name" : "name"
          },
          "signature" : {
            "name" : "name"
          },
          "carrier_return_window" : {
            "name" : "name"
          },
          "card" : {
            "name" : "name",
            "thermal_color" : "thermal_color"
          }
        },
        "text" : {
          "name_line_1" : {
            "value" : "value"
          }
        },
        "perso_type" : "EMBOSS"
      },
      "package_id" : "0",
      "uppercase_name_lines" : true,
      "bulk_ship" : false,
      "fulfillment_provider" : "PERFECTPLASTIC",
      "bin_prefix" : "bin_prefix"
    },
    "poi" : {
      "other" : {
        "allow" : true,
        "use_static_pin" : false,
        "track1_discretionary_data" : "track1_discretionary_data",
        "track2_discretionary_data" : "track2_discretionary_data",
        "card_presence_required" : false,
        "cardholder_presence_required" : false
      },
      "ecommerce" : true,
      "atm" : false
    },
    "selective_auth" : {
      "sa_mode" : 2,
      "enable_regex_search_chain" : false,
      "dmd_location_sensitivity" : 5
    }
  },
  "start_date" : "2000-01-23",
  "token" : "token"
}}]
     - parameter body: (body) Card product object 
     - parameter token: (path) Unique identifier of the card product to update. 

     - returns: RequestBuilder<CardProductResponse> 
     */
    open class func putCardproductsTokenWithRequestBuilder(body: CardProductUpdateModel, token: String) -> RequestBuilder<CardProductResponse> {
        var path = "/cardproducts/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CardProductResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
