//
// FeesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class FeesAPI {
    /**
     List fees

     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFees(count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: FeeListResponse?,_ error: Error?) -> Void)) {
        getFeesWithRequestBuilder(count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List fees
     - GET /fees

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 6.027456183070403,
    "real_time_assessment" : {
      "domestic_enabled" : false,
      "international_enabled" : false,
      "transaction_type" : "transaction_type"
    },
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : false,
    "currency_code" : "currency_code",
    "tags" : "tags",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 6.027456183070403,
    "real_time_assessment" : {
      "domestic_enabled" : false,
      "international_enabled" : false,
      "transaction_type" : "transaction_type"
    },
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : false,
    "currency_code" : "currency_code",
    "tags" : "tags",
    "token" : "token"
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 1
}}]
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)

     - returns: RequestBuilder<FeeListResponse> 
     */
    open class func getFeesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<FeeListResponse> {
        let path = "/fees"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<FeeListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve fee

     - parameter token: (path) Unique identifier of the fee resource. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFeesToken(token: String, completion: @escaping ((_ data: Fee?,_ error: Error?) -> Void)) {
        getFeesTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve fee
     - GET /fees/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 6.027456183070403,
  "real_time_assessment" : {
    "domestic_enabled" : false,
    "international_enabled" : false,
    "transaction_type" : "transaction_type"
  },
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : false,
  "currency_code" : "currency_code",
  "tags" : "tags",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the fee resource. 

     - returns: RequestBuilder<Fee> 
     */
    open class func getFeesTokenWithRequestBuilder(token: String) -> RequestBuilder<Fee> {
        var path = "/fees/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Fee>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create fee

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFees(body: FeeRequest? = nil, completion: @escaping ((_ data: Fee?,_ error: Error?) -> Void)) {
        postFeesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create fee
     - POST /fees

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 6.027456183070403,
  "real_time_assessment" : {
    "domestic_enabled" : false,
    "international_enabled" : false,
    "transaction_type" : "transaction_type"
  },
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : false,
  "currency_code" : "currency_code",
  "tags" : "tags",
  "token" : "token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Fee> 
     */
    open class func postFeesWithRequestBuilder(body: FeeRequest? = nil) -> RequestBuilder<Fee> {
        let path = "/fees"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Fee>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update fee

     - parameter token: (path) Unique identifier of the fee resource. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFeesToken(token: String, body: FeeUpdateRequest? = nil, completion: @escaping ((_ data: Fee?,_ error: Error?) -> Void)) {
        putFeesTokenWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update fee
     - PUT /fees/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 6.027456183070403,
  "real_time_assessment" : {
    "domestic_enabled" : false,
    "international_enabled" : false,
    "transaction_type" : "transaction_type"
  },
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : false,
  "currency_code" : "currency_code",
  "tags" : "tags",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the fee resource. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Fee> 
     */
    open class func putFeesTokenWithRequestBuilder(token: String, body: FeeUpdateRequest? = nil) -> RequestBuilder<Fee> {
        var path = "/fees/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Fee>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
