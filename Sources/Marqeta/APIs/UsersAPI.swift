//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UsersAPI {
    /**
     List users

     - parameter count: (query) Number of user resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter searchType: (query) Search type. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(count: Int? = nil, startIndex: Int? = nil, searchType: String? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: UserCardHolderListResponse?,_ error: Error?) -> Void)) {
        getUsersWithRequestBuilder(count: count, startIndex: startIndex, searchType: searchType, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List users
     - GET /users

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "honorific" : "honorific",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : true,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token"
  }, {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "honorific" : "honorific",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : true,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) Number of user resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter searchType: (query) Search type. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<UserCardHolderListResponse> 
     */
    open class func getUsersWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, searchType: String? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<UserCardHolderListResponse> {
        let path = "/users"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "search_type": searchType, 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<UserCardHolderListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve client access token

     - parameter token: (path) Client access token. 
     - parameter applicationToken: (query) Unique identifier of the &#x60;application&#x60; object. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersAuthClientaccesstokenToken(token: String, applicationToken: String? = nil, completion: @escaping ((_ data: ClientAccessTokenResponse?,_ error: Error?) -> Void)) {
        getUsersAuthClientaccesstokenTokenWithRequestBuilder(token: token, applicationToken: applicationToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve client access token
     - GET /users/auth/clientaccesstoken/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "application" : {
    "assets_url" : "assets_url",
    "environment" : "environment",
    "program_short_code" : "program_short_code",
    "client_api_base_url" : "client_api_base_url",
    "access_code" : "access_code",
    "program" : "program",
    "token" : "token"
  },
  "created" : "2000-01-23T04:56:07.000+00:00",
  "card_token" : "card_token",
  "token" : "token"
}}]
     - parameter token: (path) Client access token. 
     - parameter applicationToken: (query) Unique identifier of the &#x60;application&#x60; object. (optional)

     - returns: RequestBuilder<ClientAccessTokenResponse> 
     */
    open class func getUsersAuthClientaccesstokenTokenWithRequestBuilder(token: String, applicationToken: String? = nil) -> RequestBuilder<ClientAccessTokenResponse> {
        var path = "/users/auth/clientaccesstoken/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "application_token": applicationToken
        ])


        let requestBuilder: RequestBuilder<ClientAccessTokenResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List user child accounts

     - parameter parentToken: (path) Unique identifier of the parent account holder. 
     - parameter count: (query) Number of user resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersParenttokenChildren(parentToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: UserCardHolderListResponse?,_ error: Error?) -> Void)) {
        getUsersParenttokenChildrenWithRequestBuilder(parentToken: parentToken, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List user child accounts
     - GET /users/{parent_token}/children

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "honorific" : "honorific",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : true,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token"
  }, {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "honorific" : "honorific",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : true,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter parentToken: (path) Unique identifier of the parent account holder. 
     - parameter count: (query) Number of user resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<UserCardHolderListResponse> 
     */
    open class func getUsersParenttokenChildrenWithRequestBuilder(parentToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<UserCardHolderListResponse> {
        var path = "/users/{parent_token}/children"
        let parentTokenPreEscape = "\(parentToken)"
        let parentTokenPostEscape = parentTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{parent_token}", with: parentTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<UserCardHolderListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve user

     - parameter token: (path) Unique identifier of the user resource. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersToken(token: String, fields: String? = nil, completion: @escaping ((_ data: UserCardHolderResponse?,_ error: Error?) -> Void)) {
        getUsersTokenWithRequestBuilder(token: token, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve user
     - GET /users/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "metadata" : {
    "key" : "metadata"
  },
  "business_token" : "business_token",
  "notes" : "notes",
  "gender" : "F",
  "city" : "city",
  "birth_date" : "birth_date",
  "account_holder_group_token" : "account_holder_group_token",
  "ssn" : "ssn",
  "id_card_expiration_date" : "id_card_expiration_date",
  "password" : "password",
  "company" : "company",
  "state" : "state",
  "first_name" : "first_name",
  "email" : "email",
  "authentication" : {
    "email_verified" : false,
    "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
    "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
    "last_password_update_channel" : "USER_CHANGE"
  },
  "honorific" : "honorific",
  "zip" : "zip",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "address2" : "address2",
  "passport_expiration_date" : "passport_expiration_date",
  "address1" : "address1",
  "active" : false,
  "last_name" : "last_name",
  "ip_address" : "ip_address",
  "middle_name" : "middle_name",
  "corporate_card_holder" : false,
  "identifications" : [ {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  }, {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  } ],
  "token" : "token",
  "nationality" : "nationality",
  "phone" : "phone",
  "passport_number" : "passport_number",
  "id_card_number" : "id_card_number",
  "postal_code" : "postal_code",
  "uses_parent_account" : false,
  "parent_token" : "parent_token",
  "status" : "UNVERIFIED"
}}]
     - parameter token: (path) Unique identifier of the user resource. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<UserCardHolderResponse> 
     */
    open class func getUsersTokenWithRequestBuilder(token: String, fields: String? = nil) -> RequestBuilder<UserCardHolderResponse> {
        var path = "/users/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<UserCardHolderResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve user identification number

     - parameter token: (path) Unique identifier of the user resource. 
     - parameter fullSsn: (query) To return the full identification number, set to &#x60;true&#x60;. To return only the last four digits, set to &#x60;false&#x60;.  If the identifications array contains only the last four digits of the identification number, the &#x60;/users/{token}/ssn&#x60; endpoint will return only the last four digits, regardless of the &#x60;full_ssn&#x60; parameter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersTokenSsn(token: String, fullSsn: Bool? = nil, completion: @escaping ((_ data: SsnResponseModel?,_ error: Error?) -> Void)) {
        getUsersTokenSsnWithRequestBuilder(token: token, fullSsn: fullSsn).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve user identification number
     - GET /users/{token}/ssn

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "nin" : "nin",
  "tin" : "tin",
  "sin" : "sin",
  "ssn" : "ssn"
}}]
     - parameter token: (path) Unique identifier of the user resource. 
     - parameter fullSsn: (query) To return the full identification number, set to &#x60;true&#x60;. To return only the last four digits, set to &#x60;false&#x60;.  If the identifications array contains only the last four digits of the identification number, the &#x60;/users/{token}/ssn&#x60; endpoint will return only the last four digits, regardless of the &#x60;full_ssn&#x60; parameter. (optional)

     - returns: RequestBuilder<SsnResponseModel> 
     */
    open class func getUsersTokenSsnWithRequestBuilder(token: String, fullSsn: Bool? = nil) -> RequestBuilder<SsnResponseModel> {
        var path = "/users/{token}/ssn"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "full_ssn": fullSsn
        ])


        let requestBuilder: RequestBuilder<SsnResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create user

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsers(body: CardHolderModel? = nil, completion: @escaping ((_ data: UserCardHolderResponse?,_ error: Error?) -> Void)) {
        postUsersWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create user
     - POST /users

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "metadata" : {
    "key" : "metadata"
  },
  "business_token" : "business_token",
  "notes" : "notes",
  "gender" : "F",
  "city" : "city",
  "birth_date" : "birth_date",
  "account_holder_group_token" : "account_holder_group_token",
  "ssn" : "ssn",
  "id_card_expiration_date" : "id_card_expiration_date",
  "password" : "password",
  "company" : "company",
  "state" : "state",
  "first_name" : "first_name",
  "email" : "email",
  "authentication" : {
    "email_verified" : false,
    "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
    "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
    "last_password_update_channel" : "USER_CHANGE"
  },
  "honorific" : "honorific",
  "zip" : "zip",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "address2" : "address2",
  "passport_expiration_date" : "passport_expiration_date",
  "address1" : "address1",
  "active" : false,
  "last_name" : "last_name",
  "ip_address" : "ip_address",
  "middle_name" : "middle_name",
  "corporate_card_holder" : false,
  "identifications" : [ {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  }, {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  } ],
  "token" : "token",
  "nationality" : "nationality",
  "phone" : "phone",
  "passport_number" : "passport_number",
  "id_card_number" : "id_card_number",
  "postal_code" : "postal_code",
  "uses_parent_account" : false,
  "parent_token" : "parent_token",
  "status" : "UNVERIFIED"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<UserCardHolderResponse> 
     */
    open class func postUsersWithRequestBuilder(body: CardHolderModel? = nil) -> RequestBuilder<UserCardHolderResponse> {
        let path = "/users"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserCardHolderResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update user password

     - parameter body: (body) Password update object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersAuthChangepassword(body: PasswordUpdateModel, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersAuthChangepasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update user password
     - POST /users/auth/changepassword

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - parameter body: (body) Password update object 

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersAuthChangepasswordWithRequestBuilder(body: PasswordUpdateModel) -> RequestBuilder<Void> {
        let path = "/users/auth/changepassword"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create client access token

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersAuthClientaccesstoken(body: ClientAccessTokenRequest? = nil, completion: @escaping ((_ data: ClientAccessTokenResponse?,_ error: Error?) -> Void)) {
        postUsersAuthClientaccesstokenWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create client access token
     - POST /users/auth/clientaccesstoken

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "application" : {
    "assets_url" : "assets_url",
    "environment" : "environment",
    "program_short_code" : "program_short_code",
    "client_api_base_url" : "client_api_base_url",
    "access_code" : "access_code",
    "program" : "program",
    "token" : "token"
  },
  "created" : "2000-01-23T04:56:07.000+00:00",
  "card_token" : "card_token",
  "token" : "token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ClientAccessTokenResponse> 
     */
    open class func postUsersAuthClientaccesstokenWithRequestBuilder(body: ClientAccessTokenRequest? = nil) -> RequestBuilder<ClientAccessTokenResponse> {
        let path = "/users/auth/clientaccesstoken"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ClientAccessTokenResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Log in user

     - parameter body: (body) User login object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersAuthLogin(body: LoginRequestModel? = nil, completion: @escaping ((_ data: LoginResponseModel?,_ error: Error?) -> Void)) {
        postUsersAuthLoginWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Log in user
     - POST /users/auth/login

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "access_token" : {
    "expires" : "2000-01-23T04:56:07.000+00:00",
    "application" : {
      "assets_url" : "assets_url",
      "environment" : "environment",
      "program_short_code" : "program_short_code",
      "client_api_base_url" : "client_api_base_url",
      "access_code" : "access_code",
      "program" : "program",
      "token" : "token"
    },
    "accesstoken_id" : "accesstoken_id",
    "user_token" : "user_token",
    "one_time" : true,
    "token_type" : "token_type",
    "master_roles" : [ "master_roles", "master_roles" ],
    "token" : "token"
  },
  "user" : {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "business_token" : "business_token",
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "authentication" : {
      "email_verified" : false,
      "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_channel" : "USER_CHANGE"
    },
    "honorific" : "honorific",
    "zip" : "zip",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : false,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token",
    "status" : "UNVERIFIED"
  }
}}]
     - parameter body: (body) User login object (optional)

     - returns: RequestBuilder<LoginResponseModel> 
     */
    open class func postUsersAuthLoginWithRequestBuilder(body: LoginRequestModel? = nil) -> RequestBuilder<LoginResponseModel> {
        let path = "/users/auth/login"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoginResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Log out user

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersAuthLogout(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersAuthLogoutWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Log out user
     - POST /users/auth/logout

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersAuthLogoutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/users/auth/logout"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create single-use token

     - parameter body: (body) One-time object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersAuthOnetime(body: OneTimeRequestModel? = nil, completion: @escaping ((_ data: AccessTokenResponse?,_ error: Error?) -> Void)) {
        postUsersAuthOnetimeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create single-use token
     - POST /users/auth/onetime

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "application" : {
    "assets_url" : "assets_url",
    "environment" : "environment",
    "program_short_code" : "program_short_code",
    "client_api_base_url" : "client_api_base_url",
    "access_code" : "access_code",
    "program" : "program",
    "token" : "token"
  },
  "accesstoken_id" : "accesstoken_id",
  "user_token" : "user_token",
  "one_time" : true,
  "token_type" : "token_type",
  "master_roles" : [ "master_roles", "master_roles" ],
  "token" : "token"
}}]
     - parameter body: (body) One-time object (optional)

     - returns: RequestBuilder<AccessTokenResponse> 
     */
    open class func postUsersAuthOnetimeWithRequestBuilder(body: OneTimeRequestModel? = nil) -> RequestBuilder<AccessTokenResponse> {
        let path = "/users/auth/onetime"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccessTokenResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request user password reset token

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersAuthResetpassword(body: ResetUserPasswordEmailModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersAuthResetpasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request user password reset token
     - POST /users/auth/resetpassword

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersAuthResetpasswordWithRequestBuilder(body: ResetUserPasswordEmailModel? = nil) -> RequestBuilder<Void> {
        let path = "/users/auth/resetpassword"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Reset user password

     - parameter token: (path) Password reset token generated using the &#x60;POST /users/auth/resetpassword&#x60; operation. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersAuthResetpasswordToken(token: String, body: ResetUserPasswordModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersAuthResetpasswordTokenWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reset user password
     - POST /users/auth/resetpassword/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - parameter token: (path) Password reset token generated using the &#x60;POST /users/auth/resetpassword&#x60; operation. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersAuthResetpasswordTokenWithRequestBuilder(token: String, body: ResetUserPasswordModel? = nil) -> RequestBuilder<Void> {
        var path = "/users/auth/resetpassword/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request email verification token

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersAuthVerifyemail(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersAuthVerifyemailWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request email verification token
     - POST /users/auth/verifyemail

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersAuthVerifyemailWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/users/auth/verifyemail"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Verify email address

     - parameter token: (path) Email verification token generated using the &#x60;POST /users/auth/verifyemail&#x60; operation. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersAuthVerifyemailToken(token: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersAuthVerifyemailTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Verify email address
     - POST /users/auth/verifyemail/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - parameter token: (path) Email verification token generated using the &#x60;POST /users/auth/verifyemail&#x60; operation. 

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersAuthVerifyemailTokenWithRequestBuilder(token: String) -> RequestBuilder<Void> {
        var path = "/users/auth/verifyemail/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Search users

     - parameter body: (body)  (optional)
     - parameter count: (query) Number of user resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter searchType: (query) Search type. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersLookup(body: UserCardHolderSearchModel? = nil, count: Int? = nil, startIndex: Int? = nil, searchType: String? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: UserCardHolderListResponse?,_ error: Error?) -> Void)) {
        postUsersLookupWithRequestBuilder(body: body, count: count, startIndex: startIndex, searchType: searchType, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search users
     - POST /users/lookup

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "honorific" : "honorific",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : true,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token"
  }, {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "honorific" : "honorific",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : true,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter body: (body)  (optional)
     - parameter count: (query) Number of user resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter searchType: (query) Search type. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<UserCardHolderListResponse> 
     */
    open class func postUsersLookupWithRequestBuilder(body: UserCardHolderSearchModel? = nil, count: Int? = nil, startIndex: Int? = nil, searchType: String? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<UserCardHolderListResponse> {
        let path = "/users/lookup"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "search_type": searchType, 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<UserCardHolderListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update user

     - parameter body: (body) User object 
     - parameter token: (path) Unique identifier of the user resource you want to update. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUsersToken(body: UserCardHolderUpdateModel, token: String, completion: @escaping ((_ data: CardHolderModel?,_ error: Error?) -> Void)) {
        putUsersTokenWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update user
     - PUT /users/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "metadata" : {
    "key" : "metadata"
  },
  "notes" : "notes",
  "gender" : "F",
  "city" : "city",
  "birth_date" : "birth_date",
  "account_holder_group_token" : "account_holder_group_token",
  "ssn" : "ssn",
  "id_card_expiration_date" : "id_card_expiration_date",
  "password" : "password",
  "company" : "company",
  "state" : "state",
  "first_name" : "first_name",
  "email" : "email",
  "honorific" : "honorific",
  "address2" : "address2",
  "passport_expiration_date" : "passport_expiration_date",
  "address1" : "address1",
  "active" : true,
  "last_name" : "last_name",
  "ip_address" : "ip_address",
  "middle_name" : "middle_name",
  "corporate_card_holder" : false,
  "identifications" : [ {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  }, {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  } ],
  "token" : "token",
  "nationality" : "nationality",
  "phone" : "phone",
  "passport_number" : "passport_number",
  "id_card_number" : "id_card_number",
  "postal_code" : "postal_code",
  "uses_parent_account" : false,
  "parent_token" : "parent_token"
}}]
     - parameter body: (body) User object 
     - parameter token: (path) Unique identifier of the user resource you want to update. 

     - returns: RequestBuilder<CardHolderModel> 
     */
    open class func putUsersTokenWithRequestBuilder(body: UserCardHolderUpdateModel, token: String) -> RequestBuilder<CardHolderModel> {
        var path = "/users/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CardHolderModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
