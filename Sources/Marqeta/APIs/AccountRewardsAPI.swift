//
// AccountRewardsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AccountRewardsAPI {
    /**
     Create account reward

     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to create a reward.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createReward(body: RewardCreateReq, accountToken: String, completion: @escaping ((_ data: RewardResponse?,_ error: Error?) -> Void)) {
        createRewardWithRequestBuilder(body: body, accountToken: accountToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create account reward
     - POST /credit/accounts/{account_token}/rewards

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.08008281904610115,
  "method" : "PERCENTAGE",
  "account_token" : "account_token",
  "description" : "description",
  "type" : "AUTO_CASH_BACK",
  "applied_to_amount" : 6.027456183070403,
  "value" : 1.4658129805029452,
  "currency_code" : "USD",
  "token" : "token"
}}]
     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to create a reward.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 

     - returns: RequestBuilder<RewardResponse> 
     */
    open class func createRewardWithRequestBuilder(body: RewardCreateReq, accountToken: String) -> RequestBuilder<RewardResponse> {
        var path = "/credit/accounts/{account_token}/rewards"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RewardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
