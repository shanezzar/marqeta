//
// BundlesBetaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BundlesBetaAPI {
    /**
     Clone bundle

     - parameter token: (path) The unique identifier of the bundle to clone.  Send a &#x60;GET&#x60; request to &#x60;/bundles&#x60; to retrieve existing bundle tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cloneBundle(token: String, completion: @escaping ((_ data: BundleResponse?,_ error: Error?) -> Void)) {
        cloneBundleWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clone bundle
     - POST /credit/bundles/{token}/clone

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "offer_policy_token" : "offer_policy_token",
  "apr_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "purchases" : {
      "external_token" : "external_token",
      "tiers" : [ {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      }, {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      } ],
      "name" : "name"
    },
    "effective_date" : "2000-01-23",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "apr_policy_token" : "apr_policy_token",
  "fee_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "account" : {
      "late_payment" : {
        "default_value" : 7.386281948385884,
        "default_method" : "FLAT"
      }
    },
    "token" : "token"
  },
  "description" : "description",
  "offer_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "reward_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "rules" : [ {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    }, {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    } ],
    "token" : "token"
  },
  "token" : "token",
  "credit_product_policy_token" : "credit_product_policy_token",
  "credit_product_policy_detail" : {
    "card_products" : [ {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    }, {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    } ],
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "interest_calculation" : {
      "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
      "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
      "application_of_credits" : {
        "cycle_type" : "BEGINNING_REVOLVING",
        "day" : 7
      },
      "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
      "grace_days_application" : "NEXT_CYCLE_DATE",
      "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
      "minimum_interest" : 7.061401241503038E11,
      "day_count" : "ACTUAL"
    },
    "payments" : {
      "due_day" : 31,
      "billing_cycle_day" : 1,
      "allocation_order" : [ "INTEREST", "INTEREST" ],
      "min_payment_calculation" : {
        "min_payment_flat_amount" : 2.027123023002322,
        "include_overlimit_amount" : true,
        "min_payment_percentage" : {
          "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
          "include_interest_charged" : true,
          "percentage_of_balance" : 41.45613884275906
        },
        "include_past_due_amount" : true
      }
    },
    "usage" : [ "PURCHASE", "PURCHASE" ],
    "description" : "description",
    "classification" : "CONSUMER",
    "currency_code" : "USD",
    "token" : "token",
    "product_sub_type" : "CREDIT_CARD",
    "credit_line" : {
      "min" : 5.637376656633271E11,
      "max" : 5.962133916683123E11
    },
    "product_type" : "REVOLVING",
    "name" : "name"
  },
  "fee_policy_token" : "fee_policy_token",
  "reward_policy_token" : "reward_policy_token",
  "name" : "name",
  "document_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "account_statement" : {
      "template_token" : "template_token",
      "template_urls" : {
        "html" : "html"
      },
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "benefits_disclosure_premium" : {
      "asset_urls" : {
        "pdf" : "pdf",
        "png" : "png",
        "html" : "html"
      },
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "asset_token" : "asset_token"
    },
    "token" : "token",
    "rewards_disclosure" : {
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "template_token" : "template_token",
      "asset_token" : "asset_token",
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "name" : "name"
  },
  "document_policy_token" : "document_policy_token",
  "status" : "DRAFT"
}}]
     - parameter token: (path) The unique identifier of the bundle to clone.  Send a &#x60;GET&#x60; request to &#x60;/bundles&#x60; to retrieve existing bundle tokens. 

     - returns: RequestBuilder<BundleResponse> 
     */
    open class func cloneBundleWithRequestBuilder(token: String) -> RequestBuilder<BundleResponse> {
        var path = "/credit/bundles/{token}/clone"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BundleResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create bundle

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createBundle(body: BundleCreateReq, completion: @escaping ((_ data: BundleResponse?,_ error: Error?) -> Void)) {
        createBundleWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create bundle
     - POST /credit/bundles

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "offer_policy_token" : "offer_policy_token",
  "apr_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "purchases" : {
      "external_token" : "external_token",
      "tiers" : [ {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      }, {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      } ],
      "name" : "name"
    },
    "effective_date" : "2000-01-23",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "apr_policy_token" : "apr_policy_token",
  "fee_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "account" : {
      "late_payment" : {
        "default_value" : 7.386281948385884,
        "default_method" : "FLAT"
      }
    },
    "token" : "token"
  },
  "description" : "description",
  "offer_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "reward_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "rules" : [ {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    }, {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    } ],
    "token" : "token"
  },
  "token" : "token",
  "credit_product_policy_token" : "credit_product_policy_token",
  "credit_product_policy_detail" : {
    "card_products" : [ {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    }, {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    } ],
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "interest_calculation" : {
      "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
      "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
      "application_of_credits" : {
        "cycle_type" : "BEGINNING_REVOLVING",
        "day" : 7
      },
      "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
      "grace_days_application" : "NEXT_CYCLE_DATE",
      "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
      "minimum_interest" : 7.061401241503038E11,
      "day_count" : "ACTUAL"
    },
    "payments" : {
      "due_day" : 31,
      "billing_cycle_day" : 1,
      "allocation_order" : [ "INTEREST", "INTEREST" ],
      "min_payment_calculation" : {
        "min_payment_flat_amount" : 2.027123023002322,
        "include_overlimit_amount" : true,
        "min_payment_percentage" : {
          "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
          "include_interest_charged" : true,
          "percentage_of_balance" : 41.45613884275906
        },
        "include_past_due_amount" : true
      }
    },
    "usage" : [ "PURCHASE", "PURCHASE" ],
    "description" : "description",
    "classification" : "CONSUMER",
    "currency_code" : "USD",
    "token" : "token",
    "product_sub_type" : "CREDIT_CARD",
    "credit_line" : {
      "min" : 5.637376656633271E11,
      "max" : 5.962133916683123E11
    },
    "product_type" : "REVOLVING",
    "name" : "name"
  },
  "fee_policy_token" : "fee_policy_token",
  "reward_policy_token" : "reward_policy_token",
  "name" : "name",
  "document_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "account_statement" : {
      "template_token" : "template_token",
      "template_urls" : {
        "html" : "html"
      },
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "benefits_disclosure_premium" : {
      "asset_urls" : {
        "pdf" : "pdf",
        "png" : "png",
        "html" : "html"
      },
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "asset_token" : "asset_token"
    },
    "token" : "token",
    "rewards_disclosure" : {
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "template_token" : "template_token",
      "asset_token" : "asset_token",
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "name" : "name"
  },
  "document_policy_token" : "document_policy_token",
  "status" : "DRAFT"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<BundleResponse> 
     */
    open class func createBundleWithRequestBuilder(body: BundleCreateReq) -> RequestBuilder<BundleResponse> {
        let path = "/credit/bundles"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BundleResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listBundles: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List bundles

     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter status: (query) An array of statuses by which to filter bundles. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listBundles(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listBundles? = nil, status: [BundleResourceStatus]? = nil, completion: @escaping ((_ data: BundleResponsePage?,_ error: Error?) -> Void)) {
        listBundlesWithRequestBuilder(count: count, startIndex: startIndex, sortBy: sortBy, status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List bundles
     - GET /credit/bundles

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "offer_policy_token" : "offer_policy_token",
    "apr_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "purchases" : {
        "external_token" : "external_token",
        "tiers" : [ {
          "apr" : 6.027456183070403,
          "margin_rate" : 1.4658129805029452
        }, {
          "apr" : 6.027456183070403,
          "margin_rate" : 1.4658129805029452
        } ],
        "name" : "name"
      },
      "effective_date" : "2000-01-23",
      "name" : "name",
      "description" : "description",
      "token" : "token"
    },
    "apr_policy_token" : "apr_policy_token",
    "fee_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "account" : {
        "late_payment" : {
          "default_value" : 7.386281948385884,
          "default_method" : "FLAT"
        }
      },
      "token" : "token"
    },
    "description" : "description",
    "offer_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "token" : "token"
    },
    "reward_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "rules" : [ {
        "filters" : {
          "amount" : {
            "greater_than" : 0.12315135367772556,
            "less_than" : 0.10246457001441578
          },
          "mcc_dynamic" : {
            "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
          }
        },
        "type" : "CASHBACK",
        "outcome" : {
          "percentage" : 0.684685269835264,
          "max_amount" : 0.14894159098541704
        }
      }, {
        "filters" : {
          "amount" : {
            "greater_than" : 0.12315135367772556,
            "less_than" : 0.10246457001441578
          },
          "mcc_dynamic" : {
            "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
          }
        },
        "type" : "CASHBACK",
        "outcome" : {
          "percentage" : 0.684685269835264,
          "max_amount" : 0.14894159098541704
        }
      } ],
      "token" : "token"
    },
    "token" : "token",
    "credit_product_policy_token" : "credit_product_policy_token",
    "credit_product_policy_detail" : {
      "card_products" : [ {
        "level" : "PREMIUM",
        "network" : "VISA",
        "token" : "token"
      }, {
        "level" : "PREMIUM",
        "network" : "VISA",
        "token" : "token"
      } ],
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "interest_calculation" : {
        "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
        "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
        "application_of_credits" : {
          "cycle_type" : "BEGINNING_REVOLVING",
          "day" : 7
        },
        "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
        "grace_days_application" : "NEXT_CYCLE_DATE",
        "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
        "minimum_interest" : 7.061401241503038E11,
        "day_count" : "ACTUAL"
      },
      "payments" : {
        "due_day" : 31,
        "billing_cycle_day" : 1,
        "allocation_order" : [ "INTEREST", "INTEREST" ],
        "min_payment_calculation" : {
          "min_payment_flat_amount" : 2.027123023002322,
          "include_overlimit_amount" : true,
          "min_payment_percentage" : {
            "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
            "include_interest_charged" : true,
            "percentage_of_balance" : 41.45613884275906
          },
          "include_past_due_amount" : true
        }
      },
      "usage" : [ "PURCHASE", "PURCHASE" ],
      "description" : "description",
      "classification" : "CONSUMER",
      "currency_code" : "USD",
      "token" : "token",
      "product_sub_type" : "CREDIT_CARD",
      "credit_line" : {
        "min" : 5.637376656633271E11,
        "max" : 5.962133916683123E11
      },
      "product_type" : "REVOLVING",
      "name" : "name"
    },
    "fee_policy_token" : "fee_policy_token",
    "reward_policy_token" : "reward_policy_token",
    "name" : "name",
    "document_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "account_statement" : {
        "template_token" : "template_token",
        "template_urls" : {
          "html" : "html"
        },
        "template_created_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "benefits_disclosure_premium" : {
        "asset_urls" : {
          "pdf" : "pdf",
          "png" : "png",
          "html" : "html"
        },
        "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
        "asset_token" : "asset_token"
      },
      "token" : "token",
      "rewards_disclosure" : {
        "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
        "template_token" : "template_token",
        "asset_token" : "asset_token",
        "template_created_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "name" : "name"
    },
    "document_policy_token" : "document_policy_token",
    "status" : "DRAFT"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "offer_policy_token" : "offer_policy_token",
    "apr_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "purchases" : {
        "external_token" : "external_token",
        "tiers" : [ {
          "apr" : 6.027456183070403,
          "margin_rate" : 1.4658129805029452
        }, {
          "apr" : 6.027456183070403,
          "margin_rate" : 1.4658129805029452
        } ],
        "name" : "name"
      },
      "effective_date" : "2000-01-23",
      "name" : "name",
      "description" : "description",
      "token" : "token"
    },
    "apr_policy_token" : "apr_policy_token",
    "fee_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "account" : {
        "late_payment" : {
          "default_value" : 7.386281948385884,
          "default_method" : "FLAT"
        }
      },
      "token" : "token"
    },
    "description" : "description",
    "offer_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "token" : "token"
    },
    "reward_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "rules" : [ {
        "filters" : {
          "amount" : {
            "greater_than" : 0.12315135367772556,
            "less_than" : 0.10246457001441578
          },
          "mcc_dynamic" : {
            "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
          }
        },
        "type" : "CASHBACK",
        "outcome" : {
          "percentage" : 0.684685269835264,
          "max_amount" : 0.14894159098541704
        }
      }, {
        "filters" : {
          "amount" : {
            "greater_than" : 0.12315135367772556,
            "less_than" : 0.10246457001441578
          },
          "mcc_dynamic" : {
            "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
          }
        },
        "type" : "CASHBACK",
        "outcome" : {
          "percentage" : 0.684685269835264,
          "max_amount" : 0.14894159098541704
        }
      } ],
      "token" : "token"
    },
    "token" : "token",
    "credit_product_policy_token" : "credit_product_policy_token",
    "credit_product_policy_detail" : {
      "card_products" : [ {
        "level" : "PREMIUM",
        "network" : "VISA",
        "token" : "token"
      }, {
        "level" : "PREMIUM",
        "network" : "VISA",
        "token" : "token"
      } ],
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "interest_calculation" : {
        "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
        "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
        "application_of_credits" : {
          "cycle_type" : "BEGINNING_REVOLVING",
          "day" : 7
        },
        "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
        "grace_days_application" : "NEXT_CYCLE_DATE",
        "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
        "minimum_interest" : 7.061401241503038E11,
        "day_count" : "ACTUAL"
      },
      "payments" : {
        "due_day" : 31,
        "billing_cycle_day" : 1,
        "allocation_order" : [ "INTEREST", "INTEREST" ],
        "min_payment_calculation" : {
          "min_payment_flat_amount" : 2.027123023002322,
          "include_overlimit_amount" : true,
          "min_payment_percentage" : {
            "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
            "include_interest_charged" : true,
            "percentage_of_balance" : 41.45613884275906
          },
          "include_past_due_amount" : true
        }
      },
      "usage" : [ "PURCHASE", "PURCHASE" ],
      "description" : "description",
      "classification" : "CONSUMER",
      "currency_code" : "USD",
      "token" : "token",
      "product_sub_type" : "CREDIT_CARD",
      "credit_line" : {
        "min" : 5.637376656633271E11,
        "max" : 5.962133916683123E11
      },
      "product_type" : "REVOLVING",
      "name" : "name"
    },
    "fee_policy_token" : "fee_policy_token",
    "reward_policy_token" : "reward_policy_token",
    "name" : "name",
    "document_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "account_statement" : {
        "template_token" : "template_token",
        "template_urls" : {
          "html" : "html"
        },
        "template_created_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "benefits_disclosure_premium" : {
        "asset_urls" : {
          "pdf" : "pdf",
          "png" : "png",
          "html" : "html"
        },
        "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
        "asset_token" : "asset_token"
      },
      "token" : "token",
      "rewards_disclosure" : {
        "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
        "template_token" : "template_token",
        "asset_token" : "asset_token",
        "template_created_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "name" : "name"
    },
    "document_policy_token" : "document_policy_token",
    "status" : "DRAFT"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 7
}}]
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter status: (query) An array of statuses by which to filter bundles. (optional)

     - returns: RequestBuilder<BundleResponsePage> 
     */
    open class func listBundlesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listBundles? = nil, status: [BundleResourceStatus]? = nil) -> RequestBuilder<BundleResponsePage> {
        let path = "/credit/bundles"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue, 
                        "status": status
        ])


        let requestBuilder: RequestBuilder<BundleResponsePage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listRelatedBundles: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List related bundles

     - parameter token: (path) The unique identifier of the parent product bundle.  Send a &#x60;GET&#x60; request to &#x60;/bundles&#x60; to retrieve existing product bundles tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter status: (query) An array of statuses by which to filter bundles. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listRelatedBundles(token: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listRelatedBundles? = nil, status: [BundleResourceStatus]? = nil, completion: @escaping ((_ data: BundleResponsePage?,_ error: Error?) -> Void)) {
        listRelatedBundlesWithRequestBuilder(token: token, count: count, startIndex: startIndex, sortBy: sortBy, status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List related bundles
     - GET /credit/bundles/{token}/lineage

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "offer_policy_token" : "offer_policy_token",
    "apr_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "purchases" : {
        "external_token" : "external_token",
        "tiers" : [ {
          "apr" : 6.027456183070403,
          "margin_rate" : 1.4658129805029452
        }, {
          "apr" : 6.027456183070403,
          "margin_rate" : 1.4658129805029452
        } ],
        "name" : "name"
      },
      "effective_date" : "2000-01-23",
      "name" : "name",
      "description" : "description",
      "token" : "token"
    },
    "apr_policy_token" : "apr_policy_token",
    "fee_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "account" : {
        "late_payment" : {
          "default_value" : 7.386281948385884,
          "default_method" : "FLAT"
        }
      },
      "token" : "token"
    },
    "description" : "description",
    "offer_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "token" : "token"
    },
    "reward_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "rules" : [ {
        "filters" : {
          "amount" : {
            "greater_than" : 0.12315135367772556,
            "less_than" : 0.10246457001441578
          },
          "mcc_dynamic" : {
            "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
          }
        },
        "type" : "CASHBACK",
        "outcome" : {
          "percentage" : 0.684685269835264,
          "max_amount" : 0.14894159098541704
        }
      }, {
        "filters" : {
          "amount" : {
            "greater_than" : 0.12315135367772556,
            "less_than" : 0.10246457001441578
          },
          "mcc_dynamic" : {
            "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
          }
        },
        "type" : "CASHBACK",
        "outcome" : {
          "percentage" : 0.684685269835264,
          "max_amount" : 0.14894159098541704
        }
      } ],
      "token" : "token"
    },
    "token" : "token",
    "credit_product_policy_token" : "credit_product_policy_token",
    "credit_product_policy_detail" : {
      "card_products" : [ {
        "level" : "PREMIUM",
        "network" : "VISA",
        "token" : "token"
      }, {
        "level" : "PREMIUM",
        "network" : "VISA",
        "token" : "token"
      } ],
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "interest_calculation" : {
        "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
        "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
        "application_of_credits" : {
          "cycle_type" : "BEGINNING_REVOLVING",
          "day" : 7
        },
        "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
        "grace_days_application" : "NEXT_CYCLE_DATE",
        "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
        "minimum_interest" : 7.061401241503038E11,
        "day_count" : "ACTUAL"
      },
      "payments" : {
        "due_day" : 31,
        "billing_cycle_day" : 1,
        "allocation_order" : [ "INTEREST", "INTEREST" ],
        "min_payment_calculation" : {
          "min_payment_flat_amount" : 2.027123023002322,
          "include_overlimit_amount" : true,
          "min_payment_percentage" : {
            "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
            "include_interest_charged" : true,
            "percentage_of_balance" : 41.45613884275906
          },
          "include_past_due_amount" : true
        }
      },
      "usage" : [ "PURCHASE", "PURCHASE" ],
      "description" : "description",
      "classification" : "CONSUMER",
      "currency_code" : "USD",
      "token" : "token",
      "product_sub_type" : "CREDIT_CARD",
      "credit_line" : {
        "min" : 5.637376656633271E11,
        "max" : 5.962133916683123E11
      },
      "product_type" : "REVOLVING",
      "name" : "name"
    },
    "fee_policy_token" : "fee_policy_token",
    "reward_policy_token" : "reward_policy_token",
    "name" : "name",
    "document_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "account_statement" : {
        "template_token" : "template_token",
        "template_urls" : {
          "html" : "html"
        },
        "template_created_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "benefits_disclosure_premium" : {
        "asset_urls" : {
          "pdf" : "pdf",
          "png" : "png",
          "html" : "html"
        },
        "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
        "asset_token" : "asset_token"
      },
      "token" : "token",
      "rewards_disclosure" : {
        "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
        "template_token" : "template_token",
        "asset_token" : "asset_token",
        "template_created_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "name" : "name"
    },
    "document_policy_token" : "document_policy_token",
    "status" : "DRAFT"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "offer_policy_token" : "offer_policy_token",
    "apr_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "purchases" : {
        "external_token" : "external_token",
        "tiers" : [ {
          "apr" : 6.027456183070403,
          "margin_rate" : 1.4658129805029452
        }, {
          "apr" : 6.027456183070403,
          "margin_rate" : 1.4658129805029452
        } ],
        "name" : "name"
      },
      "effective_date" : "2000-01-23",
      "name" : "name",
      "description" : "description",
      "token" : "token"
    },
    "apr_policy_token" : "apr_policy_token",
    "fee_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "account" : {
        "late_payment" : {
          "default_value" : 7.386281948385884,
          "default_method" : "FLAT"
        }
      },
      "token" : "token"
    },
    "description" : "description",
    "offer_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "token" : "token"
    },
    "reward_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "description" : "description",
      "rules" : [ {
        "filters" : {
          "amount" : {
            "greater_than" : 0.12315135367772556,
            "less_than" : 0.10246457001441578
          },
          "mcc_dynamic" : {
            "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
          }
        },
        "type" : "CASHBACK",
        "outcome" : {
          "percentage" : 0.684685269835264,
          "max_amount" : 0.14894159098541704
        }
      }, {
        "filters" : {
          "amount" : {
            "greater_than" : 0.12315135367772556,
            "less_than" : 0.10246457001441578
          },
          "mcc_dynamic" : {
            "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
          }
        },
        "type" : "CASHBACK",
        "outcome" : {
          "percentage" : 0.684685269835264,
          "max_amount" : 0.14894159098541704
        }
      } ],
      "token" : "token"
    },
    "token" : "token",
    "credit_product_policy_token" : "credit_product_policy_token",
    "credit_product_policy_detail" : {
      "card_products" : [ {
        "level" : "PREMIUM",
        "network" : "VISA",
        "token" : "token"
      }, {
        "level" : "PREMIUM",
        "network" : "VISA",
        "token" : "token"
      } ],
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "interest_calculation" : {
        "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
        "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
        "application_of_credits" : {
          "cycle_type" : "BEGINNING_REVOLVING",
          "day" : 7
        },
        "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
        "grace_days_application" : "NEXT_CYCLE_DATE",
        "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
        "minimum_interest" : 7.061401241503038E11,
        "day_count" : "ACTUAL"
      },
      "payments" : {
        "due_day" : 31,
        "billing_cycle_day" : 1,
        "allocation_order" : [ "INTEREST", "INTEREST" ],
        "min_payment_calculation" : {
          "min_payment_flat_amount" : 2.027123023002322,
          "include_overlimit_amount" : true,
          "min_payment_percentage" : {
            "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
            "include_interest_charged" : true,
            "percentage_of_balance" : 41.45613884275906
          },
          "include_past_due_amount" : true
        }
      },
      "usage" : [ "PURCHASE", "PURCHASE" ],
      "description" : "description",
      "classification" : "CONSUMER",
      "currency_code" : "USD",
      "token" : "token",
      "product_sub_type" : "CREDIT_CARD",
      "credit_line" : {
        "min" : 5.637376656633271E11,
        "max" : 5.962133916683123E11
      },
      "product_type" : "REVOLVING",
      "name" : "name"
    },
    "fee_policy_token" : "fee_policy_token",
    "reward_policy_token" : "reward_policy_token",
    "name" : "name",
    "document_policy_detail" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "updated_time" : "2000-01-23T04:56:07.000+00:00",
      "account_statement" : {
        "template_token" : "template_token",
        "template_urls" : {
          "html" : "html"
        },
        "template_created_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "benefits_disclosure_premium" : {
        "asset_urls" : {
          "pdf" : "pdf",
          "png" : "png",
          "html" : "html"
        },
        "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
        "asset_token" : "asset_token"
      },
      "token" : "token",
      "rewards_disclosure" : {
        "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
        "template_token" : "template_token",
        "asset_token" : "asset_token",
        "template_created_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "name" : "name"
    },
    "document_policy_token" : "document_policy_token",
    "status" : "DRAFT"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 7
}}]
     - parameter token: (path) The unique identifier of the parent product bundle.  Send a &#x60;GET&#x60; request to &#x60;/bundles&#x60; to retrieve existing product bundles tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter status: (query) An array of statuses by which to filter bundles. (optional)

     - returns: RequestBuilder<BundleResponsePage> 
     */
    open class func listRelatedBundlesWithRequestBuilder(token: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listRelatedBundles? = nil, status: [BundleResourceStatus]? = nil) -> RequestBuilder<BundleResponsePage> {
        var path = "/credit/bundles/{token}/lineage"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue, 
                        "status": status
        ])


        let requestBuilder: RequestBuilder<BundleResponsePage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Promote bundle

     - parameter token: (path) The unique identifier of the bundle to promote.  Send a &#x60;GET&#x60; request to &#x60;/bundles&#x60; to retrieve existing bundle tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func promoteBundle(token: String, completion: @escaping ((_ data: BundleResponse?,_ error: Error?) -> Void)) {
        promoteBundleWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Promote bundle
     - PUT /credit/bundles/{token}/promote

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "offer_policy_token" : "offer_policy_token",
  "apr_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "purchases" : {
      "external_token" : "external_token",
      "tiers" : [ {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      }, {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      } ],
      "name" : "name"
    },
    "effective_date" : "2000-01-23",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "apr_policy_token" : "apr_policy_token",
  "fee_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "account" : {
      "late_payment" : {
        "default_value" : 7.386281948385884,
        "default_method" : "FLAT"
      }
    },
    "token" : "token"
  },
  "description" : "description",
  "offer_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "reward_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "rules" : [ {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    }, {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    } ],
    "token" : "token"
  },
  "token" : "token",
  "credit_product_policy_token" : "credit_product_policy_token",
  "credit_product_policy_detail" : {
    "card_products" : [ {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    }, {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    } ],
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "interest_calculation" : {
      "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
      "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
      "application_of_credits" : {
        "cycle_type" : "BEGINNING_REVOLVING",
        "day" : 7
      },
      "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
      "grace_days_application" : "NEXT_CYCLE_DATE",
      "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
      "minimum_interest" : 7.061401241503038E11,
      "day_count" : "ACTUAL"
    },
    "payments" : {
      "due_day" : 31,
      "billing_cycle_day" : 1,
      "allocation_order" : [ "INTEREST", "INTEREST" ],
      "min_payment_calculation" : {
        "min_payment_flat_amount" : 2.027123023002322,
        "include_overlimit_amount" : true,
        "min_payment_percentage" : {
          "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
          "include_interest_charged" : true,
          "percentage_of_balance" : 41.45613884275906
        },
        "include_past_due_amount" : true
      }
    },
    "usage" : [ "PURCHASE", "PURCHASE" ],
    "description" : "description",
    "classification" : "CONSUMER",
    "currency_code" : "USD",
    "token" : "token",
    "product_sub_type" : "CREDIT_CARD",
    "credit_line" : {
      "min" : 5.637376656633271E11,
      "max" : 5.962133916683123E11
    },
    "product_type" : "REVOLVING",
    "name" : "name"
  },
  "fee_policy_token" : "fee_policy_token",
  "reward_policy_token" : "reward_policy_token",
  "name" : "name",
  "document_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "account_statement" : {
      "template_token" : "template_token",
      "template_urls" : {
        "html" : "html"
      },
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "benefits_disclosure_premium" : {
      "asset_urls" : {
        "pdf" : "pdf",
        "png" : "png",
        "html" : "html"
      },
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "asset_token" : "asset_token"
    },
    "token" : "token",
    "rewards_disclosure" : {
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "template_token" : "template_token",
      "asset_token" : "asset_token",
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "name" : "name"
  },
  "document_policy_token" : "document_policy_token",
  "status" : "DRAFT"
}}]
     - parameter token: (path) The unique identifier of the bundle to promote.  Send a &#x60;GET&#x60; request to &#x60;/bundles&#x60; to retrieve existing bundle tokens. 

     - returns: RequestBuilder<BundleResponse> 
     */
    open class func promoteBundleWithRequestBuilder(token: String) -> RequestBuilder<BundleResponse> {
        var path = "/credit/bundles/{token}/promote"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BundleResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve bundle

     - parameter token: (path) The unique identifier of the bundle to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/bundles&#x60; to retrieve existing  tokens. 
     - parameter expandObjects: (query) Embeds the associated object of the specified type into the response. For more, see &lt;&lt;/core-api/object-expansion, object expansion&gt;&gt;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveBundle(token: String, expandObjects: [PolicyType]? = nil, completion: @escaping ((_ data: BundleResponse?,_ error: Error?) -> Void)) {
        retrieveBundleWithRequestBuilder(token: token, expandObjects: expandObjects).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve bundle
     - GET /credit/bundles/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "offer_policy_token" : "offer_policy_token",
  "apr_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "purchases" : {
      "external_token" : "external_token",
      "tiers" : [ {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      }, {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      } ],
      "name" : "name"
    },
    "effective_date" : "2000-01-23",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "apr_policy_token" : "apr_policy_token",
  "fee_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "account" : {
      "late_payment" : {
        "default_value" : 7.386281948385884,
        "default_method" : "FLAT"
      }
    },
    "token" : "token"
  },
  "description" : "description",
  "offer_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "reward_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "rules" : [ {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    }, {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    } ],
    "token" : "token"
  },
  "token" : "token",
  "credit_product_policy_token" : "credit_product_policy_token",
  "credit_product_policy_detail" : {
    "card_products" : [ {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    }, {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    } ],
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "interest_calculation" : {
      "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
      "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
      "application_of_credits" : {
        "cycle_type" : "BEGINNING_REVOLVING",
        "day" : 7
      },
      "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
      "grace_days_application" : "NEXT_CYCLE_DATE",
      "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
      "minimum_interest" : 7.061401241503038E11,
      "day_count" : "ACTUAL"
    },
    "payments" : {
      "due_day" : 31,
      "billing_cycle_day" : 1,
      "allocation_order" : [ "INTEREST", "INTEREST" ],
      "min_payment_calculation" : {
        "min_payment_flat_amount" : 2.027123023002322,
        "include_overlimit_amount" : true,
        "min_payment_percentage" : {
          "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
          "include_interest_charged" : true,
          "percentage_of_balance" : 41.45613884275906
        },
        "include_past_due_amount" : true
      }
    },
    "usage" : [ "PURCHASE", "PURCHASE" ],
    "description" : "description",
    "classification" : "CONSUMER",
    "currency_code" : "USD",
    "token" : "token",
    "product_sub_type" : "CREDIT_CARD",
    "credit_line" : {
      "min" : 5.637376656633271E11,
      "max" : 5.962133916683123E11
    },
    "product_type" : "REVOLVING",
    "name" : "name"
  },
  "fee_policy_token" : "fee_policy_token",
  "reward_policy_token" : "reward_policy_token",
  "name" : "name",
  "document_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "account_statement" : {
      "template_token" : "template_token",
      "template_urls" : {
        "html" : "html"
      },
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "benefits_disclosure_premium" : {
      "asset_urls" : {
        "pdf" : "pdf",
        "png" : "png",
        "html" : "html"
      },
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "asset_token" : "asset_token"
    },
    "token" : "token",
    "rewards_disclosure" : {
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "template_token" : "template_token",
      "asset_token" : "asset_token",
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "name" : "name"
  },
  "document_policy_token" : "document_policy_token",
  "status" : "DRAFT"
}}]
     - parameter token: (path) The unique identifier of the bundle to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/bundles&#x60; to retrieve existing  tokens. 
     - parameter expandObjects: (query) Embeds the associated object of the specified type into the response. For more, see &lt;&lt;/core-api/object-expansion, object expansion&gt;&gt;. (optional)

     - returns: RequestBuilder<BundleResponse> 
     */
    open class func retrieveBundleWithRequestBuilder(token: String, expandObjects: [PolicyType]? = nil) -> RequestBuilder<BundleResponse> {
        var path = "/credit/bundles/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "expand_objects": expandObjects
        ])


        let requestBuilder: RequestBuilder<BundleResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Transition a bundle

     - parameter body: (body)  
     - parameter token: (path) Token of the bundle whose status you want to transition.  Send a &#x60;GET&#x60; request to &#x60;/credit/bundles&#x60; to retrieve existing  tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transitionBundle(body: BundleTransitionReq, token: String, completion: @escaping ((_ data: BundleTransitionResponse?,_ error: Error?) -> Void)) {
        transitionBundleWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Transition a bundle
     - POST /credit/bundles/{token}/transitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "bundle_token" : "bundle_token",
  "original_status" : "DRAFT",
  "token" : "token"
}}]
     - parameter body: (body)  
     - parameter token: (path) Token of the bundle whose status you want to transition.  Send a &#x60;GET&#x60; request to &#x60;/credit/bundles&#x60; to retrieve existing  tokens. 

     - returns: RequestBuilder<BundleTransitionResponse> 
     */
    open class func transitionBundleWithRequestBuilder(body: BundleTransitionReq, token: String) -> RequestBuilder<BundleTransitionResponse> {
        var path = "/credit/bundles/{token}/transitions"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BundleTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update bundle

     - parameter body: (body)  
     - parameter token: (path) Token of the bundle to update.  Send a &#x60;GET&#x60; request to &#x60;/credit/bundles&#x60; to retrieve existing  tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateBundle(body: BundleUpdateReq, token: String, completion: @escaping ((_ data: BundleResponse?,_ error: Error?) -> Void)) {
        updateBundleWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update bundle
     - PUT /credit/bundles/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "offer_policy_token" : "offer_policy_token",
  "apr_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "purchases" : {
      "external_token" : "external_token",
      "tiers" : [ {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      }, {
        "apr" : 6.027456183070403,
        "margin_rate" : 1.4658129805029452
      } ],
      "name" : "name"
    },
    "effective_date" : "2000-01-23",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "apr_policy_token" : "apr_policy_token",
  "fee_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "account" : {
      "late_payment" : {
        "default_value" : 7.386281948385884,
        "default_method" : "FLAT"
      }
    },
    "token" : "token"
  },
  "description" : "description",
  "offer_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "token" : "token"
  },
  "reward_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "rules" : [ {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    }, {
      "filters" : {
        "amount" : {
          "greater_than" : 0.12315135367772556,
          "less_than" : 0.10246457001441578
        },
        "mcc_dynamic" : {
          "includes" : [ "HIGHEST_SPEND", "HIGHEST_SPEND" ]
        }
      },
      "type" : "CASHBACK",
      "outcome" : {
        "percentage" : 0.684685269835264,
        "max_amount" : 0.14894159098541704
      }
    } ],
    "token" : "token"
  },
  "token" : "token",
  "credit_product_policy_token" : "credit_product_policy_token",
  "credit_product_policy_detail" : {
    "card_products" : [ {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    }, {
      "level" : "PREMIUM",
      "network" : "VISA",
      "token" : "token"
    } ],
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "interest_calculation" : {
      "interest_on_grace_reactivation" : "ACCRUE_FULL_CYCLE",
      "method" : "AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS",
      "application_of_credits" : {
        "cycle_type" : "BEGINNING_REVOLVING",
        "day" : 7
      },
      "interest_application" : [ "PRINCIPAL", "PRINCIPAL" ],
      "grace_days_application" : "NEXT_CYCLE_DATE",
      "exclude_tran_types" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
      "minimum_interest" : 7.061401241503038E11,
      "day_count" : "ACTUAL"
    },
    "payments" : {
      "due_day" : 31,
      "billing_cycle_day" : 1,
      "allocation_order" : [ "INTEREST", "INTEREST" ],
      "min_payment_calculation" : {
        "min_payment_flat_amount" : 2.027123023002322,
        "include_overlimit_amount" : true,
        "min_payment_percentage" : {
          "include_fees_charged" : [ "LATE_PAYMENT_FEE", "LATE_PAYMENT_FEE" ],
          "include_interest_charged" : true,
          "percentage_of_balance" : 41.45613884275906
        },
        "include_past_due_amount" : true
      }
    },
    "usage" : [ "PURCHASE", "PURCHASE" ],
    "description" : "description",
    "classification" : "CONSUMER",
    "currency_code" : "USD",
    "token" : "token",
    "product_sub_type" : "CREDIT_CARD",
    "credit_line" : {
      "min" : 5.637376656633271E11,
      "max" : 5.962133916683123E11
    },
    "product_type" : "REVOLVING",
    "name" : "name"
  },
  "fee_policy_token" : "fee_policy_token",
  "reward_policy_token" : "reward_policy_token",
  "name" : "name",
  "document_policy_detail" : {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "account_statement" : {
      "template_token" : "template_token",
      "template_urls" : {
        "html" : "html"
      },
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "benefits_disclosure_premium" : {
      "asset_urls" : {
        "pdf" : "pdf",
        "png" : "png",
        "html" : "html"
      },
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "asset_token" : "asset_token"
    },
    "token" : "token",
    "rewards_disclosure" : {
      "asset_created_time" : "2000-01-23T04:56:07.000+00:00",
      "template_token" : "template_token",
      "asset_token" : "asset_token",
      "template_created_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "name" : "name"
  },
  "document_policy_token" : "document_policy_token",
  "status" : "DRAFT"
}}]
     - parameter body: (body)  
     - parameter token: (path) Token of the bundle to update.  Send a &#x60;GET&#x60; request to &#x60;/credit/bundles&#x60; to retrieve existing  tokens. 

     - returns: RequestBuilder<BundleResponse> 
     */
    open class func updateBundleWithRequestBuilder(body: BundleUpdateReq, token: String) -> RequestBuilder<BundleResponse> {
        var path = "/credit/bundles/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BundleResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
