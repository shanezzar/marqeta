//
// MCCGroupsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class MCCGroupsAPI {
    /**
     List MCC groups

     - parameter mcc: (query) Returns all MCC groups that contain the specified merchant category code. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 10)
     - parameter startIndex: (query) The sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMccgroups(mcc: String? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil, completion: @escaping ((_ data: MCCGroupListResponse?,_ error: Error?) -> Void)) {
        getMccgroupsWithRequestBuilder(mcc: mcc, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List MCC groups
     - GET /mccgroups

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "mccs" : [ { }, { }, { }, { }, { }, { }, { }, { }, { }, { } ],
    "name" : "name",
    "active" : false,
    "config" : {
      "authorization_controls" : {
        "hold_increase" : {
          "type" : "AMOUNT",
          "value" : 1.4658129805029452
        },
        "hold_expiration_days" : 6
      }
    },
    "token" : "token"
  }, {
    "mccs" : [ { }, { }, { }, { }, { }, { }, { }, { }, { }, { } ],
    "name" : "name",
    "active" : false,
    "config" : {
      "authorization_controls" : {
        "hold_increase" : {
          "type" : "AMOUNT",
          "value" : 1.4658129805029452
        },
        "hold_expiration_days" : 6
      }
    },
    "token" : "token"
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 5
}}]
     - parameter mcc: (query) Returns all MCC groups that contain the specified merchant category code. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 10)
     - parameter startIndex: (query) The sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<MCCGroupListResponse> 
     */
    open class func getMccgroupsWithRequestBuilder(mcc: String? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil) -> RequestBuilder<MCCGroupListResponse> {
        let path = "/mccgroups"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "mcc": mcc, 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<MCCGroupListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve MCC group

     - parameter token: (path) Unique identifier of the MCC group. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMccgroupsToken(token: String, completion: @escaping ((_ data: MccGroupModel?,_ error: Error?) -> Void)) {
        getMccgroupsTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve MCC group
     - GET /mccgroups/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "mccs" : [ { }, { }, { }, { }, { }, { }, { }, { }, { }, { } ],
  "name" : "name",
  "active" : false,
  "config" : {
    "authorization_controls" : {
      "hold_increase" : {
        "type" : "AMOUNT",
        "value" : 1.4658129805029452
      },
      "hold_expiration_days" : 6
    }
  },
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the MCC group. 

     - returns: RequestBuilder<MccGroupModel> 
     */
    open class func getMccgroupsTokenWithRequestBuilder(token: String) -> RequestBuilder<MccGroupModel> {
        var path = "/mccgroups/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MccGroupModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create MCC group

     - parameter body: (body) MCC group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMccgroups(body: MccGroupModel, completion: @escaping ((_ data: MccGroupModel?,_ error: Error?) -> Void)) {
        postMccgroupsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create MCC group
     - POST /mccgroups

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "mccs" : [ { }, { }, { }, { }, { }, { }, { }, { }, { }, { } ],
  "name" : "name",
  "active" : false,
  "config" : {
    "authorization_controls" : {
      "hold_increase" : {
        "type" : "AMOUNT",
        "value" : 1.4658129805029452
      },
      "hold_expiration_days" : 6
    }
  },
  "token" : "token"
}}]
     - parameter body: (body) MCC group 

     - returns: RequestBuilder<MccGroupModel> 
     */
    open class func postMccgroupsWithRequestBuilder(body: MccGroupModel) -> RequestBuilder<MccGroupModel> {
        let path = "/mccgroups"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MccGroupModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update MCC group

     - parameter body: (body) MCC group 
     - parameter token: (path) The unique identifier of the MCC group. Send a &#x60;GET&#x60; request to &#x60;/mccgroups&#x60; to retrieve MCC group tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMccgroupsToken(body: MccGroupUpdateModel, token: String, completion: @escaping ((_ data: MccGroupUpdateModel?,_ error: Error?) -> Void)) {
        putMccgroupsTokenWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update MCC group
     - PUT /mccgroups/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "mccs" : [ "mccs", "mccs", "mccs", "mccs", "mccs", "mccs", "mccs", "mccs", "mccs", "mccs" ],
  "name" : "name",
  "active" : false,
  "config" : {
    "authorization_controls" : {
      "hold_increase" : {
        "type" : "AMOUNT",
        "value" : 1.4658129805029452
      },
      "hold_expiration_days" : 6
    }
  }
}}]
     - parameter body: (body) MCC group 
     - parameter token: (path) The unique identifier of the MCC group. Send a &#x60;GET&#x60; request to &#x60;/mccgroups&#x60; to retrieve MCC group tokens. 

     - returns: RequestBuilder<MccGroupUpdateModel> 
     */
    open class func putMccgroupsTokenWithRequestBuilder(body: MccGroupUpdateModel, token: String) -> RequestBuilder<MccGroupUpdateModel> {
        var path = "/mccgroups/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MccGroupUpdateModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
