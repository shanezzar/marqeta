//
// GPAOrdersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class GPAOrdersAPI {
    /**
     Retrieve GPA order

     - parameter token: (path) Unique identifier of the GPA order.  Send a &#x60;GET&#x60; request to &#x60;/transactions?type&#x3D;gpa.credit&#x60; to retrieve GPA order tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGpaordersToken(token: String, completion: @escaping ((_ data: GpaResponse?,_ error: Error?) -> Void)) {
        getGpaordersTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve GPA order
     - GET /gpaorders/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "fees" : [ {
    "fee" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 6.027456183070403,
      "real_time_assessment" : {
        "domestic_enabled" : false,
        "international_enabled" : false,
        "transaction_type" : "transaction_type"
      },
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "active" : false,
      "currency_code" : "currency_code",
      "tags" : "tags",
      "token" : "token"
    },
    "memo" : "memo",
    "transaction_token" : "transaction_token",
    "tags" : "tags",
    "token" : "token"
  }, {
    "fee" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 6.027456183070403,
      "real_time_assessment" : {
        "domestic_enabled" : false,
        "international_enabled" : false,
        "transaction_type" : "transaction_type"
      },
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "active" : false,
      "currency_code" : "currency_code",
      "tags" : "tags",
      "token" : "token"
    },
    "memo" : "memo",
    "transaction_token" : "transaction_token",
    "tags" : "tags",
    "token" : "token"
  } ],
  "funding" : {
    "amount" : 6.027456183070403,
    "source_address" : {
      "zip" : "zip",
      "country" : "country",
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "business_token" : "business_token",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "city" : "city",
      "address_1" : "address_1",
      "address_2" : "address_2",
      "active" : false,
      "last_name" : "last_name",
      "is_default_address" : false,
      "token" : "token",
      "phone" : "phone",
      "state" : "state",
      "user_token" : "user_token",
      "postal_code" : "postal_code",
      "first_name" : "first_name"
    },
    "gateway_log" : {
      "duration" : 1,
      "transaction_id" : "transaction_id",
      "response" : {
        "code" : "code",
        "data" : {
          "jit_funding" : {
            "amount" : 0.5962133916683182,
            "address_verification" : {
              "gateway" : {
                "response" : {
                  "additional_information" : "additional_information",
                  "code" : "code",
                  "memo" : "memo"
                },
                "on_file" : {
                  "zip" : "zip",
                  "street_address" : "street_address",
                  "postal_code" : "postal_code"
                }
              }
            },
            "business_token" : "business_token",
            "method" : "pgfs.authorization",
            "memo" : "memo",
            "tags" : "tags",
            "token" : "token",
            "balances" : {
              "key" : {
                "ledger_balance" : 5.637376656633329,
                "balances" : { },
                "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
                "credit_balance" : 1.4658129805029452,
                "impacted_amount" : 5.962133916683182,
                "pending_credits" : 2.3021358869347655,
                "available_balance" : 0.8008281904610115,
                "cached_balance" : 6.027456183070403,
                "currency_code" : "currency_code"
              }
            },
            "acting_user_token" : "acting_user_token",
            "decline_reason" : "INVALID_AMOUNT",
            "original_jit_funding_token" : "original_jit_funding_token",
            "user_token" : "user_token",
            "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
          },
          "network_metadata" : {
            "account_identification_1" : "account_identification_1",
            "product_id" : "product_id",
            "program_id" : "program_id",
            "surcharge_free_atm_network" : "surcharge_free_atm_network",
            "spend_qualifier" : "spend_qualifier"
          }
        }
      },
      "order_number" : "order_number",
      "timed_out" : false,
      "message" : "message"
    },
    "source" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "active" : false,
      "type" : "type",
      "is_default_account" : false,
      "token" : "token"
    }
  },
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "memo" : "memo",
  "funding_source_address_token" : "funding_source_address_token",
  "transaction_token" : "transaction_token",
  "currency_code" : "currency_code",
  "funding_source_token" : "funding_source_token",
  "tags" : "tags",
  "token" : "token",
  "gateway_message" : "gateway_message",
  "gateway_token" : 5,
  "state" : "state",
  "user_token" : "user_token"
}}]
     - parameter token: (path) Unique identifier of the GPA order.  Send a &#x60;GET&#x60; request to &#x60;/transactions?type&#x3D;gpa.credit&#x60; to retrieve GPA order tokens. 

     - returns: RequestBuilder<GpaResponse> 
     */
    open class func getGpaordersTokenWithRequestBuilder(token: String) -> RequestBuilder<GpaResponse> {
        var path = "/gpaorders/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GpaResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List GPA unloads

     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter userToken: (query) Unique identifier of the user resource.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens. (optional)
     - parameter businessToken: (query) Unique identifier of the business resource.  Send a &#x60;GET&#x60; request to &#x60;/businesses&#x60; to retrieve business tokens. (optional)
     - parameter originalOrderToken: (query) Unique identifier of the original GPA order.  Send a &#x60;GET&#x60; request to &#x60;/transactions?type&#x3D;gpa.credit&#x60; to retrieve GPA order tokens. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGpaordersUnloads(count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, userToken: String? = nil, businessToken: String? = nil, originalOrderToken: String? = nil, completion: @escaping ((_ data: GPAUnloadListResponse?,_ error: Error?) -> Void)) {
        getGpaordersUnloadsWithRequestBuilder(count: count, startIndex: startIndex, fields: fields, sortBy: sortBy, userToken: userToken, businessToken: businessToken, originalOrderToken: originalOrderToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List GPA unloads
     - GET /gpaorders/unloads

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "original_order_token" : "original_order_token",
    "amount" : 6.027456183070403,
    "funding" : {
      "amount" : 6.027456183070403,
      "source_address" : {
        "zip" : "zip",
        "country" : "country",
        "created_time" : "2000-01-23T04:56:07.000+00:00",
        "business_token" : "business_token",
        "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
        "city" : "city",
        "address_1" : "address_1",
        "address_2" : "address_2",
        "active" : false,
        "last_name" : "last_name",
        "is_default_address" : false,
        "token" : "token",
        "phone" : "phone",
        "state" : "state",
        "user_token" : "user_token",
        "postal_code" : "postal_code",
        "first_name" : "first_name"
      },
      "gateway_log" : {
        "duration" : 1,
        "transaction_id" : "transaction_id",
        "response" : {
          "code" : "code",
          "data" : {
            "jit_funding" : {
              "amount" : 0.5962133916683182,
              "address_verification" : {
                "gateway" : {
                  "response" : {
                    "additional_information" : "additional_information",
                    "code" : "code",
                    "memo" : "memo"
                  },
                  "on_file" : {
                    "zip" : "zip",
                    "street_address" : "street_address",
                    "postal_code" : "postal_code"
                  }
                }
              },
              "business_token" : "business_token",
              "method" : "pgfs.authorization",
              "memo" : "memo",
              "tags" : "tags",
              "token" : "token",
              "balances" : {
                "key" : {
                  "ledger_balance" : 5.637376656633329,
                  "balances" : { },
                  "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
                  "credit_balance" : 1.4658129805029452,
                  "impacted_amount" : 5.962133916683182,
                  "pending_credits" : 2.3021358869347655,
                  "available_balance" : 0.8008281904610115,
                  "cached_balance" : 6.027456183070403,
                  "currency_code" : "currency_code"
                }
              },
              "acting_user_token" : "acting_user_token",
              "decline_reason" : "INVALID_AMOUNT",
              "original_jit_funding_token" : "original_jit_funding_token",
              "user_token" : "user_token",
              "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
            },
            "network_metadata" : {
              "account_identification_1" : "account_identification_1",
              "product_id" : "product_id",
              "program_id" : "program_id",
              "surcharge_free_atm_network" : "surcharge_free_atm_network",
              "spend_qualifier" : "spend_qualifier"
            }
          }
        },
        "order_number" : "order_number",
        "timed_out" : false,
        "message" : "message"
      },
      "source" : {
        "created_time" : "2000-01-23T04:56:07.000+00:00",
        "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
        "active" : false,
        "type" : "type",
        "is_default_account" : false,
        "token" : "token"
      }
    },
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "memo" : "memo",
    "funding_source_address_token" : "funding_source_address_token",
    "transaction_token" : "transaction_token",
    "funding_source_token" : "funding_source_token",
    "tags" : "tags",
    "token" : "token",
    "jit_funding" : {
      "amount" : 0.5962133916683182,
      "address_verification" : {
        "gateway" : {
          "response" : {
            "additional_information" : "additional_information",
            "code" : "code",
            "memo" : "memo"
          },
          "on_file" : {
            "zip" : "zip",
            "street_address" : "street_address",
            "postal_code" : "postal_code"
          }
        }
      },
      "business_token" : "business_token",
      "method" : "pgfs.authorization",
      "memo" : "memo",
      "tags" : "tags",
      "token" : "token",
      "balances" : {
        "key" : {
          "ledger_balance" : 5.637376656633329,
          "balances" : { },
          "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
          "credit_balance" : 1.4658129805029452,
          "impacted_amount" : 5.962133916683182,
          "pending_credits" : 2.3021358869347655,
          "available_balance" : 0.8008281904610115,
          "cached_balance" : 6.027456183070403,
          "currency_code" : "currency_code"
        }
      },
      "acting_user_token" : "acting_user_token",
      "decline_reason" : "INVALID_AMOUNT",
      "original_jit_funding_token" : "original_jit_funding_token",
      "user_token" : "user_token",
      "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
    },
    "response" : {
      "additional_information" : "additional_information",
      "code" : "code",
      "memo" : "memo"
    },
    "state" : "state"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "original_order_token" : "original_order_token",
    "amount" : 6.027456183070403,
    "funding" : {
      "amount" : 6.027456183070403,
      "source_address" : {
        "zip" : "zip",
        "country" : "country",
        "created_time" : "2000-01-23T04:56:07.000+00:00",
        "business_token" : "business_token",
        "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
        "city" : "city",
        "address_1" : "address_1",
        "address_2" : "address_2",
        "active" : false,
        "last_name" : "last_name",
        "is_default_address" : false,
        "token" : "token",
        "phone" : "phone",
        "state" : "state",
        "user_token" : "user_token",
        "postal_code" : "postal_code",
        "first_name" : "first_name"
      },
      "gateway_log" : {
        "duration" : 1,
        "transaction_id" : "transaction_id",
        "response" : {
          "code" : "code",
          "data" : {
            "jit_funding" : {
              "amount" : 0.5962133916683182,
              "address_verification" : {
                "gateway" : {
                  "response" : {
                    "additional_information" : "additional_information",
                    "code" : "code",
                    "memo" : "memo"
                  },
                  "on_file" : {
                    "zip" : "zip",
                    "street_address" : "street_address",
                    "postal_code" : "postal_code"
                  }
                }
              },
              "business_token" : "business_token",
              "method" : "pgfs.authorization",
              "memo" : "memo",
              "tags" : "tags",
              "token" : "token",
              "balances" : {
                "key" : {
                  "ledger_balance" : 5.637376656633329,
                  "balances" : { },
                  "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
                  "credit_balance" : 1.4658129805029452,
                  "impacted_amount" : 5.962133916683182,
                  "pending_credits" : 2.3021358869347655,
                  "available_balance" : 0.8008281904610115,
                  "cached_balance" : 6.027456183070403,
                  "currency_code" : "currency_code"
                }
              },
              "acting_user_token" : "acting_user_token",
              "decline_reason" : "INVALID_AMOUNT",
              "original_jit_funding_token" : "original_jit_funding_token",
              "user_token" : "user_token",
              "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
            },
            "network_metadata" : {
              "account_identification_1" : "account_identification_1",
              "product_id" : "product_id",
              "program_id" : "program_id",
              "surcharge_free_atm_network" : "surcharge_free_atm_network",
              "spend_qualifier" : "spend_qualifier"
            }
          }
        },
        "order_number" : "order_number",
        "timed_out" : false,
        "message" : "message"
      },
      "source" : {
        "created_time" : "2000-01-23T04:56:07.000+00:00",
        "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
        "active" : false,
        "type" : "type",
        "is_default_account" : false,
        "token" : "token"
      }
    },
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "memo" : "memo",
    "funding_source_address_token" : "funding_source_address_token",
    "transaction_token" : "transaction_token",
    "funding_source_token" : "funding_source_token",
    "tags" : "tags",
    "token" : "token",
    "jit_funding" : {
      "amount" : 0.5962133916683182,
      "address_verification" : {
        "gateway" : {
          "response" : {
            "additional_information" : "additional_information",
            "code" : "code",
            "memo" : "memo"
          },
          "on_file" : {
            "zip" : "zip",
            "street_address" : "street_address",
            "postal_code" : "postal_code"
          }
        }
      },
      "business_token" : "business_token",
      "method" : "pgfs.authorization",
      "memo" : "memo",
      "tags" : "tags",
      "token" : "token",
      "balances" : {
        "key" : {
          "ledger_balance" : 5.637376656633329,
          "balances" : { },
          "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
          "credit_balance" : 1.4658129805029452,
          "impacted_amount" : 5.962133916683182,
          "pending_credits" : 2.3021358869347655,
          "available_balance" : 0.8008281904610115,
          "cached_balance" : 6.027456183070403,
          "currency_code" : "currency_code"
        }
      },
      "acting_user_token" : "acting_user_token",
      "decline_reason" : "INVALID_AMOUNT",
      "original_jit_funding_token" : "original_jit_funding_token",
      "user_token" : "user_token",
      "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
    },
    "response" : {
      "additional_information" : "additional_information",
      "code" : "code",
      "memo" : "memo"
    },
    "state" : "state"
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 1
}}]
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter userToken: (query) Unique identifier of the user resource.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens. (optional)
     - parameter businessToken: (query) Unique identifier of the business resource.  Send a &#x60;GET&#x60; request to &#x60;/businesses&#x60; to retrieve business tokens. (optional)
     - parameter originalOrderToken: (query) Unique identifier of the original GPA order.  Send a &#x60;GET&#x60; request to &#x60;/transactions?type&#x3D;gpa.credit&#x60; to retrieve GPA order tokens. (optional)

     - returns: RequestBuilder<GPAUnloadListResponse> 
     */
    open class func getGpaordersUnloadsWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, userToken: String? = nil, businessToken: String? = nil, originalOrderToken: String? = nil) -> RequestBuilder<GPAUnloadListResponse> {
        let path = "/gpaorders/unloads"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy, 
                        "user_token": userToken, 
                        "business_token": businessToken, 
                        "original_order_token": originalOrderToken
        ])


        let requestBuilder: RequestBuilder<GPAUnloadListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve GPA unload

     - parameter unloadToken: (path) Unique identifier of the GPA unload. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGpaordersUnloadsUnloadtoken(unloadToken: String, completion: @escaping ((_ data: GpaReturns?,_ error: Error?) -> Void)) {
        getGpaordersUnloadsUnloadtokenWithRequestBuilder(unloadToken: unloadToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve GPA unload
     - GET /gpaorders/unloads/{unload_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "original_order_token" : "original_order_token",
  "amount" : 6.027456183070403,
  "funding" : {
    "amount" : 6.027456183070403,
    "source_address" : {
      "zip" : "zip",
      "country" : "country",
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "business_token" : "business_token",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "city" : "city",
      "address_1" : "address_1",
      "address_2" : "address_2",
      "active" : false,
      "last_name" : "last_name",
      "is_default_address" : false,
      "token" : "token",
      "phone" : "phone",
      "state" : "state",
      "user_token" : "user_token",
      "postal_code" : "postal_code",
      "first_name" : "first_name"
    },
    "gateway_log" : {
      "duration" : 1,
      "transaction_id" : "transaction_id",
      "response" : {
        "code" : "code",
        "data" : {
          "jit_funding" : {
            "amount" : 0.5962133916683182,
            "address_verification" : {
              "gateway" : {
                "response" : {
                  "additional_information" : "additional_information",
                  "code" : "code",
                  "memo" : "memo"
                },
                "on_file" : {
                  "zip" : "zip",
                  "street_address" : "street_address",
                  "postal_code" : "postal_code"
                }
              }
            },
            "business_token" : "business_token",
            "method" : "pgfs.authorization",
            "memo" : "memo",
            "tags" : "tags",
            "token" : "token",
            "balances" : {
              "key" : {
                "ledger_balance" : 5.637376656633329,
                "balances" : { },
                "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
                "credit_balance" : 1.4658129805029452,
                "impacted_amount" : 5.962133916683182,
                "pending_credits" : 2.3021358869347655,
                "available_balance" : 0.8008281904610115,
                "cached_balance" : 6.027456183070403,
                "currency_code" : "currency_code"
              }
            },
            "acting_user_token" : "acting_user_token",
            "decline_reason" : "INVALID_AMOUNT",
            "original_jit_funding_token" : "original_jit_funding_token",
            "user_token" : "user_token",
            "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
          },
          "network_metadata" : {
            "account_identification_1" : "account_identification_1",
            "product_id" : "product_id",
            "program_id" : "program_id",
            "surcharge_free_atm_network" : "surcharge_free_atm_network",
            "spend_qualifier" : "spend_qualifier"
          }
        }
      },
      "order_number" : "order_number",
      "timed_out" : false,
      "message" : "message"
    },
    "source" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "active" : false,
      "type" : "type",
      "is_default_account" : false,
      "token" : "token"
    }
  },
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "memo" : "memo",
  "funding_source_address_token" : "funding_source_address_token",
  "transaction_token" : "transaction_token",
  "funding_source_token" : "funding_source_token",
  "tags" : "tags",
  "token" : "token",
  "jit_funding" : {
    "amount" : 0.5962133916683182,
    "address_verification" : {
      "gateway" : {
        "response" : {
          "additional_information" : "additional_information",
          "code" : "code",
          "memo" : "memo"
        },
        "on_file" : {
          "zip" : "zip",
          "street_address" : "street_address",
          "postal_code" : "postal_code"
        }
      }
    },
    "business_token" : "business_token",
    "method" : "pgfs.authorization",
    "memo" : "memo",
    "tags" : "tags",
    "token" : "token",
    "balances" : {
      "key" : {
        "ledger_balance" : 5.637376656633329,
        "balances" : { },
        "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
        "credit_balance" : 1.4658129805029452,
        "impacted_amount" : 5.962133916683182,
        "pending_credits" : 2.3021358869347655,
        "available_balance" : 0.8008281904610115,
        "cached_balance" : 6.027456183070403,
        "currency_code" : "currency_code"
      }
    },
    "acting_user_token" : "acting_user_token",
    "decline_reason" : "INVALID_AMOUNT",
    "original_jit_funding_token" : "original_jit_funding_token",
    "user_token" : "user_token",
    "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
  },
  "response" : {
    "additional_information" : "additional_information",
    "code" : "code",
    "memo" : "memo"
  },
  "state" : "state"
}}]
     - parameter unloadToken: (path) Unique identifier of the GPA unload. 

     - returns: RequestBuilder<GpaReturns> 
     */
    open class func getGpaordersUnloadsUnloadtokenWithRequestBuilder(unloadToken: String) -> RequestBuilder<GpaReturns> {
        var path = "/gpaorders/unloads/{unload_token}"
        let unloadTokenPreEscape = "\(unloadToken)"
        let unloadTokenPostEscape = unloadTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{unload_token}", with: unloadTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GpaReturns>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create GPA order

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGpaorders(body: GpaRequest? = nil, completion: @escaping ((_ data: GpaResponse?,_ error: Error?) -> Void)) {
        postGpaordersWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create GPA order
     - POST /gpaorders

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "fees" : [ {
    "fee" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 6.027456183070403,
      "real_time_assessment" : {
        "domestic_enabled" : false,
        "international_enabled" : false,
        "transaction_type" : "transaction_type"
      },
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "active" : false,
      "currency_code" : "currency_code",
      "tags" : "tags",
      "token" : "token"
    },
    "memo" : "memo",
    "transaction_token" : "transaction_token",
    "tags" : "tags",
    "token" : "token"
  }, {
    "fee" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 6.027456183070403,
      "real_time_assessment" : {
        "domestic_enabled" : false,
        "international_enabled" : false,
        "transaction_type" : "transaction_type"
      },
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "active" : false,
      "currency_code" : "currency_code",
      "tags" : "tags",
      "token" : "token"
    },
    "memo" : "memo",
    "transaction_token" : "transaction_token",
    "tags" : "tags",
    "token" : "token"
  } ],
  "funding" : {
    "amount" : 6.027456183070403,
    "source_address" : {
      "zip" : "zip",
      "country" : "country",
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "business_token" : "business_token",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "city" : "city",
      "address_1" : "address_1",
      "address_2" : "address_2",
      "active" : false,
      "last_name" : "last_name",
      "is_default_address" : false,
      "token" : "token",
      "phone" : "phone",
      "state" : "state",
      "user_token" : "user_token",
      "postal_code" : "postal_code",
      "first_name" : "first_name"
    },
    "gateway_log" : {
      "duration" : 1,
      "transaction_id" : "transaction_id",
      "response" : {
        "code" : "code",
        "data" : {
          "jit_funding" : {
            "amount" : 0.5962133916683182,
            "address_verification" : {
              "gateway" : {
                "response" : {
                  "additional_information" : "additional_information",
                  "code" : "code",
                  "memo" : "memo"
                },
                "on_file" : {
                  "zip" : "zip",
                  "street_address" : "street_address",
                  "postal_code" : "postal_code"
                }
              }
            },
            "business_token" : "business_token",
            "method" : "pgfs.authorization",
            "memo" : "memo",
            "tags" : "tags",
            "token" : "token",
            "balances" : {
              "key" : {
                "ledger_balance" : 5.637376656633329,
                "balances" : { },
                "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
                "credit_balance" : 1.4658129805029452,
                "impacted_amount" : 5.962133916683182,
                "pending_credits" : 2.3021358869347655,
                "available_balance" : 0.8008281904610115,
                "cached_balance" : 6.027456183070403,
                "currency_code" : "currency_code"
              }
            },
            "acting_user_token" : "acting_user_token",
            "decline_reason" : "INVALID_AMOUNT",
            "original_jit_funding_token" : "original_jit_funding_token",
            "user_token" : "user_token",
            "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
          },
          "network_metadata" : {
            "account_identification_1" : "account_identification_1",
            "product_id" : "product_id",
            "program_id" : "program_id",
            "surcharge_free_atm_network" : "surcharge_free_atm_network",
            "spend_qualifier" : "spend_qualifier"
          }
        }
      },
      "order_number" : "order_number",
      "timed_out" : false,
      "message" : "message"
    },
    "source" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "active" : false,
      "type" : "type",
      "is_default_account" : false,
      "token" : "token"
    }
  },
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "memo" : "memo",
  "funding_source_address_token" : "funding_source_address_token",
  "transaction_token" : "transaction_token",
  "currency_code" : "currency_code",
  "funding_source_token" : "funding_source_token",
  "tags" : "tags",
  "token" : "token",
  "gateway_message" : "gateway_message",
  "gateway_token" : 5,
  "state" : "state",
  "user_token" : "user_token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<GpaResponse> 
     */
    open class func postGpaordersWithRequestBuilder(body: GpaRequest? = nil) -> RequestBuilder<GpaResponse> {
        let path = "/gpaorders"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GpaResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create GPA unload

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGpaordersUnloads(body: UnloadRequestModel? = nil, completion: @escaping ((_ data: GpaReturns?,_ error: Error?) -> Void)) {
        postGpaordersUnloadsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create GPA unload
     - POST /gpaorders/unloads

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "original_order_token" : "original_order_token",
  "amount" : 6.027456183070403,
  "funding" : {
    "amount" : 6.027456183070403,
    "source_address" : {
      "zip" : "zip",
      "country" : "country",
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "business_token" : "business_token",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "city" : "city",
      "address_1" : "address_1",
      "address_2" : "address_2",
      "active" : false,
      "last_name" : "last_name",
      "is_default_address" : false,
      "token" : "token",
      "phone" : "phone",
      "state" : "state",
      "user_token" : "user_token",
      "postal_code" : "postal_code",
      "first_name" : "first_name"
    },
    "gateway_log" : {
      "duration" : 1,
      "transaction_id" : "transaction_id",
      "response" : {
        "code" : "code",
        "data" : {
          "jit_funding" : {
            "amount" : 0.5962133916683182,
            "address_verification" : {
              "gateway" : {
                "response" : {
                  "additional_information" : "additional_information",
                  "code" : "code",
                  "memo" : "memo"
                },
                "on_file" : {
                  "zip" : "zip",
                  "street_address" : "street_address",
                  "postal_code" : "postal_code"
                }
              }
            },
            "business_token" : "business_token",
            "method" : "pgfs.authorization",
            "memo" : "memo",
            "tags" : "tags",
            "token" : "token",
            "balances" : {
              "key" : {
                "ledger_balance" : 5.637376656633329,
                "balances" : { },
                "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
                "credit_balance" : 1.4658129805029452,
                "impacted_amount" : 5.962133916683182,
                "pending_credits" : 2.3021358869347655,
                "available_balance" : 0.8008281904610115,
                "cached_balance" : 6.027456183070403,
                "currency_code" : "currency_code"
              }
            },
            "acting_user_token" : "acting_user_token",
            "decline_reason" : "INVALID_AMOUNT",
            "original_jit_funding_token" : "original_jit_funding_token",
            "user_token" : "user_token",
            "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
          },
          "network_metadata" : {
            "account_identification_1" : "account_identification_1",
            "product_id" : "product_id",
            "program_id" : "program_id",
            "surcharge_free_atm_network" : "surcharge_free_atm_network",
            "spend_qualifier" : "spend_qualifier"
          }
        }
      },
      "order_number" : "order_number",
      "timed_out" : false,
      "message" : "message"
    },
    "source" : {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "active" : false,
      "type" : "type",
      "is_default_account" : false,
      "token" : "token"
    }
  },
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "memo" : "memo",
  "funding_source_address_token" : "funding_source_address_token",
  "transaction_token" : "transaction_token",
  "funding_source_token" : "funding_source_token",
  "tags" : "tags",
  "token" : "token",
  "jit_funding" : {
    "amount" : 0.5962133916683182,
    "address_verification" : {
      "gateway" : {
        "response" : {
          "additional_information" : "additional_information",
          "code" : "code",
          "memo" : "memo"
        },
        "on_file" : {
          "zip" : "zip",
          "street_address" : "street_address",
          "postal_code" : "postal_code"
        }
      }
    },
    "business_token" : "business_token",
    "method" : "pgfs.authorization",
    "memo" : "memo",
    "tags" : "tags",
    "token" : "token",
    "balances" : {
      "key" : {
        "ledger_balance" : 5.637376656633329,
        "balances" : { },
        "last_updated_time" : "2000-01-23T04:56:07.000+00:00",
        "credit_balance" : 1.4658129805029452,
        "impacted_amount" : 5.962133916683182,
        "pending_credits" : 2.3021358869347655,
        "available_balance" : 0.8008281904610115,
        "cached_balance" : 6.027456183070403,
        "currency_code" : "currency_code"
      }
    },
    "acting_user_token" : "acting_user_token",
    "decline_reason" : "INVALID_AMOUNT",
    "original_jit_funding_token" : "original_jit_funding_token",
    "user_token" : "user_token",
    "incremental_authorization_jit_funding_tokens" : [ "incremental_authorization_jit_funding_tokens", "incremental_authorization_jit_funding_tokens" ]
  },
  "response" : {
    "additional_information" : "additional_information",
    "code" : "code",
    "memo" : "memo"
  },
  "state" : "state"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<GpaReturns> 
     */
    open class func postGpaordersUnloadsWithRequestBuilder(body: UnloadRequestModel? = nil) -> RequestBuilder<GpaReturns> {
        let path = "/gpaorders/unloads"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GpaReturns>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
