//
// CreditAccountsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CreditAccountsAPI {
    /**
     Create account

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCreditAccount(body: AccountCreateReq, completion: @escaping ((_ data: AccountResponse?,_ error: Error?) -> Void)) {
        createCreditAccountWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create account
     - POST /credit/accounts

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "latest_statement_cycle_type" : "BEGINNING_REVOLVING",
  "bundle_token" : "bundle_token",
  "remaining_statement_balance" : 1.0246457001441578,
  "description" : "description",
  "remaining_min_payment_due" : 1.2315135367772556,
  "external_offer_id" : "external_offer_id",
  "type" : "CONSUMER",
  "currency_code" : "USD",
  "activation_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "credit_product_token" : "credit_product_token",
  "credit_limit" : 414560.8029883936,
  "name" : "name",
  "current_balance" : 7.386281948385884,
  "usages" : [ {
    "fees" : [ {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    }, {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    } ],
    "type" : "PURCHASE",
    "aprs" : [ {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    }, {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    } ]
  }, {
    "fees" : [ {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    }, {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    } ],
    "type" : "PURCHASE",
    "aprs" : [ {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    }, {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    } ]
  } ],
  "user_token" : "user_token",
  "config" : {
    "card_level" : "NA",
    "fees" : [ {
      "schedule" : [ {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      }, {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "LATE_PAYMENT_FEE"
    }, {
      "schedule" : [ {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      }, {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "LATE_PAYMENT_FEE"
    } ],
    "payment_holds" : {
      "ach_hold_days" : 6,
      "check_hold_days" : 2
    },
    "billing_cycle_day" : 1,
    "e_disclosure_active" : false,
    "min_payment" : {
      "min_payment_flat_amount" : 0.5637376656633328,
      "min_payment_percentage" : 0.23021358869347652,
      "override_end_time" : "2000-01-23T04:56:07.000+00:00",
      "active" : true,
      "override_start_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "payment_due_day" : 31,
    "rewards" : [ {
      "method" : "PERCENTAGE",
      "type" : "AUTO_CASH_BACK",
      "value" : 20.271230230023217
    }, {
      "method" : "PERCENTAGE",
      "type" : "AUTO_CASH_BACK",
      "value" : 20.271230230023217
    } ]
  },
  "available_credit" : 6.027456183070403,
  "status" : "UNACTIVATED"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<AccountResponse> 
     */
    open class func createCreditAccountWithRequestBuilder(body: AccountCreateReq) -> RequestBuilder<AccountResponse> {
        let path = "/credit/accounts"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listAccounts: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List accounts

     - parameter cardToken: (query) The unique identifier of the credit card associated with the account. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAccounts(cardToken: String? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listAccounts? = nil, completion: @escaping ((_ data: AccountsPage?,_ error: Error?) -> Void)) {
        listAccountsWithRequestBuilder(cardToken: cardToken, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List accounts
     - GET /credit/accounts

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "latest_statement_cycle_type" : "BEGINNING_REVOLVING",
    "bundle_token" : "bundle_token",
    "remaining_statement_balance" : 1.0246457001441578,
    "description" : "description",
    "remaining_min_payment_due" : 1.2315135367772556,
    "external_offer_id" : "external_offer_id",
    "type" : "CONSUMER",
    "currency_code" : "USD",
    "activation_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "credit_product_token" : "credit_product_token",
    "credit_limit" : 414560.8029883936,
    "name" : "name",
    "current_balance" : 7.386281948385884,
    "usages" : [ {
      "fees" : [ {
        "type" : "FOREIGN_TRANSACTION_FEE",
        "value" : 7457.744699106318
      }, {
        "type" : "FOREIGN_TRANSACTION_FEE",
        "value" : 7457.744699106318
      } ],
      "type" : "PURCHASE",
      "aprs" : [ {
        "schedule" : [ {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        }, {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "GO_TO"
      }, {
        "schedule" : [ {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        }, {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "GO_TO"
      } ]
    }, {
      "fees" : [ {
        "type" : "FOREIGN_TRANSACTION_FEE",
        "value" : 7457.744699106318
      }, {
        "type" : "FOREIGN_TRANSACTION_FEE",
        "value" : 7457.744699106318
      } ],
      "type" : "PURCHASE",
      "aprs" : [ {
        "schedule" : [ {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        }, {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "GO_TO"
      }, {
        "schedule" : [ {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        }, {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "GO_TO"
      } ]
    } ],
    "user_token" : "user_token",
    "config" : {
      "card_level" : "NA",
      "fees" : [ {
        "schedule" : [ {
          "method" : "FLAT",
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "value" : 5962.133857061844
        }, {
          "method" : "FLAT",
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "value" : 5962.133857061844
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "LATE_PAYMENT_FEE"
      }, {
        "schedule" : [ {
          "method" : "FLAT",
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "value" : 5962.133857061844
        }, {
          "method" : "FLAT",
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "value" : 5962.133857061844
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "LATE_PAYMENT_FEE"
      } ],
      "payment_holds" : {
        "ach_hold_days" : 6,
        "check_hold_days" : 2
      },
      "billing_cycle_day" : 1,
      "e_disclosure_active" : false,
      "min_payment" : {
        "min_payment_flat_amount" : 0.5637376656633328,
        "min_payment_percentage" : 0.23021358869347652,
        "override_end_time" : "2000-01-23T04:56:07.000+00:00",
        "active" : true,
        "override_start_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "payment_due_day" : 31,
      "rewards" : [ {
        "method" : "PERCENTAGE",
        "type" : "AUTO_CASH_BACK",
        "value" : 20.271230230023217
      }, {
        "method" : "PERCENTAGE",
        "type" : "AUTO_CASH_BACK",
        "value" : 20.271230230023217
      } ]
    },
    "available_credit" : 6.027456183070403,
    "status" : "UNACTIVATED"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "latest_statement_cycle_type" : "BEGINNING_REVOLVING",
    "bundle_token" : "bundle_token",
    "remaining_statement_balance" : 1.0246457001441578,
    "description" : "description",
    "remaining_min_payment_due" : 1.2315135367772556,
    "external_offer_id" : "external_offer_id",
    "type" : "CONSUMER",
    "currency_code" : "USD",
    "activation_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "credit_product_token" : "credit_product_token",
    "credit_limit" : 414560.8029883936,
    "name" : "name",
    "current_balance" : 7.386281948385884,
    "usages" : [ {
      "fees" : [ {
        "type" : "FOREIGN_TRANSACTION_FEE",
        "value" : 7457.744699106318
      }, {
        "type" : "FOREIGN_TRANSACTION_FEE",
        "value" : 7457.744699106318
      } ],
      "type" : "PURCHASE",
      "aprs" : [ {
        "schedule" : [ {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        }, {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "GO_TO"
      }, {
        "schedule" : [ {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        }, {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "GO_TO"
      } ]
    }, {
      "fees" : [ {
        "type" : "FOREIGN_TRANSACTION_FEE",
        "value" : 7457.744699106318
      }, {
        "type" : "FOREIGN_TRANSACTION_FEE",
        "value" : 7457.744699106318
      } ],
      "type" : "PURCHASE",
      "aprs" : [ {
        "schedule" : [ {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        }, {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "GO_TO"
      }, {
        "schedule" : [ {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        }, {
          "margin" : 1.4894159,
          "apply_next_cycle" : false,
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "type" : "FIXED",
          "value" : 68.4685269835264
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "GO_TO"
      } ]
    } ],
    "user_token" : "user_token",
    "config" : {
      "card_level" : "NA",
      "fees" : [ {
        "schedule" : [ {
          "method" : "FLAT",
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "value" : 5962.133857061844
        }, {
          "method" : "FLAT",
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "value" : 5962.133857061844
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "LATE_PAYMENT_FEE"
      }, {
        "schedule" : [ {
          "method" : "FLAT",
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "value" : 5962.133857061844
        }, {
          "method" : "FLAT",
          "effective_date" : "2000-01-23T04:56:07.000+00:00",
          "value" : 5962.133857061844
        } ],
        "active" : true,
        "created_date" : "2000-01-23T04:56:07.000+00:00",
        "updated_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "LATE_PAYMENT_FEE"
      } ],
      "payment_holds" : {
        "ach_hold_days" : 6,
        "check_hold_days" : 2
      },
      "billing_cycle_day" : 1,
      "e_disclosure_active" : false,
      "min_payment" : {
        "min_payment_flat_amount" : 0.5637376656633328,
        "min_payment_percentage" : 0.23021358869347652,
        "override_end_time" : "2000-01-23T04:56:07.000+00:00",
        "active" : true,
        "override_start_time" : "2000-01-23T04:56:07.000+00:00"
      },
      "payment_due_day" : 31,
      "rewards" : [ {
        "method" : "PERCENTAGE",
        "type" : "AUTO_CASH_BACK",
        "value" : 20.271230230023217
      }, {
        "method" : "PERCENTAGE",
        "type" : "AUTO_CASH_BACK",
        "value" : 20.271230230023217
      } ]
    },
    "available_credit" : 6.027456183070403,
    "status" : "UNACTIVATED"
  } ],
  "start_index" : 4,
  "count" : 0,
  "end_index" : 1
}}]
     - parameter cardToken: (query) The unique identifier of the credit card associated with the account. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<AccountsPage> 
     */
    open class func listAccountsWithRequestBuilder(cardToken: String? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listAccounts? = nil) -> RequestBuilder<AccountsPage> {
        let path = "/credit/accounts"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "card_token": cardToken, 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<AccountsPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve account

     - parameter accountToken: (path) The unique identifier of the credit account to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveAccount(accountToken: String, completion: @escaping ((_ data: AccountResponse?,_ error: Error?) -> Void)) {
        retrieveAccountWithRequestBuilder(accountToken: accountToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve account
     - GET /credit/accounts/{account_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "latest_statement_cycle_type" : "BEGINNING_REVOLVING",
  "bundle_token" : "bundle_token",
  "remaining_statement_balance" : 1.0246457001441578,
  "description" : "description",
  "remaining_min_payment_due" : 1.2315135367772556,
  "external_offer_id" : "external_offer_id",
  "type" : "CONSUMER",
  "currency_code" : "USD",
  "activation_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "credit_product_token" : "credit_product_token",
  "credit_limit" : 414560.8029883936,
  "name" : "name",
  "current_balance" : 7.386281948385884,
  "usages" : [ {
    "fees" : [ {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    }, {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    } ],
    "type" : "PURCHASE",
    "aprs" : [ {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    }, {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    } ]
  }, {
    "fees" : [ {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    }, {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    } ],
    "type" : "PURCHASE",
    "aprs" : [ {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    }, {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    } ]
  } ],
  "user_token" : "user_token",
  "config" : {
    "card_level" : "NA",
    "fees" : [ {
      "schedule" : [ {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      }, {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "LATE_PAYMENT_FEE"
    }, {
      "schedule" : [ {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      }, {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "LATE_PAYMENT_FEE"
    } ],
    "payment_holds" : {
      "ach_hold_days" : 6,
      "check_hold_days" : 2
    },
    "billing_cycle_day" : 1,
    "e_disclosure_active" : false,
    "min_payment" : {
      "min_payment_flat_amount" : 0.5637376656633328,
      "min_payment_percentage" : 0.23021358869347652,
      "override_end_time" : "2000-01-23T04:56:07.000+00:00",
      "active" : true,
      "override_start_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "payment_due_day" : 31,
    "rewards" : [ {
      "method" : "PERCENTAGE",
      "type" : "AUTO_CASH_BACK",
      "value" : 20.271230230023217
    }, {
      "method" : "PERCENTAGE",
      "type" : "AUTO_CASH_BACK",
      "value" : 20.271230230023217
    } ]
  },
  "available_credit" : 6.027456183070403,
  "status" : "UNACTIVATED"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 

     - returns: RequestBuilder<AccountResponse> 
     */
    open class func retrieveAccountWithRequestBuilder(accountToken: String) -> RequestBuilder<AccountResponse> {
        var path = "/credit/accounts/{account_token}"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update account

     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account to update.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAccount(body: AccountUpdateReq, accountToken: String, completion: @escaping ((_ data: AccountResponse?,_ error: Error?) -> Void)) {
        updateAccountWithRequestBuilder(body: body, accountToken: accountToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update account
     - PUT /credit/accounts/{account_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "latest_statement_cycle_type" : "BEGINNING_REVOLVING",
  "bundle_token" : "bundle_token",
  "remaining_statement_balance" : 1.0246457001441578,
  "description" : "description",
  "remaining_min_payment_due" : 1.2315135367772556,
  "external_offer_id" : "external_offer_id",
  "type" : "CONSUMER",
  "currency_code" : "USD",
  "activation_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "credit_product_token" : "credit_product_token",
  "credit_limit" : 414560.8029883936,
  "name" : "name",
  "current_balance" : 7.386281948385884,
  "usages" : [ {
    "fees" : [ {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    }, {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    } ],
    "type" : "PURCHASE",
    "aprs" : [ {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    }, {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    } ]
  }, {
    "fees" : [ {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    }, {
      "type" : "FOREIGN_TRANSACTION_FEE",
      "value" : 7457.744699106318
    } ],
    "type" : "PURCHASE",
    "aprs" : [ {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    }, {
      "schedule" : [ {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      }, {
        "margin" : 1.4894159,
        "apply_next_cycle" : false,
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "type" : "FIXED",
        "value" : 68.4685269835264
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "GO_TO"
    } ]
  } ],
  "user_token" : "user_token",
  "config" : {
    "card_level" : "NA",
    "fees" : [ {
      "schedule" : [ {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      }, {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "LATE_PAYMENT_FEE"
    }, {
      "schedule" : [ {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      }, {
        "method" : "FLAT",
        "effective_date" : "2000-01-23T04:56:07.000+00:00",
        "value" : 5962.133857061844
      } ],
      "active" : true,
      "created_date" : "2000-01-23T04:56:07.000+00:00",
      "updated_date" : "2000-01-23T04:56:07.000+00:00",
      "type" : "LATE_PAYMENT_FEE"
    } ],
    "payment_holds" : {
      "ach_hold_days" : 6,
      "check_hold_days" : 2
    },
    "billing_cycle_day" : 1,
    "e_disclosure_active" : false,
    "min_payment" : {
      "min_payment_flat_amount" : 0.5637376656633328,
      "min_payment_percentage" : 0.23021358869347652,
      "override_end_time" : "2000-01-23T04:56:07.000+00:00",
      "active" : true,
      "override_start_time" : "2000-01-23T04:56:07.000+00:00"
    },
    "payment_due_day" : 31,
    "rewards" : [ {
      "method" : "PERCENTAGE",
      "type" : "AUTO_CASH_BACK",
      "value" : 20.271230230023217
    }, {
      "method" : "PERCENTAGE",
      "type" : "AUTO_CASH_BACK",
      "value" : 20.271230230023217
    } ]
  },
  "available_credit" : 6.027456183070403,
  "status" : "UNACTIVATED"
}}]
     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account to update.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 

     - returns: RequestBuilder<AccountResponse> 
     */
    open class func updateAccountWithRequestBuilder(body: AccountUpdateReq, accountToken: String) -> RequestBuilder<AccountResponse> {
        var path = "/credit/accounts/{account_token}"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
