//
// BusinessesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BusinessesAPI {
    /**
     List businesses

     - parameter count: (query) Number of business resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter businessNameDba: (query) Fictitious or \&quot;doing business as (DBA)\&quot; name of the business. (optional)
     - parameter businessNameLegal: (query) Legal name of the business. (optional)
     - parameter searchType: (query) Specifies the search type for the query. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBusinesses(count: Int? = nil, startIndex: Int? = nil, businessNameDba: String? = nil, businessNameLegal: String? = nil, searchType: String? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: BusinessCardHolderListResponse?,_ error: Error?) -> Void)) {
        getBusinessesWithRequestBuilder(count: count, startIndex: startIndex, businessNameDba: businessNameDba, businessNameLegal: businessNameLegal, searchType: searchType, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List businesses
     - GET /businesses

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "incorporation" : {
      "state_of_incorporation" : "state_of_incorporation",
      "stock_symbol" : "stock_symbol",
      "is_public" : false,
      "incorporation_type" : "LLC",
      "name_registered_under" : "name_registered_under"
    },
    "metadata" : {
      "key" : "metadata"
    },
    "notes" : "notes",
    "attestation_date" : "2000-01-23T04:56:07.000+00:00",
    "international_office_locations" : "international_office_locations",
    "account_holder_group_token" : "account_holder_group_token",
    "password" : "password",
    "business_type" : "business_type",
    "proprietor_or_officer" : {
      "phone" : "phone",
      "dob" : "2000-01-23T04:56:07.000+00:00",
      "last_name" : "last_name",
      "alternative_names" : "alternative_names",
      "middle_name" : "middle_name",
      "title" : "title",
      "first_name" : "first_name",
      "email" : "email",
      "identifications" : [ null, null ],
      "ssn" : "ssn"
    },
    "in_current_location_since" : "2000-01-23T04:56:07.000+00:00",
    "attestation_consent" : false,
    "general_business_description" : "general_business_description",
    "website" : "website",
    "attester_title" : "attester_title",
    "active" : true,
    "attester_name" : "attester_name",
    "beneficial_owner1" : {
      "phone" : "phone",
      "dob" : "2000-01-23T04:56:07.000+00:00",
      "last_name" : "last_name",
      "middle_name" : "middle_name",
      "title" : "title",
      "first_name" : "first_name",
      "home" : {
        "zip" : "zip",
        "country" : "country",
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "state" : "state",
        "postal_code" : "postal_code"
      },
      "ssn" : "ssn"
    },
    "history" : "history",
    "ip_address" : "ip_address",
    "business_name_legal" : "business_name_legal",
    "duns_number" : "duns_number",
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "date_established" : "2000-01-23T04:56:07.000+00:00",
    "phone" : "phone",
    "taxpayer_id" : "taxpayer_id",
    "business_name_dba" : "business_name_dba",
    "proprietor_is_beneficial_owner" : false,
    "primary_contact" : {
      "extension" : "extension",
      "full_name" : "full_name",
      "phone" : "phone",
      "mobile" : "mobile",
      "department" : "department",
      "fax" : "fax",
      "title" : "title",
      "email" : "email"
    }
  }, {
    "incorporation" : {
      "state_of_incorporation" : "state_of_incorporation",
      "stock_symbol" : "stock_symbol",
      "is_public" : false,
      "incorporation_type" : "LLC",
      "name_registered_under" : "name_registered_under"
    },
    "metadata" : {
      "key" : "metadata"
    },
    "notes" : "notes",
    "attestation_date" : "2000-01-23T04:56:07.000+00:00",
    "international_office_locations" : "international_office_locations",
    "account_holder_group_token" : "account_holder_group_token",
    "password" : "password",
    "business_type" : "business_type",
    "proprietor_or_officer" : {
      "phone" : "phone",
      "dob" : "2000-01-23T04:56:07.000+00:00",
      "last_name" : "last_name",
      "alternative_names" : "alternative_names",
      "middle_name" : "middle_name",
      "title" : "title",
      "first_name" : "first_name",
      "email" : "email",
      "identifications" : [ null, null ],
      "ssn" : "ssn"
    },
    "in_current_location_since" : "2000-01-23T04:56:07.000+00:00",
    "attestation_consent" : false,
    "general_business_description" : "general_business_description",
    "website" : "website",
    "attester_title" : "attester_title",
    "active" : true,
    "attester_name" : "attester_name",
    "beneficial_owner1" : {
      "phone" : "phone",
      "dob" : "2000-01-23T04:56:07.000+00:00",
      "last_name" : "last_name",
      "middle_name" : "middle_name",
      "title" : "title",
      "first_name" : "first_name",
      "home" : {
        "zip" : "zip",
        "country" : "country",
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "state" : "state",
        "postal_code" : "postal_code"
      },
      "ssn" : "ssn"
    },
    "history" : "history",
    "ip_address" : "ip_address",
    "business_name_legal" : "business_name_legal",
    "duns_number" : "duns_number",
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "date_established" : "2000-01-23T04:56:07.000+00:00",
    "phone" : "phone",
    "taxpayer_id" : "taxpayer_id",
    "business_name_dba" : "business_name_dba",
    "proprietor_is_beneficial_owner" : false,
    "primary_contact" : {
      "extension" : "extension",
      "full_name" : "full_name",
      "phone" : "phone",
      "mobile" : "mobile",
      "department" : "department",
      "fax" : "fax",
      "title" : "title",
      "email" : "email"
    }
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) Number of business resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter businessNameDba: (query) Fictitious or \&quot;doing business as (DBA)\&quot; name of the business. (optional)
     - parameter businessNameLegal: (query) Legal name of the business. (optional)
     - parameter searchType: (query) Specifies the search type for the query. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<BusinessCardHolderListResponse> 
     */
    open class func getBusinessesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, businessNameDba: String? = nil, businessNameLegal: String? = nil, searchType: String? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<BusinessCardHolderListResponse> {
        let path = "/businesses"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "business_name_dba": businessNameDba, 
                        "business_name_legal": businessNameLegal, 
                        "search_type": searchType, 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<BusinessCardHolderListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List business children

     - parameter parentToken: (path) Unique identifier of the parent business. 
     - parameter count: (query) Number of child cardholders to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBusinessesParenttokenChildren(parentToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: BusinessUserCardHolderListResponse?,_ error: Error?) -> Void)) {
        getBusinessesParenttokenChildrenWithRequestBuilder(parentToken: parentToken, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List business children
     - GET /businesses/{parent_token}/children

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "business_token" : "business_token",
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "authentication" : {
      "email_verified" : false,
      "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_channel" : "USER_CHANGE"
    },
    "honorific" : "honorific",
    "zip" : "zip",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : false,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token",
    "status" : "UNVERIFIED"
  }, {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "business_token" : "business_token",
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "authentication" : {
      "email_verified" : false,
      "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_channel" : "USER_CHANGE"
    },
    "honorific" : "honorific",
    "zip" : "zip",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : false,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token",
    "status" : "UNVERIFIED"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter parentToken: (path) Unique identifier of the parent business. 
     - parameter count: (query) Number of child cardholders to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<BusinessUserCardHolderListResponse> 
     */
    open class func getBusinessesParenttokenChildrenWithRequestBuilder(parentToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<BusinessUserCardHolderListResponse> {
        var path = "/businesses/{parent_token}/children"
        let parentTokenPreEscape = "\(parentToken)"
        let parentTokenPostEscape = parentTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{parent_token}", with: parentTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<BusinessUserCardHolderListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve business

     - parameter token: (path) Unique identifier of the business resource. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBusinessesToken(token: String, fields: String? = nil, completion: @escaping ((_ data: BusinessCardHolderResponse?,_ error: Error?) -> Void)) {
        getBusinessesTokenWithRequestBuilder(token: token, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve business
     - GET /businesses/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "incorporation" : {
    "state_of_incorporation" : "state_of_incorporation",
    "stock_symbol" : "stock_symbol",
    "is_public" : false,
    "incorporation_type" : "LLC",
    "name_registered_under" : "name_registered_under"
  },
  "metadata" : {
    "key" : "metadata"
  },
  "notes" : "notes",
  "attestation_date" : "2000-01-23T04:56:07.000+00:00",
  "international_office_locations" : "international_office_locations",
  "account_holder_group_token" : "account_holder_group_token",
  "password" : "password",
  "business_type" : "business_type",
  "proprietor_or_officer" : {
    "phone" : "phone",
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "last_name" : "last_name",
    "alternative_names" : "alternative_names",
    "middle_name" : "middle_name",
    "title" : "title",
    "first_name" : "first_name",
    "email" : "email",
    "identifications" : [ null, null ],
    "ssn" : "ssn"
  },
  "in_current_location_since" : "2000-01-23T04:56:07.000+00:00",
  "attestation_consent" : false,
  "authentication" : {
    "email_verified" : false,
    "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
    "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
    "last_password_update_channel" : "USER_CHANGE"
  },
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "general_business_description" : "general_business_description",
  "website" : "website",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "attester_title" : "attester_title",
  "active" : false,
  "attester_name" : "attester_name",
  "beneficial_owner1" : {
    "phone" : "phone",
    "getdob" : "2000-01-23T04:56:07.000+00:00",
    "last_name" : "last_name",
    "middle_name" : "middle_name",
    "title" : "title",
    "first_name" : "first_name",
    "home" : {
      "zip" : "zip",
      "country" : "country",
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "state" : "state",
      "postal_code" : "postal_code"
    }
  },
  "history" : "history",
  "ip_address" : "ip_address",
  "business_name_legal" : "business_name_legal",
  "duns_number" : "duns_number",
  "identifications" : [ {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  }, {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  } ],
  "token" : "token",
  "date_established" : "2000-01-23T04:56:07.000+00:00",
  "phone" : "phone",
  "taxpayer_id" : "taxpayer_id",
  "business_name_dba" : "business_name_dba",
  "proprietor_is_beneficial_owner" : false,
  "primary_contact" : {
    "extension" : "extension",
    "full_name" : "full_name",
    "phone" : "phone",
    "mobile" : "mobile",
    "department" : "department",
    "fax" : "fax",
    "title" : "title",
    "email" : "email"
  },
  "status" : "UNVERIFIED"
}}]
     - parameter token: (path) Unique identifier of the business resource. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<BusinessCardHolderResponse> 
     */
    open class func getBusinessesTokenWithRequestBuilder(token: String, fields: String? = nil) -> RequestBuilder<BusinessCardHolderResponse> {
        var path = "/businesses/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<BusinessCardHolderResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve business identification number

     - parameter token: (path) Unique identifier of the business resource. 
     - parameter fullSsn: (query) To return the full identification number, set to &#x60;true&#x60;. To return only the last four digits, set to &#x60;false&#x60;. If the &#x60;proprietor_or_officer.identifications&#x60; array contains only the last four digits of the identification number, the &#x60;/businesses/{token}/ssn&#x60; endpoint will return only the last four digits regardless of the &#x60;full_ssn&#x60; parameter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBusinessesTokenSsn(token: String, fullSsn: Bool? = nil, completion: @escaping ((_ data: SsnResponseModel?,_ error: Error?) -> Void)) {
        getBusinessesTokenSsnWithRequestBuilder(token: token, fullSsn: fullSsn).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve business identification number
     - GET /businesses/{token}/ssn

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "nin" : "nin",
  "tin" : "tin",
  "sin" : "sin",
  "ssn" : "ssn"
}}]
     - parameter token: (path) Unique identifier of the business resource. 
     - parameter fullSsn: (query) To return the full identification number, set to &#x60;true&#x60;. To return only the last four digits, set to &#x60;false&#x60;. If the &#x60;proprietor_or_officer.identifications&#x60; array contains only the last four digits of the identification number, the &#x60;/businesses/{token}/ssn&#x60; endpoint will return only the last four digits regardless of the &#x60;full_ssn&#x60; parameter. (optional)

     - returns: RequestBuilder<SsnResponseModel> 
     */
    open class func getBusinessesTokenSsnWithRequestBuilder(token: String, fullSsn: Bool? = nil) -> RequestBuilder<SsnResponseModel> {
        var path = "/businesses/{token}/ssn"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "full_ssn": fullSsn
        ])


        let requestBuilder: RequestBuilder<SsnResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create business

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postBusinesses(body: BusinessCardholder? = nil, completion: @escaping ((_ data: BusinessCardHolderResponse?,_ error: Error?) -> Void)) {
        postBusinessesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create business
     - POST /businesses

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "incorporation" : {
    "state_of_incorporation" : "state_of_incorporation",
    "stock_symbol" : "stock_symbol",
    "is_public" : false,
    "incorporation_type" : "LLC",
    "name_registered_under" : "name_registered_under"
  },
  "metadata" : {
    "key" : "metadata"
  },
  "notes" : "notes",
  "attestation_date" : "2000-01-23T04:56:07.000+00:00",
  "international_office_locations" : "international_office_locations",
  "account_holder_group_token" : "account_holder_group_token",
  "password" : "password",
  "business_type" : "business_type",
  "proprietor_or_officer" : {
    "phone" : "phone",
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "last_name" : "last_name",
    "alternative_names" : "alternative_names",
    "middle_name" : "middle_name",
    "title" : "title",
    "first_name" : "first_name",
    "email" : "email",
    "identifications" : [ null, null ],
    "ssn" : "ssn"
  },
  "in_current_location_since" : "2000-01-23T04:56:07.000+00:00",
  "attestation_consent" : false,
  "authentication" : {
    "email_verified" : false,
    "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
    "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
    "last_password_update_channel" : "USER_CHANGE"
  },
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "general_business_description" : "general_business_description",
  "website" : "website",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "attester_title" : "attester_title",
  "active" : false,
  "attester_name" : "attester_name",
  "beneficial_owner1" : {
    "phone" : "phone",
    "getdob" : "2000-01-23T04:56:07.000+00:00",
    "last_name" : "last_name",
    "middle_name" : "middle_name",
    "title" : "title",
    "first_name" : "first_name",
    "home" : {
      "zip" : "zip",
      "country" : "country",
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "state" : "state",
      "postal_code" : "postal_code"
    }
  },
  "history" : "history",
  "ip_address" : "ip_address",
  "business_name_legal" : "business_name_legal",
  "duns_number" : "duns_number",
  "identifications" : [ {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  }, {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  } ],
  "token" : "token",
  "date_established" : "2000-01-23T04:56:07.000+00:00",
  "phone" : "phone",
  "taxpayer_id" : "taxpayer_id",
  "business_name_dba" : "business_name_dba",
  "proprietor_is_beneficial_owner" : false,
  "primary_contact" : {
    "extension" : "extension",
    "full_name" : "full_name",
    "phone" : "phone",
    "mobile" : "mobile",
    "department" : "department",
    "fax" : "fax",
    "title" : "title",
    "email" : "email"
  },
  "status" : "UNVERIFIED"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<BusinessCardHolderResponse> 
     */
    open class func postBusinessesWithRequestBuilder(body: BusinessCardholder? = nil) -> RequestBuilder<BusinessCardHolderResponse> {
        let path = "/businesses"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BusinessCardHolderResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Search businesses

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postBusinessesLookup(body: DDARequest? = nil, completion: @escaping ((_ data: BusinessCardholder?,_ error: Error?) -> Void)) {
        postBusinessesLookupWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search businesses
     - POST /businesses/lookup

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "incorporation" : {
    "state_of_incorporation" : "state_of_incorporation",
    "stock_symbol" : "stock_symbol",
    "is_public" : false,
    "incorporation_type" : "LLC",
    "name_registered_under" : "name_registered_under"
  },
  "metadata" : {
    "key" : "metadata"
  },
  "notes" : "notes",
  "attestation_date" : "2000-01-23T04:56:07.000+00:00",
  "international_office_locations" : "international_office_locations",
  "account_holder_group_token" : "account_holder_group_token",
  "password" : "password",
  "business_type" : "business_type",
  "proprietor_or_officer" : {
    "phone" : "phone",
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "last_name" : "last_name",
    "alternative_names" : "alternative_names",
    "middle_name" : "middle_name",
    "title" : "title",
    "first_name" : "first_name",
    "email" : "email",
    "identifications" : [ null, null ],
    "ssn" : "ssn"
  },
  "in_current_location_since" : "2000-01-23T04:56:07.000+00:00",
  "attestation_consent" : false,
  "general_business_description" : "general_business_description",
  "website" : "website",
  "attester_title" : "attester_title",
  "active" : true,
  "attester_name" : "attester_name",
  "beneficial_owner1" : {
    "phone" : "phone",
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "last_name" : "last_name",
    "middle_name" : "middle_name",
    "title" : "title",
    "first_name" : "first_name",
    "home" : {
      "zip" : "zip",
      "country" : "country",
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "state" : "state",
      "postal_code" : "postal_code"
    },
    "ssn" : "ssn"
  },
  "history" : "history",
  "ip_address" : "ip_address",
  "business_name_legal" : "business_name_legal",
  "duns_number" : "duns_number",
  "identifications" : [ {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  }, {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  } ],
  "token" : "token",
  "date_established" : "2000-01-23T04:56:07.000+00:00",
  "phone" : "phone",
  "taxpayer_id" : "taxpayer_id",
  "business_name_dba" : "business_name_dba",
  "proprietor_is_beneficial_owner" : false,
  "primary_contact" : {
    "extension" : "extension",
    "full_name" : "full_name",
    "phone" : "phone",
    "mobile" : "mobile",
    "department" : "department",
    "fax" : "fax",
    "title" : "title",
    "email" : "email"
  }
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<BusinessCardholder> 
     */
    open class func postBusinessesLookupWithRequestBuilder(body: DDARequest? = nil) -> RequestBuilder<BusinessCardholder> {
        let path = "/businesses/lookup"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BusinessCardholder>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update business

     - parameter body: (body) Business object 
     - parameter token: (path) Unique identifier of the business resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putBusinessesToken(body: BusinessCardHolderUpdate, token: String, completion: @escaping ((_ data: BusinessCardholder?,_ error: Error?) -> Void)) {
        putBusinessesTokenWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update business
     - PUT /businesses/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "incorporation" : {
    "state_of_incorporation" : "state_of_incorporation",
    "stock_symbol" : "stock_symbol",
    "is_public" : false,
    "incorporation_type" : "LLC",
    "name_registered_under" : "name_registered_under"
  },
  "metadata" : {
    "key" : "metadata"
  },
  "notes" : "notes",
  "attestation_date" : "2000-01-23T04:56:07.000+00:00",
  "international_office_locations" : "international_office_locations",
  "account_holder_group_token" : "account_holder_group_token",
  "password" : "password",
  "business_type" : "business_type",
  "proprietor_or_officer" : {
    "phone" : "phone",
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "last_name" : "last_name",
    "alternative_names" : "alternative_names",
    "middle_name" : "middle_name",
    "title" : "title",
    "first_name" : "first_name",
    "email" : "email",
    "identifications" : [ null, null ],
    "ssn" : "ssn"
  },
  "in_current_location_since" : "2000-01-23T04:56:07.000+00:00",
  "attestation_consent" : false,
  "general_business_description" : "general_business_description",
  "website" : "website",
  "attester_title" : "attester_title",
  "active" : true,
  "attester_name" : "attester_name",
  "beneficial_owner1" : {
    "phone" : "phone",
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "last_name" : "last_name",
    "middle_name" : "middle_name",
    "title" : "title",
    "first_name" : "first_name",
    "home" : {
      "zip" : "zip",
      "country" : "country",
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "state" : "state",
      "postal_code" : "postal_code"
    },
    "ssn" : "ssn"
  },
  "history" : "history",
  "ip_address" : "ip_address",
  "business_name_legal" : "business_name_legal",
  "duns_number" : "duns_number",
  "identifications" : [ {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  }, {
    "expiration_date" : "expiration_date",
    "type" : "SSN",
    "value" : "value"
  } ],
  "token" : "token",
  "date_established" : "2000-01-23T04:56:07.000+00:00",
  "phone" : "phone",
  "taxpayer_id" : "taxpayer_id",
  "business_name_dba" : "business_name_dba",
  "proprietor_is_beneficial_owner" : false,
  "primary_contact" : {
    "extension" : "extension",
    "full_name" : "full_name",
    "phone" : "phone",
    "mobile" : "mobile",
    "department" : "department",
    "fax" : "fax",
    "title" : "title",
    "email" : "email"
  }
}}]
     - parameter body: (body) Business object 
     - parameter token: (path) Unique identifier of the business resource 

     - returns: RequestBuilder<BusinessCardholder> 
     */
    open class func putBusinessesTokenWithRequestBuilder(body: BusinessCardHolderUpdate, token: String) -> RequestBuilder<BusinessCardholder> {
        var path = "/businesses/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BusinessCardholder>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
