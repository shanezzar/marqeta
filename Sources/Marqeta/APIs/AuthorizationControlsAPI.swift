//
// AuthorizationControlsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AuthorizationControlsAPI {
    /**
     List authorization controls

     - parameter cardProduct: (query) Unique identifier of the card product whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a card product. (optional)
     - parameter user: (query) Unique identifier of the user whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a user. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthcontrols(cardProduct: String? = nil, user: String? = nil, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: AuthControlListResponse?,_ error: Error?) -> Void)) {
        getAuthcontrolsWithRequestBuilder(cardProduct: cardProduct, user: user, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List authorization controls
     - GET /authcontrols

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "start_time" : "2000-01-23T04:56:07.000+00:00",
    "end_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : true,
    "association" : {
      "card_product_token" : "card_product_token",
      "user_token" : "user_token"
    },
    "merchant_scope" : {
      "mcc_group" : "mcc_group",
      "merchant_group_token" : "merchant_group_token",
      "mid" : "mid",
      "mcc" : "mcc"
    },
    "token" : "token"
  }, {
    "start_time" : "2000-01-23T04:56:07.000+00:00",
    "end_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : true,
    "association" : {
      "card_product_token" : "card_product_token",
      "user_token" : "user_token"
    },
    "merchant_scope" : {
      "mcc_group" : "mcc_group",
      "merchant_group_token" : "merchant_group_token",
      "mid" : "mid",
      "mcc" : "mcc"
    },
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter cardProduct: (query) Unique identifier of the card product whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a card product. (optional)
     - parameter user: (query) Unique identifier of the user whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a user. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<AuthControlListResponse> 
     */
    open class func getAuthcontrolsWithRequestBuilder(cardProduct: String? = nil, user: String? = nil, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<AuthControlListResponse> {
        let path = "/authcontrols"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "card_product": cardProduct, 
                        "user": user, 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<AuthControlListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List merchant identifier (MID) exemptions

     - parameter cardProduct: (query) Unique identifier of the card product whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a card product. (optional)
     - parameter user: (query) Unique identifier of the user whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a user. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) The sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthcontrolsExemptmids(cardProduct: String? = nil, user: String? = nil, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: AuthControlExemptMidsListResponse?,_ error: Error?) -> Void)) {
        getAuthcontrolsExemptmidsWithRequestBuilder(cardProduct: cardProduct, user: user, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List merchant identifier (MID) exemptions
     - GET /authcontrols/exemptmids

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "start_time" : "2000-01-23T04:56:07.000+00:00",
    "last_updated" : "2000-01-23T04:56:07.000+00:00",
    "merchant_group_token" : "merchant_group_token",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "end_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : false,
    "association" : {
      "card_product_token" : "card_product_token",
      "user_token" : "user_token"
    },
    "mid" : "mid",
    "token" : "token"
  }, {
    "start_time" : "2000-01-23T04:56:07.000+00:00",
    "last_updated" : "2000-01-23T04:56:07.000+00:00",
    "merchant_group_token" : "merchant_group_token",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "end_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : false,
    "association" : {
      "card_product_token" : "card_product_token",
      "user_token" : "user_token"
    },
    "mid" : "mid",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter cardProduct: (query) Unique identifier of the card product whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a card product. (optional)
     - parameter user: (query) Unique identifier of the user whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a user. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) The sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<AuthControlExemptMidsListResponse> 
     */
    open class func getAuthcontrolsExemptmidsWithRequestBuilder(cardProduct: String? = nil, user: String? = nil, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<AuthControlExemptMidsListResponse> {
        let path = "/authcontrols/exemptmids"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "card_product": cardProduct, 
                        "user": user, 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<AuthControlExemptMidsListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve a merchant identifier (MID) exemption

     - parameter token: (path) Unique identifier of the authorization control resource. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthcontrolsExemptmidsToken(token: String, completion: @escaping ((_ data: AuthControlExemptMidsResponse?,_ error: Error?) -> Void)) {
        getAuthcontrolsExemptmidsTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve a merchant identifier (MID) exemption
     - GET /authcontrols/exemptmids/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "last_updated" : "2000-01-23T04:56:07.000+00:00",
  "merchant_group_token" : "merchant_group_token",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "end_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : false,
  "association" : {
    "card_product_token" : "card_product_token",
    "user_token" : "user_token"
  },
  "mid" : "mid",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the authorization control resource. 

     - returns: RequestBuilder<AuthControlExemptMidsResponse> 
     */
    open class func getAuthcontrolsExemptmidsTokenWithRequestBuilder(token: String) -> RequestBuilder<AuthControlExemptMidsResponse> {
        var path = "/authcontrols/exemptmids/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthControlExemptMidsResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve authorization control

     - parameter token: (path) Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthcontrolsToken(token: String, fields: String? = nil, completion: @escaping ((_ data: AuthControlResponse?,_ error: Error?) -> Void)) {
        getAuthcontrolsTokenWithRequestBuilder(token: token, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve authorization control
     - GET /authcontrols/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "end_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "association" : {
    "card_product_token" : "card_product_token",
    "user_token" : "user_token"
  },
  "merchant_scope" : {
    "mcc_group" : "mcc_group",
    "merchant_group_token" : "merchant_group_token",
    "mid" : "mid",
    "mcc" : "mcc"
  },
  "token" : "token"
}}]
     - parameter token: (path) Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<AuthControlResponse> 
     */
    open class func getAuthcontrolsTokenWithRequestBuilder(token: String, fields: String? = nil) -> RequestBuilder<AuthControlResponse> {
        var path = "/authcontrols/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<AuthControlResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create authorization control

     - parameter body: (body) Auth control object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthcontrols(body: AuthControlRequest, completion: @escaping ((_ data: AuthControlResponse?,_ error: Error?) -> Void)) {
        postAuthcontrolsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create authorization control
     - POST /authcontrols

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "end_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "association" : {
    "card_product_token" : "card_product_token",
    "user_token" : "user_token"
  },
  "merchant_scope" : {
    "mcc_group" : "mcc_group",
    "merchant_group_token" : "merchant_group_token",
    "mid" : "mid",
    "mcc" : "mcc"
  },
  "token" : "token"
}}]
     - parameter body: (body) Auth control object 

     - returns: RequestBuilder<AuthControlResponse> 
     */
    open class func postAuthcontrolsWithRequestBuilder(body: AuthControlRequest) -> RequestBuilder<AuthControlResponse> {
        let path = "/authcontrols"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthControlResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create a merchant identifier (MID) exemption

     - parameter body: (body) Auth control exempt MID object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthcontrolsExemptmids(body: AuthControlExemptMidsRequest, completion: @escaping ((_ data: AuthControlExemptMidsResponse?,_ error: Error?) -> Void)) {
        postAuthcontrolsExemptmidsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a merchant identifier (MID) exemption
     - POST /authcontrols/exemptmids

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "last_updated" : "2000-01-23T04:56:07.000+00:00",
  "merchant_group_token" : "merchant_group_token",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "end_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : false,
  "association" : {
    "card_product_token" : "card_product_token",
    "user_token" : "user_token"
  },
  "mid" : "mid",
  "token" : "token"
}}]
     - parameter body: (body) Auth control exempt MID object 

     - returns: RequestBuilder<AuthControlExemptMidsResponse> 
     */
    open class func postAuthcontrolsExemptmidsWithRequestBuilder(body: AuthControlExemptMidsRequest) -> RequestBuilder<AuthControlExemptMidsResponse> {
        let path = "/authcontrols/exemptmids"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthControlExemptMidsResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update a merchant identifier (MID) exemption

     - parameter token: (path) Unique identifier of the authorization control resource. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAuthcontrolsExemptmidsToken(token: String, body: AuthControlExemptMidsUpdateRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putAuthcontrolsExemptmidsTokenWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update a merchant identifier (MID) exemption
     - PUT /authcontrols/exemptmids/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - parameter token: (path) Unique identifier of the authorization control resource. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putAuthcontrolsExemptmidsTokenWithRequestBuilder(token: String, body: AuthControlExemptMidsUpdateRequest? = nil) -> RequestBuilder<Void> {
        var path = "/authcontrols/exemptmids/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update authorization control

     - parameter body: (body) Auth control object 
     - parameter token: (path) Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAuthcontrolsToken(body: AuthControlUpdateRequest, token: String, completion: @escaping ((_ data: AuthControlResponse?,_ error: Error?) -> Void)) {
        putAuthcontrolsTokenWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update authorization control
     - PUT /authcontrols/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "end_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "association" : {
    "card_product_token" : "card_product_token",
    "user_token" : "user_token"
  },
  "merchant_scope" : {
    "mcc_group" : "mcc_group",
    "merchant_group_token" : "merchant_group_token",
    "mid" : "mid",
    "mcc" : "mcc"
  },
  "token" : "token"
}}]
     - parameter body: (body) Auth control object 
     - parameter token: (path) Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. 

     - returns: RequestBuilder<AuthControlResponse> 
     */
    open class func putAuthcontrolsTokenWithRequestBuilder(body: AuthControlUpdateRequest, token: String) -> RequestBuilder<AuthControlResponse> {
        var path = "/authcontrols/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthControlResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
