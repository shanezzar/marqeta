//
// RewardProgramsBetaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class RewardProgramsBetaAPI {
    /**
     Create reward entry

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRewardProgramEntry(token: String, body: CreateRewardProgramsEntriesRequest? = nil, completion: @escaping ((_ data: RewardProgramsEntriesResponse?,_ error: Error?) -> Void)) {
        postRewardProgramEntryWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create reward entry
     - POST /credit/rewardprograms/{token}/entries

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "related_redemption_token" : "related_redemption_token",
  "reward_program_token" : "reward_program_token",
  "transaction_amount" : 6.027456183070403,
  "related_journal_entry_token" : "related_journal_entry_token",
  "mid" : "mid",
  "reward_rules_config_token" : "reward_rules_config_token",
  "mcc" : "mcc",
  "value" : 1.4658129805029452,
  "status" : "PENDING",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<RewardProgramsEntriesResponse> 
     */
    open class func postRewardProgramEntryWithRequestBuilder(token: String, body: CreateRewardProgramsEntriesRequest? = nil) -> RequestBuilder<RewardProgramsEntriesResponse> {
        var path = "/credit/rewardprograms/{token}/entries"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RewardProgramsEntriesResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Retrieve reward program

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRewardProgram(token: String, completion: @escaping ((_ data: RewardProgramsResponse?,_ error: Error?) -> Void)) {
        retrieveRewardProgramWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve reward program
     - GET /credit/rewardprograms/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "calculation_type" : "NET_BALANCE",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "is_active" : true,
  "bundle_token" : "bundle_token",
  "account_token" : "account_token",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the reward program. 

     - returns: RequestBuilder<RewardProgramsResponse> 
     */
    open class func retrieveRewardProgramWithRequestBuilder(token: String) -> RequestBuilder<RewardProgramsResponse> {
        var path = "/credit/rewardprograms/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RewardProgramsResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve reward program balances

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRewardProgramBalance(token: String, completion: @escaping ((_ data: RewardProgramsBalancesResponse?,_ error: Error?) -> Void)) {
        retrieveRewardProgramBalanceWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve reward program balances
     - GET /credit/rewardprograms/{token}/balances

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "net_balance" : 0.8008281904610115,
  "percentage" : 1,
  "reward_program_token" : "reward_program_token",
  "billing_cycle_opening_date" : "2000-01-23T04:56:07.000+00:00",
  "total_reward_balance" : 5.962133916683182,
  "billing_cycle_closing_date" : "2000-01-23T04:56:07.000+00:00",
  "pending_reward_balance" : 6.027456183070403
}}]
     - parameter token: (path) Unique identifier of the reward program. 

     - returns: RequestBuilder<RewardProgramsBalancesResponse> 
     */
    open class func retrieveRewardProgramBalanceWithRequestBuilder(token: String) -> RequestBuilder<RewardProgramsBalancesResponse> {
        var path = "/credit/rewardprograms/{token}/balances"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RewardProgramsBalancesResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_retrieveRewardProgramEntries: String { 
        case createdtime = "createdTime"
        case createdtime_1 = "-createdTime"
    }

    /**
     List reward entries

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter startDate: (query) The starting date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter endDate: (query) The ending date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)
     - parameter status: (query) Status of the reward entries in the returned array. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRewardProgramEntries(token: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int64? = nil, sortBy: SortBy_retrieveRewardProgramEntries? = nil, status: [RewardEntryStatus]? = nil, completion: @escaping ((_ data: RewardProgramsEntriesPage?,_ error: Error?) -> Void)) {
        retrieveRewardProgramEntriesWithRequestBuilder(token: token, startDate: startDate, endDate: endDate, count: count, startIndex: startIndex, sortBy: sortBy, status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List reward entries
     - GET /credit/rewardprograms/{token}/entries

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "related_redemption_token" : "related_redemption_token",
    "reward_program_token" : "reward_program_token",
    "transaction_amount" : 6.027456183070403,
    "related_journal_entry_token" : "related_journal_entry_token",
    "mid" : "mid",
    "reward_rules_config_token" : "reward_rules_config_token",
    "mcc" : "mcc",
    "value" : 1.4658129805029452,
    "status" : "PENDING",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "related_redemption_token" : "related_redemption_token",
    "reward_program_token" : "reward_program_token",
    "transaction_amount" : 6.027456183070403,
    "related_journal_entry_token" : "related_journal_entry_token",
    "mid" : "mid",
    "reward_rules_config_token" : "reward_rules_config_token",
    "mcc" : "mcc",
    "value" : 1.4658129805029452,
    "status" : "PENDING",
    "token" : "token"
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 5
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter startDate: (query) The starting date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter endDate: (query) The ending date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)
     - parameter status: (query) Status of the reward entries in the returned array. (optional)

     - returns: RequestBuilder<RewardProgramsEntriesPage> 
     */
    open class func retrieveRewardProgramEntriesWithRequestBuilder(token: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int64? = nil, sortBy: SortBy_retrieveRewardProgramEntries? = nil, status: [RewardEntryStatus]? = nil) -> RequestBuilder<RewardProgramsEntriesPage> {
        var path = "/credit/rewardprograms/{token}/entries"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start_date": startDate?.encodeToJSON(), 
                        "end_date": endDate?.encodeToJSON(), 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue, 
                        "status": status
        ])


        let requestBuilder: RequestBuilder<RewardProgramsEntriesPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve reward entries balance

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter startDate: (query) The starting date (or date-time) of a date range from which to return resources, in UTC. 
     - parameter endDate: (query) The ending date (or date-time) of a date range from which to return resources, in UTC. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRewardProgramEntriesBalance(token: String, startDate: Date, endDate: Date, completion: @escaping ((_ data: RewardProgramsEntriesBalanceResponse?,_ error: Error?) -> Void)) {
        retrieveRewardProgramEntriesBalanceWithRequestBuilder(token: token, startDate: startDate, endDate: endDate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve reward entries balance
     - GET /credit/rewardprograms/{token}/entries/balance

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "reward_program_token" : "reward_program_token",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "total_reward_balance" : 0.8008281904610115,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter startDate: (query) The starting date (or date-time) of a date range from which to return resources, in UTC. 
     - parameter endDate: (query) The ending date (or date-time) of a date range from which to return resources, in UTC. 

     - returns: RequestBuilder<RewardProgramsEntriesBalanceResponse> 
     */
    open class func retrieveRewardProgramEntriesBalanceWithRequestBuilder(token: String, startDate: Date, endDate: Date) -> RequestBuilder<RewardProgramsEntriesBalanceResponse> {
        var path = "/credit/rewardprograms/{token}/entries/balance"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start_date": startDate.encodeToJSON(), 
                        "end_date": endDate.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<RewardProgramsEntriesBalanceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve reward entry

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter entryToken: (path) Unique identifier of the reward entry to retrieve. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRewardProgramEntry(token: String, entryToken: String, completion: @escaping ((_ data: RewardProgramsEntriesResponse?,_ error: Error?) -> Void)) {
        retrieveRewardProgramEntryWithRequestBuilder(token: token, entryToken: entryToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve reward entry
     - GET /credit/rewardprograms/{token}/entries/{entry_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "related_redemption_token" : "related_redemption_token",
  "reward_program_token" : "reward_program_token",
  "transaction_amount" : 6.027456183070403,
  "related_journal_entry_token" : "related_journal_entry_token",
  "mid" : "mid",
  "reward_rules_config_token" : "reward_rules_config_token",
  "mcc" : "mcc",
  "value" : 1.4658129805029452,
  "status" : "PENDING",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter entryToken: (path) Unique identifier of the reward entry to retrieve. 

     - returns: RequestBuilder<RewardProgramsEntriesResponse> 
     */
    open class func retrieveRewardProgramEntryWithRequestBuilder(token: String, entryToken: String) -> RequestBuilder<RewardProgramsEntriesResponse> {
        var path = "/credit/rewardprograms/{token}/entries/{entry_token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let entryTokenPreEscape = "\(entryToken)"
        let entryTokenPostEscape = entryTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{entry_token}", with: entryTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RewardProgramsEntriesResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_retrieveRewardPrograms: String { 
        case updatedtime = "updatedTime"
        case updatedtime_1 = "-updatedTime"
    }

    /**
     List reward programs

     - parameter accountToken: (query) The unique identifier of the credit account for which you want to retrieve reward programs. (optional)
     - parameter isActive: (query) A value of &#x60;true&#x60; returns active resources; &#x60;false&#x60; returns inactive resources. (optional)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;updatedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;updated_time&#x60;. (optional, default to -updatedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRewardPrograms(accountToken: String? = nil, isActive: Bool? = nil, count: Int? = nil, startIndex: Int64? = nil, sortBy: SortBy_retrieveRewardPrograms? = nil, completion: @escaping ((_ data: RewardProgramsPageResponse?,_ error: Error?) -> Void)) {
        retrieveRewardProgramsWithRequestBuilder(accountToken: accountToken, isActive: isActive, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List reward programs
     - GET /credit/rewardprograms

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "calculation_type" : "NET_BALANCE",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "is_active" : true,
    "bundle_token" : "bundle_token",
    "account_token" : "account_token",
    "token" : "token"
  }, {
    "calculation_type" : "NET_BALANCE",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "is_active" : true,
    "bundle_token" : "bundle_token",
    "account_token" : "account_token",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter accountToken: (query) The unique identifier of the credit account for which you want to retrieve reward programs. (optional)
     - parameter isActive: (query) A value of &#x60;true&#x60; returns active resources; &#x60;false&#x60; returns inactive resources. (optional)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;updatedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;updated_time&#x60;. (optional, default to -updatedTime)

     - returns: RequestBuilder<RewardProgramsPageResponse> 
     */
    open class func retrieveRewardProgramsWithRequestBuilder(accountToken: String? = nil, isActive: Bool? = nil, count: Int? = nil, startIndex: Int64? = nil, sortBy: SortBy_retrieveRewardPrograms? = nil) -> RequestBuilder<RewardProgramsPageResponse> {
        let path = "/credit/rewardprograms"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "account_token": accountToken, 
                        "is_active": isActive, 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<RewardProgramsPageResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_retrieveRewardProgramsRulesConfig: String { 
        case updatedtime = "updatedTime"
        case updatedtime_1 = "-updatedTime"
    }

    /**
     List rules configurations

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter isActive: (query) A value of &#x60;true&#x60; returns active resources; &#x60;false&#x60; returns inactive resources. (optional)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;updatedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;updated_time&#x60;. (optional, default to -updatedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRewardProgramsRulesConfig(token: String, isActive: Bool? = nil, count: Int? = nil, startIndex: Int64? = nil, sortBy: SortBy_retrieveRewardProgramsRulesConfig? = nil, completion: @escaping ((_ data: RewardProgramsRulesConfigsPage?,_ error: Error?) -> Void)) {
        retrieveRewardProgramsRulesConfigWithRequestBuilder(token: token, isActive: isActive, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List rules configurations
     - GET /credit/rewardprograms/{token}/rulesconfigs

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "is_active" : true,
    "greater_than" : 0.6027456183070403,
    "less_than" : 0.14658129805029452,
    "percentage" : 5,
    "reward_program_token" : "reward_program_token",
    "accrual_type" : "CASHBACK",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "is_active" : true,
    "greater_than" : 0.6027456183070403,
    "less_than" : 0.14658129805029452,
    "percentage" : 5,
    "reward_program_token" : "reward_program_token",
    "accrual_type" : "CASHBACK",
    "token" : "token"
  } ],
  "start_index" : 2,
  "count" : 0,
  "end_index" : 5
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter isActive: (query) A value of &#x60;true&#x60; returns active resources; &#x60;false&#x60; returns inactive resources. (optional)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;updatedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;updated_time&#x60;. (optional, default to -updatedTime)

     - returns: RequestBuilder<RewardProgramsRulesConfigsPage> 
     */
    open class func retrieveRewardProgramsRulesConfigWithRequestBuilder(token: String, isActive: Bool? = nil, count: Int? = nil, startIndex: Int64? = nil, sortBy: SortBy_retrieveRewardProgramsRulesConfig? = nil) -> RequestBuilder<RewardProgramsRulesConfigsPage> {
        var path = "/credit/rewardprograms/{token}/rulesconfigs"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "is_active": isActive, 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<RewardProgramsRulesConfigsPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve last rules configuration applied

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRewardProgramsRulesConfigApplied(token: String, completion: @escaping ((_ data: RewardProgramsRulesConfigsResponse?,_ error: Error?) -> Void)) {
        retrieveRewardProgramsRulesConfigAppliedWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve last rules configuration applied
     - GET /credit/rewardprograms/{token}/rulesconfigs/applied

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "is_active" : true,
  "greater_than" : 0.6027456183070403,
  "less_than" : 0.14658129805029452,
  "percentage" : 5,
  "reward_program_token" : "reward_program_token",
  "accrual_type" : "CASHBACK",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the reward program. 

     - returns: RequestBuilder<RewardProgramsRulesConfigsResponse> 
     */
    open class func retrieveRewardProgramsRulesConfigAppliedWithRequestBuilder(token: String) -> RequestBuilder<RewardProgramsRulesConfigsResponse> {
        var path = "/credit/rewardprograms/{token}/rulesconfigs/applied"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RewardProgramsRulesConfigsResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Activate or deactivate reward program

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateRewardProgram(token: String, body: PutRewardProgramsRequest? = nil, completion: @escaping ((_ data: RewardProgramsResponse?,_ error: Error?) -> Void)) {
        updateRewardProgramWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Activate or deactivate reward program
     - PUT /credit/rewardprograms/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "calculation_type" : "NET_BALANCE",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "is_active" : true,
  "bundle_token" : "bundle_token",
  "account_token" : "account_token",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<RewardProgramsResponse> 
     */
    open class func updateRewardProgramWithRequestBuilder(token: String, body: PutRewardProgramsRequest? = nil) -> RequestBuilder<RewardProgramsResponse> {
        var path = "/credit/rewardprograms/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RewardProgramsResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
