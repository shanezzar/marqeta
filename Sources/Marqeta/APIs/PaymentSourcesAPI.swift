//
// PaymentSourcesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PaymentSourcesAPI {
    /**
     Create payment source

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPaymentSource(body: PaymentSourceCreateReq, completion: @escaping ((_ data: PaymentSourceResponse?,_ error: Error?) -> Void)) {
        createPaymentSourceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create payment source
     - POST /credit/paymentsources

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "owner" : "INDIVIDUAL",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_suffix" : "account_suffix",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "account_token" : "account_token",
  "verification_notes" : "verification_notes",
  "source_type" : "CHECKING",
  "routing_number" : "routing_number",
  "verification_status" : "ACH_VERIFIED",
  "token" : "token",
  "name" : "name",
  "user_token" : "user_token",
  "status" : "ACTIVE"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PaymentSourceResponse> 
     */
    open class func createPaymentSourceWithRequestBuilder(body: PaymentSourceCreateReq) -> RequestBuilder<PaymentSourceResponse> {
        let path = "/credit/paymentsources"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listPaymentSources: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List payment sources

     - parameter accountToken: (query) The unique identifier of the credit account associated with the payment source. (optional)
     - parameter userToken: (query) The unique identifier of the user associated with the payment source. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listPaymentSources(accountToken: String? = nil, userToken: String? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listPaymentSources? = nil, completion: @escaping ((_ data: PaymentSourcePage?,_ error: Error?) -> Void)) {
        listPaymentSourcesWithRequestBuilder(accountToken: accountToken, userToken: userToken, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List payment sources
     - GET /credit/paymentsources

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "owner" : "INDIVIDUAL",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "account_suffix" : "account_suffix",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "account_token" : "account_token",
    "verification_notes" : "verification_notes",
    "source_type" : "CHECKING",
    "routing_number" : "routing_number",
    "verification_status" : "ACH_VERIFIED",
    "token" : "token",
    "name" : "name",
    "user_token" : "user_token",
    "status" : "ACTIVE"
  }, {
    "owner" : "INDIVIDUAL",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "account_suffix" : "account_suffix",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "account_token" : "account_token",
    "verification_notes" : "verification_notes",
    "source_type" : "CHECKING",
    "routing_number" : "routing_number",
    "verification_status" : "ACH_VERIFIED",
    "token" : "token",
    "name" : "name",
    "user_token" : "user_token",
    "status" : "ACTIVE"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter accountToken: (query) The unique identifier of the credit account associated with the payment source. (optional)
     - parameter userToken: (query) The unique identifier of the user associated with the payment source. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<PaymentSourcePage> 
     */
    open class func listPaymentSourcesWithRequestBuilder(accountToken: String? = nil, userToken: String? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listPaymentSources? = nil) -> RequestBuilder<PaymentSourcePage> {
        let path = "/credit/paymentsources"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "account_token": accountToken, 
                        "user_token": userToken, 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<PaymentSourcePage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve payment source

     - parameter token: (path) The unique identifier of the payment source to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/paymentsources&#x60; to retrieve existing payment source tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrievePaymentSource(token: String, completion: @escaping ((_ data: PaymentSourceResponse?,_ error: Error?) -> Void)) {
        retrievePaymentSourceWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve payment source
     - GET /credit/paymentsources/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "owner" : "INDIVIDUAL",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_suffix" : "account_suffix",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "account_token" : "account_token",
  "verification_notes" : "verification_notes",
  "source_type" : "CHECKING",
  "routing_number" : "routing_number",
  "verification_status" : "ACH_VERIFIED",
  "token" : "token",
  "name" : "name",
  "user_token" : "user_token",
  "status" : "ACTIVE"
}}]
     - parameter token: (path) The unique identifier of the payment source to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/paymentsources&#x60; to retrieve existing payment source tokens. 

     - returns: RequestBuilder<PaymentSourceResponse> 
     */
    open class func retrievePaymentSourceWithRequestBuilder(token: String) -> RequestBuilder<PaymentSourceResponse> {
        var path = "/credit/paymentsources/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update payment source

     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the payment source to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/paymentsources&#x60; to retrieve existing payment source tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePaymentSource(body: PaymentSourceUpdateReq, token: String, completion: @escaping ((_ data: PaymentSourceResponse?,_ error: Error?) -> Void)) {
        updatePaymentSourceWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update payment source
     - PUT /credit/paymentsources/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "owner" : "INDIVIDUAL",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_suffix" : "account_suffix",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "account_token" : "account_token",
  "verification_notes" : "verification_notes",
  "source_type" : "CHECKING",
  "routing_number" : "routing_number",
  "verification_status" : "ACH_VERIFIED",
  "token" : "token",
  "name" : "name",
  "user_token" : "user_token",
  "status" : "ACTIVE"
}}]
     - parameter body: (body)  
     - parameter token: (path) The unique identifier of the payment source to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/paymentsources&#x60; to retrieve existing payment source tokens. 

     - returns: RequestBuilder<PaymentSourceResponse> 
     */
    open class func updatePaymentSourceWithRequestBuilder(body: PaymentSourceUpdateReq, token: String) -> RequestBuilder<PaymentSourceResponse> {
        var path = "/credit/paymentsources/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
