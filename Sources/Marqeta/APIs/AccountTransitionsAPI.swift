//
// AccountTransitionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AccountTransitionsAPI {
    /**
     Retrieve account transition

     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve a transition.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter token: (path) The unique identifier of the account transition you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountTransition(accountToken: String, token: String, completion: @escaping ((_ data: AccountTransitionResponse?,_ error: Error?) -> Void)) {
        getAccountTransitionWithRequestBuilder(accountToken: accountToken, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve account transition
     - GET /credit/accounts/{account_token}/accounttransitions/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "original_status" : "UNACTIVATED",
  "account_token" : "account_token",
  "token" : "token"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve a transition.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter token: (path) The unique identifier of the account transition you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens. 

     - returns: RequestBuilder<AccountTransitionResponse> 
     */
    open class func getAccountTransitionWithRequestBuilder(accountToken: String, token: String) -> RequestBuilder<AccountTransitionResponse> {
        var path = "/credit/accounts/{account_token}/accounttransitions/{token}"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listAccountTransitions: String { 
        case createdtime = "createdTime"
        case createdtime_1 = "-createdTime"
    }

    /**
     List account transitions

     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve transitions.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAccountTransitions(accountToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listAccountTransitions? = nil, completion: @escaping ((_ data: AccountTransitionsPage?,_ error: Error?) -> Void)) {
        listAccountTransitionsWithRequestBuilder(accountToken: accountToken, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List account transitions
     - GET /credit/accounts/{account_token}/accounttransitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "original_status" : "UNACTIVATED",
    "account_token" : "account_token",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "original_status" : "UNACTIVATED",
    "account_token" : "account_token",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve transitions.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)

     - returns: RequestBuilder<AccountTransitionsPage> 
     */
    open class func listAccountTransitionsWithRequestBuilder(accountToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listAccountTransitions? = nil) -> RequestBuilder<AccountTransitionsPage> {
        var path = "/credit/accounts/{account_token}/accounttransitions"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<AccountTransitionsPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter eventType
     */
    public enum EventType_resendWebhookEvent: String { 
        case ledgerentry = "ledgerentry"
        case journalentry = "journalentry"
        case accounttransition = "accounttransition"
        case accountstatement = "accountstatement"
        case paymenttransition = "paymenttransition"
        case delinquencytransition = "delinquencytransition"
    }

    /**
     Resend credit event notification

     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter resourceToken: (path) The unique identifier of the resource for which you want to resend a notification.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/journalentries&#x60; to retrieve existing journal entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/ledgerentries&#x60; to retrieve existing ledger entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments/{payment_token}&#x60; to retrieve existing payment transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/statements&#x60; to retrieve existing statement summary tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/delinquencystate/transitions&#x60; to retrieve existing delinquency state transition tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendWebhookEvent(eventType: EventType_resendWebhookEvent, resourceToken: String, completion: @escaping ((_ data: WebhookEventResendContainerResponse?,_ error: Error?) -> Void)) {
        resendWebhookEventWithRequestBuilder(eventType: eventType, resourceToken: resourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Resend credit event notification
     - POST /credit/webhooks/{event_type}/{resource_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "unused" : "unused"
}}]
     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter resourceToken: (path) The unique identifier of the resource for which you want to resend a notification.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/journalentries&#x60; to retrieve existing journal entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/ledgerentries&#x60; to retrieve existing ledger entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments/{payment_token}&#x60; to retrieve existing payment transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/statements&#x60; to retrieve existing statement summary tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/delinquencystate/transitions&#x60; to retrieve existing delinquency state transition tokens. 

     - returns: RequestBuilder<WebhookEventResendContainerResponse> 
     */
    open class func resendWebhookEventWithRequestBuilder(eventType: EventType_resendWebhookEvent, resourceToken: String) -> RequestBuilder<WebhookEventResendContainerResponse> {
        var path = "/credit/webhooks/{event_type}/{resource_token}"
        let eventTypePreEscape = "\(eventType.rawValue)"
        let eventTypePostEscape = eventTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_type}", with: eventTypePostEscape, options: .literal, range: nil)
        let resourceTokenPreEscape = "\(resourceToken)"
        let resourceTokenPostEscape = resourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_token}", with: resourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookEventResendContainerResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Transition account status

     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which to transition a status.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transitionAccount(body: AccountTransitionReq, accountToken: String, completion: @escaping ((_ data: AccountTransitionResponse?,_ error: Error?) -> Void)) {
        transitionAccountWithRequestBuilder(body: body, accountToken: accountToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Transition account status
     - POST /credit/accounts/{account_token}/accounttransitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "original_status" : "UNACTIVATED",
  "account_token" : "account_token",
  "token" : "token"
}}]
     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which to transition a status.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 

     - returns: RequestBuilder<AccountTransitionResponse> 
     */
    open class func transitionAccountWithRequestBuilder(body: AccountTransitionReq, accountToken: String) -> RequestBuilder<AccountTransitionResponse> {
        var path = "/credit/accounts/{account_token}/accounttransitions"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
