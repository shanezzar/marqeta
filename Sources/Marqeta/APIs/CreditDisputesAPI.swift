//
// CreditDisputesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CreditDisputesAPI {
    /**
     Create account dispute

     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which to create a dispute.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDisputeForAccount(body: DisputeCreateReq, accountToken: String, completion: @escaping ((_ data: DisputeResponse?,_ error: Error?) -> Void)) {
        createDisputeForAccountWithRequestBuilder(body: body, accountToken: accountToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create account dispute
     - POST /credit/accounts/{account_token}/disputes

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 6.027456183070403,
  "notes" : "notes",
  "resolved_at" : "2000-01-23T04:56:07.000+00:00",
  "account_token" : "account_token",
  "ledger_entry_token" : "ledger_entry_token",
  "category" : "FRAUD",
  "status" : "ACTIVE",
  "token" : "token"
}}]
     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which to create a dispute.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 

     - returns: RequestBuilder<DisputeResponse> 
     */
    open class func createDisputeForAccountWithRequestBuilder(body: DisputeCreateReq, accountToken: String) -> RequestBuilder<DisputeResponse> {
        var path = "/credit/accounts/{account_token}/disputes"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DisputeResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_getDisputesByAccount: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List account disputes

     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve the disputes.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDisputesByAccount(accountToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getDisputesByAccount? = nil, completion: @escaping ((_ data: DisputeResponsePage?,_ error: Error?) -> Void)) {
        getDisputesByAccountWithRequestBuilder(accountToken: accountToken, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List account disputes
     - GET /credit/accounts/{account_token}/disputes

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 6.027456183070403,
    "notes" : "notes",
    "resolved_at" : "2000-01-23T04:56:07.000+00:00",
    "account_token" : "account_token",
    "ledger_entry_token" : "ledger_entry_token",
    "category" : "FRAUD",
    "status" : "ACTIVE",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 6.027456183070403,
    "notes" : "notes",
    "resolved_at" : "2000-01-23T04:56:07.000+00:00",
    "account_token" : "account_token",
    "ledger_entry_token" : "ledger_entry_token",
    "category" : "FRAUD",
    "status" : "ACTIVE",
    "token" : "token"
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 1
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve the disputes.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<DisputeResponsePage> 
     */
    open class func getDisputesByAccountWithRequestBuilder(accountToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getDisputesByAccount? = nil) -> RequestBuilder<DisputeResponsePage> {
        var path = "/credit/accounts/{account_token}/disputes"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<DisputeResponsePage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve account dispute

     - parameter accountToken: (path) The unique identifier of the credit account from which to retrieve a dispute.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter disputeToken: (path) The unique identifier of the dispute to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/disputes&#x60; to retrieve existing dispute tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveDispute(accountToken: String, disputeToken: String, completion: @escaping ((_ data: DisputeResponse?,_ error: Error?) -> Void)) {
        retrieveDisputeWithRequestBuilder(accountToken: accountToken, disputeToken: disputeToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve account dispute
     - GET /credit/accounts/{account_token}/disputes/{dispute_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 6.027456183070403,
  "notes" : "notes",
  "resolved_at" : "2000-01-23T04:56:07.000+00:00",
  "account_token" : "account_token",
  "ledger_entry_token" : "ledger_entry_token",
  "category" : "FRAUD",
  "status" : "ACTIVE",
  "token" : "token"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account from which to retrieve a dispute.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter disputeToken: (path) The unique identifier of the dispute to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/disputes&#x60; to retrieve existing dispute tokens. 

     - returns: RequestBuilder<DisputeResponse> 
     */
    open class func retrieveDisputeWithRequestBuilder(accountToken: String, disputeToken: String) -> RequestBuilder<DisputeResponse> {
        var path = "/credit/accounts/{account_token}/disputes/{dispute_token}"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let disputeTokenPreEscape = "\(disputeToken)"
        let disputeTokenPostEscape = disputeTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dispute_token}", with: disputeTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DisputeResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update account dispute

     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account from which to update a dispute.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter disputeToken: (path) The unique identifier of the dispute to update.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/disputes&#x60; to retrieve existing credit account tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transitionDispute(body: DisputeTransitionReq, accountToken: String, disputeToken: String, completion: @escaping ((_ data: DisputeTransitionResponse?,_ error: Error?) -> Void)) {
        transitionDisputeWithRequestBuilder(body: body, accountToken: accountToken, disputeToken: disputeToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update account dispute
     - POST /credit/accounts/{account_token}/disputes/{dispute_token}/transitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "notes" : "notes",
  "account_token" : "account_token",
  "status" : "ACTIVE",
  "token" : "token"
}}]
     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account from which to update a dispute.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter disputeToken: (path) The unique identifier of the dispute to update.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/disputes&#x60; to retrieve existing credit account tokens. 

     - returns: RequestBuilder<DisputeTransitionResponse> 
     */
    open class func transitionDisputeWithRequestBuilder(body: DisputeTransitionReq, accountToken: String, disputeToken: String) -> RequestBuilder<DisputeTransitionResponse> {
        var path = "/credit/accounts/{account_token}/disputes/{dispute_token}/transitions"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let disputeTokenPreEscape = "\(disputeToken)"
        let disputeTokenPostEscape = disputeTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dispute_token}", with: disputeTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DisputeTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
