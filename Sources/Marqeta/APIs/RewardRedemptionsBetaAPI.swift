//
// RewardRedemptionsBetaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class RewardRedemptionsBetaAPI {
    /**
     Retrieve reward redemption

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter redemptionToken: (path) Unique identifier of the reward redemption. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRedemption(token: String, redemptionToken: String, completion: @escaping ((_ data: RedemptionsResponse?,_ error: Error?) -> Void)) {
        getRedemptionWithRequestBuilder(token: token, redemptionToken: redemptionToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve reward redemption
     - GET /credit/rewardprograms/{token}/redemptions/{redemption_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "external_settlement_date_time" : "2000-01-23T04:56:07.000+00:00",
  "related_reward_entries" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "related_redemption_token" : "related_redemption_token",
    "reward_program_token" : "reward_program_token",
    "transaction_amount" : 6.027456183070403,
    "related_journal_entry_token" : "related_journal_entry_token",
    "mid" : "mid",
    "reward_rules_config_token" : "reward_rules_config_token",
    "mcc" : "mcc",
    "value" : 1.4658129805029452,
    "status" : "PENDING",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "related_redemption_token" : "related_redemption_token",
    "reward_program_token" : "reward_program_token",
    "transaction_amount" : 6.027456183070403,
    "related_journal_entry_token" : "related_journal_entry_token",
    "mid" : "mid",
    "reward_rules_config_token" : "reward_rules_config_token",
    "mcc" : "mcc",
    "value" : 1.4658129805029452,
    "status" : "PENDING",
    "token" : "token"
  } ],
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "destination" : "INVESTMENT",
  "type" : "EXTERNAL",
  "sor_reward_token" : "sor_reward_token",
  "token" : "token",
  "receiving_account_token" : "receiving_account_token",
  "reward_program_token" : "reward_program_token",
  "status" : "INITIATED"
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter redemptionToken: (path) Unique identifier of the reward redemption. 

     - returns: RequestBuilder<RedemptionsResponse> 
     */
    open class func getRedemptionWithRequestBuilder(token: String, redemptionToken: String) -> RequestBuilder<RedemptionsResponse> {
        var path = "/credit/rewardprograms/{token}/redemptions/{redemption_token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let redemptionTokenPreEscape = "\(redemptionToken)"
        let redemptionTokenPostEscape = redemptionTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{redemption_token}", with: redemptionTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RedemptionsResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Transition reward redemption status

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter redemptionToken: (path) Unique identifier of the reward redemption. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRedemptionTransition(token: String, redemptionToken: String, body: CreateRedemptionTransitionsRequest? = nil, completion: @escaping ((_ data: RedemptionTransitionsResponse?,_ error: Error?) -> Void)) {
        postRedemptionTransitionWithRequestBuilder(token: token, redemptionToken: redemptionToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Transition reward redemption status
     - POST /credit/rewardprograms/{token}/redemptions/{redemption_token}/transitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "external_settlement_date_time" : "2000-01-23T04:56:07.000+00:00",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "initial_status" : "INITIATED",
  "redemption_token" : "redemption_token",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter redemptionToken: (path) Unique identifier of the reward redemption. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<RedemptionTransitionsResponse> 
     */
    open class func postRedemptionTransitionWithRequestBuilder(token: String, redemptionToken: String, body: CreateRedemptionTransitionsRequest? = nil) -> RequestBuilder<RedemptionTransitionsResponse> {
        var path = "/credit/rewardprograms/{token}/redemptions/{redemption_token}/transitions"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let redemptionTokenPreEscape = "\(redemptionToken)"
        let redemptionTokenPostEscape = redemptionTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{redemption_token}", with: redemptionTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RedemptionTransitionsResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create reward redemption

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRewardProgramRedemption(token: String, body: CreateRedemptionsRequest? = nil, completion: @escaping ((_ data: RedemptionsResponse?,_ error: Error?) -> Void)) {
        postRewardProgramRedemptionWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create reward redemption
     - POST /credit/rewardprograms/{token}/redemptions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "external_settlement_date_time" : "2000-01-23T04:56:07.000+00:00",
  "related_reward_entries" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "related_redemption_token" : "related_redemption_token",
    "reward_program_token" : "reward_program_token",
    "transaction_amount" : 6.027456183070403,
    "related_journal_entry_token" : "related_journal_entry_token",
    "mid" : "mid",
    "reward_rules_config_token" : "reward_rules_config_token",
    "mcc" : "mcc",
    "value" : 1.4658129805029452,
    "status" : "PENDING",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "related_redemption_token" : "related_redemption_token",
    "reward_program_token" : "reward_program_token",
    "transaction_amount" : 6.027456183070403,
    "related_journal_entry_token" : "related_journal_entry_token",
    "mid" : "mid",
    "reward_rules_config_token" : "reward_rules_config_token",
    "mcc" : "mcc",
    "value" : 1.4658129805029452,
    "status" : "PENDING",
    "token" : "token"
  } ],
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "destination" : "INVESTMENT",
  "type" : "EXTERNAL",
  "sor_reward_token" : "sor_reward_token",
  "token" : "token",
  "receiving_account_token" : "receiving_account_token",
  "reward_program_token" : "reward_program_token",
  "status" : "INITIATED"
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<RedemptionsResponse> 
     */
    open class func postRewardProgramRedemptionWithRequestBuilder(token: String, body: CreateRedemptionsRequest? = nil) -> RequestBuilder<RedemptionsResponse> {
        var path = "/credit/rewardprograms/{token}/redemptions"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RedemptionsResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_retrieveRedemptions: String { 
        case createdtime = "createdTime"
        case createdtime_1 = "-createdTime"
    }

    /**
     List reward redemptions

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter startDate: (query) The starting date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter endDate: (query) The ending date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)
     - parameter type: (query) Type of reward redemptions in the returned array. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRedemptions(token: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int64? = nil, sortBy: SortBy_retrieveRedemptions? = nil, type: RedemptionType? = nil, completion: @escaping ((_ data: RedemptionsPage?,_ error: Error?) -> Void)) {
        retrieveRedemptionsWithRequestBuilder(token: token, startDate: startDate, endDate: endDate, count: count, startIndex: startIndex, sortBy: sortBy, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List reward redemptions
     - GET /credit/rewardprograms/{token}/redemptions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "external_settlement_date_time" : "2000-01-23T04:56:07.000+00:00",
    "related_reward_entries" : [ {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "note" : "note",
      "related_redemption_token" : "related_redemption_token",
      "reward_program_token" : "reward_program_token",
      "transaction_amount" : 6.027456183070403,
      "related_journal_entry_token" : "related_journal_entry_token",
      "mid" : "mid",
      "reward_rules_config_token" : "reward_rules_config_token",
      "mcc" : "mcc",
      "value" : 1.4658129805029452,
      "status" : "PENDING",
      "token" : "token"
    }, {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "note" : "note",
      "related_redemption_token" : "related_redemption_token",
      "reward_program_token" : "reward_program_token",
      "transaction_amount" : 6.027456183070403,
      "related_journal_entry_token" : "related_journal_entry_token",
      "mid" : "mid",
      "reward_rules_config_token" : "reward_rules_config_token",
      "mcc" : "mcc",
      "value" : 1.4658129805029452,
      "status" : "PENDING",
      "token" : "token"
    } ],
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.8008281904610115,
    "destination" : "INVESTMENT",
    "type" : "EXTERNAL",
    "sor_reward_token" : "sor_reward_token",
    "token" : "token",
    "receiving_account_token" : "receiving_account_token",
    "reward_program_token" : "reward_program_token",
    "status" : "INITIATED"
  }, {
    "external_settlement_date_time" : "2000-01-23T04:56:07.000+00:00",
    "related_reward_entries" : [ {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "note" : "note",
      "related_redemption_token" : "related_redemption_token",
      "reward_program_token" : "reward_program_token",
      "transaction_amount" : 6.027456183070403,
      "related_journal_entry_token" : "related_journal_entry_token",
      "mid" : "mid",
      "reward_rules_config_token" : "reward_rules_config_token",
      "mcc" : "mcc",
      "value" : 1.4658129805029452,
      "status" : "PENDING",
      "token" : "token"
    }, {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "note" : "note",
      "related_redemption_token" : "related_redemption_token",
      "reward_program_token" : "reward_program_token",
      "transaction_amount" : 6.027456183070403,
      "related_journal_entry_token" : "related_journal_entry_token",
      "mid" : "mid",
      "reward_rules_config_token" : "reward_rules_config_token",
      "mcc" : "mcc",
      "value" : 1.4658129805029452,
      "status" : "PENDING",
      "token" : "token"
    } ],
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "note" : "note",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.8008281904610115,
    "destination" : "INVESTMENT",
    "type" : "EXTERNAL",
    "sor_reward_token" : "sor_reward_token",
    "token" : "token",
    "receiving_account_token" : "receiving_account_token",
    "reward_program_token" : "reward_program_token",
    "status" : "INITIATED"
  } ]
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter startDate: (query) The starting date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter endDate: (query) The ending date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)
     - parameter type: (query) Type of reward redemptions in the returned array. (optional)

     - returns: RequestBuilder<RedemptionsPage> 
     */
    open class func retrieveRedemptionsWithRequestBuilder(token: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int64? = nil, sortBy: SortBy_retrieveRedemptions? = nil, type: RedemptionType? = nil) -> RequestBuilder<RedemptionsPage> {
        var path = "/credit/rewardprograms/{token}/redemptions"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start_date": startDate?.encodeToJSON(), 
                        "end_date": endDate?.encodeToJSON(), 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue, 
                        "type": type
        ])


        let requestBuilder: RequestBuilder<RedemptionsPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve reward redemption balance

     - parameter token: (path) Unique identifier of the reward program. 
     - parameter startDate: (query) The starting date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter endDate: (query) The ending date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter type: (query) Type of reward redemptions in the returned array. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveRedemptionsBalance(token: String, startDate: Date? = nil, endDate: Date? = nil, type: [RedemptionType]? = nil, completion: @escaping ((_ data: RedemptionsBalanceResponse?,_ error: Error?) -> Void)) {
        retrieveRedemptionsBalanceWithRequestBuilder(token: token, startDate: startDate, endDate: endDate, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve reward redemption balance
     - GET /credit/rewardprograms/{token}/redemptions/balance

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "redemption_total_amount" : 0.8008281904610115,
  "reward_program_token" : "reward_program_token",
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter token: (path) Unique identifier of the reward program. 
     - parameter startDate: (query) The starting date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter endDate: (query) The ending date (or date-time) of a date range from which to return resources, in UTC. (optional)
     - parameter type: (query) Type of reward redemptions in the returned array. (optional)

     - returns: RequestBuilder<RedemptionsBalanceResponse> 
     */
    open class func retrieveRedemptionsBalanceWithRequestBuilder(token: String, startDate: Date? = nil, endDate: Date? = nil, type: [RedemptionType]? = nil) -> RequestBuilder<RedemptionsBalanceResponse> {
        var path = "/credit/rewardprograms/{token}/redemptions/balance"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start_date": startDate?.encodeToJSON(), 
                        "end_date": endDate?.encodeToJSON(), 
                        "type": type
        ])


        let requestBuilder: RequestBuilder<RedemptionsBalanceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
