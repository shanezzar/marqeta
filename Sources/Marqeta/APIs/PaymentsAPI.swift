//
// PaymentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PaymentsAPI {
    /**
     Create account payment

     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which to create a payment.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPayment(body: PaymentCreateReq, accountToken: String, completion: @escaping ((_ data: PaymentDetailResponse?,_ error: Error?) -> Void)) {
        createPaymentWithRequestBuilder(body: body, accountToken: accountToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create account payment
     - POST /credit/accounts/{account_token}/payments

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.6027456183070403,
  "metadata" : "metadata",
  "method" : "ACH",
  "account_token" : "account_token",
  "payment_schedule_token" : "payment_schedule_token",
  "description" : "description",
  "hold_days" : 1,
  "is_manually_released" : false,
  "on_hold" : false,
  "transitions" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "payment_token" : "payment_token",
    "account_token" : "account_token",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "payment_token" : "payment_token",
    "account_token" : "account_token",
    "token" : "token"
  } ],
  "currency_code" : "USD",
  "refund_details" : {
    "method" : "CHECK",
    "description" : "description",
    "status" : "COMPLETED"
  },
  "token" : "token",
  "returned_details" : {
    "return_reason" : "return_reason",
    "return_code" : "return_code"
  },
  "hold_end_time" : "2000-01-23T04:56:07.000+00:00",
  "payment_source_token" : "payment_source_token",
  "status" : "INITIATED"
}}]
     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which to create a payment.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 

     - returns: RequestBuilder<PaymentDetailResponse> 
     */
    open class func createPaymentWithRequestBuilder(body: PaymentCreateReq, accountToken: String) -> RequestBuilder<PaymentDetailResponse> {
        var path = "/credit/accounts/{account_token}/payments"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentDetailResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listPayments: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List account payments

     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve payments.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter startDate: (query) Beginning of the date range of the payments to return. (optional)
     - parameter endDate: (query) End of the date range of the payments to return. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter statuses: (query) An array of statuses by which to filter payments. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listPayments(accountToken: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listPayments? = nil, statuses: [PaymentStatus]? = nil, completion: @escaping ((_ data: PaymentsPage?,_ error: Error?) -> Void)) {
        listPaymentsWithRequestBuilder(accountToken: accountToken, startDate: startDate, endDate: endDate, count: count, startIndex: startIndex, sortBy: sortBy, statuses: statuses).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List account payments
     - GET /credit/accounts/{account_token}/payments

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.6027456183070403,
    "metadata" : "metadata",
    "method" : "ACH",
    "account_token" : "account_token",
    "payment_schedule_token" : "payment_schedule_token",
    "description" : "description",
    "hold_days" : 1,
    "is_manually_released" : false,
    "on_hold" : false,
    "transitions" : [ {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "payment_token" : "payment_token",
      "account_token" : "account_token",
      "token" : "token"
    }, {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "payment_token" : "payment_token",
      "account_token" : "account_token",
      "token" : "token"
    } ],
    "currency_code" : "USD",
    "refund_details" : {
      "method" : "CHECK",
      "description" : "description",
      "status" : "COMPLETED"
    },
    "token" : "token",
    "returned_details" : {
      "return_reason" : "return_reason",
      "return_code" : "return_code"
    },
    "hold_end_time" : "2000-01-23T04:56:07.000+00:00",
    "payment_source_token" : "payment_source_token",
    "status" : "INITIATED"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.6027456183070403,
    "metadata" : "metadata",
    "method" : "ACH",
    "account_token" : "account_token",
    "payment_schedule_token" : "payment_schedule_token",
    "description" : "description",
    "hold_days" : 1,
    "is_manually_released" : false,
    "on_hold" : false,
    "transitions" : [ {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "payment_token" : "payment_token",
      "account_token" : "account_token",
      "token" : "token"
    }, {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "payment_token" : "payment_token",
      "account_token" : "account_token",
      "token" : "token"
    } ],
    "currency_code" : "USD",
    "refund_details" : {
      "method" : "CHECK",
      "description" : "description",
      "status" : "COMPLETED"
    },
    "token" : "token",
    "returned_details" : {
      "return_reason" : "return_reason",
      "return_code" : "return_code"
    },
    "hold_end_time" : "2000-01-23T04:56:07.000+00:00",
    "payment_source_token" : "payment_source_token",
    "status" : "INITIATED"
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 5
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve payments.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter startDate: (query) Beginning of the date range of the payments to return. (optional)
     - parameter endDate: (query) End of the date range of the payments to return. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to -lastModifiedTime)
     - parameter statuses: (query) An array of statuses by which to filter payments. (optional)

     - returns: RequestBuilder<PaymentsPage> 
     */
    open class func listPaymentsWithRequestBuilder(accountToken: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_listPayments? = nil, statuses: [PaymentStatus]? = nil) -> RequestBuilder<PaymentsPage> {
        var path = "/credit/accounts/{account_token}/payments"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start_date": startDate?.encodeToJSON(), 
                        "end_date": endDate?.encodeToJSON(), 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue, 
                        "statuses": statuses
        ])


        let requestBuilder: RequestBuilder<PaymentsPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Release payment hold

     - parameter accountToken: (path) The unique identifier of the credit account on which a payment hold is being released.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter paymentToken: (path) The unique identifier of the payment currently on hold.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments&#x60; to retrieve existing payment tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasePaymentHold(accountToken: String, paymentToken: String, completion: @escaping ((_ data: PaymentDetailResponse?,_ error: Error?) -> Void)) {
        releasePaymentHoldWithRequestBuilder(accountToken: accountToken, paymentToken: paymentToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Release payment hold
     - POST /credit/accounts/{account_token}/payments/{payment_token}/releasehold

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.6027456183070403,
  "metadata" : "metadata",
  "method" : "ACH",
  "account_token" : "account_token",
  "payment_schedule_token" : "payment_schedule_token",
  "description" : "description",
  "hold_days" : 1,
  "is_manually_released" : false,
  "on_hold" : false,
  "transitions" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "payment_token" : "payment_token",
    "account_token" : "account_token",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "payment_token" : "payment_token",
    "account_token" : "account_token",
    "token" : "token"
  } ],
  "currency_code" : "USD",
  "refund_details" : {
    "method" : "CHECK",
    "description" : "description",
    "status" : "COMPLETED"
  },
  "token" : "token",
  "returned_details" : {
    "return_reason" : "return_reason",
    "return_code" : "return_code"
  },
  "hold_end_time" : "2000-01-23T04:56:07.000+00:00",
  "payment_source_token" : "payment_source_token",
  "status" : "INITIATED"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account on which a payment hold is being released.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter paymentToken: (path) The unique identifier of the payment currently on hold.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments&#x60; to retrieve existing payment tokens. 

     - returns: RequestBuilder<PaymentDetailResponse> 
     */
    open class func releasePaymentHoldWithRequestBuilder(accountToken: String, paymentToken: String) -> RequestBuilder<PaymentDetailResponse> {
        var path = "/credit/accounts/{account_token}/payments/{payment_token}/releasehold"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let paymentTokenPreEscape = "\(paymentToken)"
        let paymentTokenPostEscape = paymentTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{payment_token}", with: paymentTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentDetailResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter eventType
     */
    public enum EventType_resendWebhookEvent: String { 
        case ledgerentry = "ledgerentry"
        case journalentry = "journalentry"
        case accounttransition = "accounttransition"
        case accountstatement = "accountstatement"
        case paymenttransition = "paymenttransition"
        case delinquencytransition = "delinquencytransition"
    }

    /**
     Resend credit event notification

     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter resourceToken: (path) The unique identifier of the resource for which you want to resend a notification.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/journalentries&#x60; to retrieve existing journal entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/ledgerentries&#x60; to retrieve existing ledger entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments/{payment_token}&#x60; to retrieve existing payment transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/statements&#x60; to retrieve existing statement summary tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/delinquencystate/transitions&#x60; to retrieve existing delinquency state transition tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendWebhookEvent(eventType: EventType_resendWebhookEvent, resourceToken: String, completion: @escaping ((_ data: WebhookEventResendContainerResponse?,_ error: Error?) -> Void)) {
        resendWebhookEventWithRequestBuilder(eventType: eventType, resourceToken: resourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Resend credit event notification
     - POST /credit/webhooks/{event_type}/{resource_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "unused" : "unused"
}}]
     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter resourceToken: (path) The unique identifier of the resource for which you want to resend a notification.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/journalentries&#x60; to retrieve existing journal entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/ledgerentries&#x60; to retrieve existing ledger entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments/{payment_token}&#x60; to retrieve existing payment transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/statements&#x60; to retrieve existing statement summary tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/delinquencystate/transitions&#x60; to retrieve existing delinquency state transition tokens. 

     - returns: RequestBuilder<WebhookEventResendContainerResponse> 
     */
    open class func resendWebhookEventWithRequestBuilder(eventType: EventType_resendWebhookEvent, resourceToken: String) -> RequestBuilder<WebhookEventResendContainerResponse> {
        var path = "/credit/webhooks/{event_type}/{resource_token}"
        let eventTypePreEscape = "\(eventType.rawValue)"
        let eventTypePostEscape = eventTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_type}", with: eventTypePostEscape, options: .literal, range: nil)
        let resourceTokenPreEscape = "\(resourceToken)"
        let resourceTokenPostEscape = resourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_token}", with: resourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookEventResendContainerResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve account payment

     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve a payment.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter paymentToken: (path) The unique identifier of the payment to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/payments&#x60; to retrieve existing payment tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrievePayment(accountToken: String, paymentToken: String, completion: @escaping ((_ data: PaymentDetailResponse?,_ error: Error?) -> Void)) {
        retrievePaymentWithRequestBuilder(accountToken: accountToken, paymentToken: paymentToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve account payment
     - GET /credit/accounts/{account_token}/payments/{payment_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.6027456183070403,
  "metadata" : "metadata",
  "method" : "ACH",
  "account_token" : "account_token",
  "payment_schedule_token" : "payment_schedule_token",
  "description" : "description",
  "hold_days" : 1,
  "is_manually_released" : false,
  "on_hold" : false,
  "transitions" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "payment_token" : "payment_token",
    "account_token" : "account_token",
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "payment_token" : "payment_token",
    "account_token" : "account_token",
    "token" : "token"
  } ],
  "currency_code" : "USD",
  "refund_details" : {
    "method" : "CHECK",
    "description" : "description",
    "status" : "COMPLETED"
  },
  "token" : "token",
  "returned_details" : {
    "return_reason" : "return_reason",
    "return_code" : "return_code"
  },
  "hold_end_time" : "2000-01-23T04:56:07.000+00:00",
  "payment_source_token" : "payment_source_token",
  "status" : "INITIATED"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve a payment.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter paymentToken: (path) The unique identifier of the payment to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/payments&#x60; to retrieve existing payment tokens. 

     - returns: RequestBuilder<PaymentDetailResponse> 
     */
    open class func retrievePaymentWithRequestBuilder(accountToken: String, paymentToken: String) -> RequestBuilder<PaymentDetailResponse> {
        var path = "/credit/accounts/{account_token}/payments/{payment_token}"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let paymentTokenPreEscape = "\(paymentToken)"
        let paymentTokenPostEscape = paymentTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{payment_token}", with: paymentTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentDetailResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Transition account payment status

     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to transition a payment status.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter paymentToken: (path) The unique identifier of the payment whose status you want to transition.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments&#x60; endpoint to retrieve existing payment tokens for a given account. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transitionPayment(body: PaymentTransitionReq, accountToken: String, paymentToken: String, completion: @escaping ((_ data: PaymentTransitionResponse?,_ error: Error?) -> Void)) {
        transitionPaymentWithRequestBuilder(body: body, accountToken: accountToken, paymentToken: paymentToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Transition account payment status
     - POST /credit/accounts/{account_token}/payments/{payment_token}/transitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "payment_token" : "payment_token",
  "account_token" : "account_token",
  "token" : "token"
}}]
     - parameter body: (body)  
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to transition a payment status.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter paymentToken: (path) The unique identifier of the payment whose status you want to transition.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments&#x60; endpoint to retrieve existing payment tokens for a given account. 

     - returns: RequestBuilder<PaymentTransitionResponse> 
     */
    open class func transitionPaymentWithRequestBuilder(body: PaymentTransitionReq, accountToken: String, paymentToken: String) -> RequestBuilder<PaymentTransitionResponse> {
        var path = "/credit/accounts/{account_token}/payments/{payment_token}/transitions"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let paymentTokenPreEscape = "\(paymentToken)"
        let paymentTokenPostEscape = paymentTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{payment_token}", with: paymentTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
