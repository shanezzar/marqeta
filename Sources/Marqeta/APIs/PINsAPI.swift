//
// PINsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PINsAPI {
    /**
     Create PIN control token

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPinsControltoken(body: ControlTokenRequest? = nil, completion: @escaping ((_ data: ControlTokenResponse?,_ error: Error?) -> Void)) {
        postPinsControltokenWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create PIN control token
     - POST /pins/controltoken

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "control_token" : "control_token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ControlTokenResponse> 
     */
    open class func postPinsControltokenWithRequestBuilder(body: ControlTokenRequest? = nil) -> RequestBuilder<ControlTokenResponse> {
        let path = "/pins/controltoken"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ControlTokenResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create or update PIN

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putPins(body: PinRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putPinsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create or update PIN
     - PUT /pins

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putPinsWithRequestBuilder(body: PinRequest? = nil) -> RequestBuilder<Void> {
        let path = "/pins"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Reveal PIN

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revealPins(body: PinRevealRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        revealPinsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reveal PIN
     - POST /pins/reveal

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func revealPinsWithRequestBuilder(body: PinRevealRequest? = nil) -> RequestBuilder<Void> {
        let path = "/pins/reveal"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
