//
// ProgramFundingSourcesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ProgramFundingSourcesAPI {
    /**
     List ACH program sources

     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter active: (query) If &#x60;true&#x60;, returns ACH funding sources from active programs only. If &#x60;false&#x60;, returns all ACH funding sources. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllACHFundingSources(count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, active: Bool? = nil, completion: @escaping ((_ data: ACHListResponse?,_ error: Error?) -> Void)) {
        getAllACHFundingSourcesWithRequestBuilder(count: count, startIndex: startIndex, fields: fields, sortBy: sortBy, active: active).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List ACH program sources
     - GET /fundingsources/program/ach

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "account_type" : "account_type",
    "account_suffix" : "account_suffix",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "date_verified" : "2000-01-23T04:56:07.000+00:00",
    "active" : false,
    "verification_notes" : "verification_notes",
    "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
    "verification_status" : "verification_status",
    "partner_account_link_reference_token" : "partner_account_link_reference_token",
    "token" : "token",
    "name_on_account" : "name_on_account",
    "partner" : "partner",
    "verification_override" : false,
    "bank_name" : "bank_name",
    "is_default_account" : false
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "account_type" : "account_type",
    "account_suffix" : "account_suffix",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "date_verified" : "2000-01-23T04:56:07.000+00:00",
    "active" : false,
    "verification_notes" : "verification_notes",
    "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
    "verification_status" : "verification_status",
    "partner_account_link_reference_token" : "partner_account_link_reference_token",
    "token" : "token",
    "name_on_account" : "name_on_account",
    "partner" : "partner",
    "verification_override" : false,
    "bank_name" : "bank_name",
    "is_default_account" : false
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter active: (query) If &#x60;true&#x60;, returns ACH funding sources from active programs only. If &#x60;false&#x60;, returns all ACH funding sources. (optional)

     - returns: RequestBuilder<ACHListResponse> 
     */
    open class func getAllACHFundingSourcesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, active: Bool? = nil) -> RequestBuilder<ACHListResponse> {
        let path = "/fundingsources/program/ach"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy, 
                        "active": active
        ])


        let requestBuilder: RequestBuilder<ACHListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve program source

     - parameter token: (path) Unique identifier of the program funding source. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundingsourcesProgramToken(token: String, completion: @escaping ((_ data: ProgramFundingSourceResponse?,_ error: Error?) -> Void)) {
        getFundingsourcesProgramTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve program source
     - GET /fundingsources/program/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "account" : "account",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the program funding source. 

     - returns: RequestBuilder<ProgramFundingSourceResponse> 
     */
    open class func getFundingsourcesProgramTokenWithRequestBuilder(token: String) -> RequestBuilder<ProgramFundingSourceResponse> {
        var path = "/fundingsources/program/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ProgramFundingSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create program source

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFundingsourcesProgram(body: ProgramFundingSourceRequest? = nil, completion: @escaping ((_ data: ProgramFundingSourceResponse?,_ error: Error?) -> Void)) {
        postFundingsourcesProgramWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create program source
     - POST /fundingsources/program

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "account" : "account",
  "token" : "token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ProgramFundingSourceResponse> 
     */
    open class func postFundingsourcesProgramWithRequestBuilder(body: ProgramFundingSourceRequest? = nil) -> RequestBuilder<ProgramFundingSourceResponse> {
        let path = "/fundingsources/program"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ProgramFundingSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create ACH program source

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFundingsourcesProgramAch(body: BaseAchRequestModel? = nil, completion: @escaping ((_ data: BaseAchResponseModel?,_ error: Error?) -> Void)) {
        postFundingsourcesProgramAchWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create ACH program source
     - POST /fundingsources/program/ach

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_type" : "account_type",
  "account_suffix" : "account_suffix",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "date_verified" : "2000-01-23T04:56:07.000+00:00",
  "active" : false,
  "verification_notes" : "verification_notes",
  "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
  "verification_status" : "verification_status",
  "partner_account_link_reference_token" : "partner_account_link_reference_token",
  "token" : "token",
  "name_on_account" : "name_on_account",
  "partner" : "partner",
  "verification_override" : false,
  "bank_name" : "bank_name",
  "is_default_account" : false
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<BaseAchResponseModel> 
     */
    open class func postFundingsourcesProgramAchWithRequestBuilder(body: BaseAchRequestModel? = nil) -> RequestBuilder<BaseAchResponseModel> {
        let path = "/fundingsources/program/ach"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BaseAchResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update program source

     - parameter token: (path) Unique identifier of the program funding source. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFundingsourcesProgramToken(token: String, body: ProgramFundingSourceUpdateRequest? = nil, completion: @escaping ((_ data: ProgramFundingSourceResponse?,_ error: Error?) -> Void)) {
        putFundingsourcesProgramTokenWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update program source
     - PUT /fundingsources/program/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "account" : "account",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the program funding source. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ProgramFundingSourceResponse> 
     */
    open class func putFundingsourcesProgramTokenWithRequestBuilder(token: String, body: ProgramFundingSourceUpdateRequest? = nil) -> RequestBuilder<ProgramFundingSourceResponse> {
        var path = "/fundingsources/program/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ProgramFundingSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
