//
// DelinquencyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DelinquencyAPI {
    /**
     * enum for parameter eventType
     */
    public enum EventType_resendWebhookEvent: String { 
        case ledgerentry = "ledgerentry"
        case journalentry = "journalentry"
        case accounttransition = "accounttransition"
        case accountstatement = "accountstatement"
        case paymenttransition = "paymenttransition"
        case delinquencytransition = "delinquencytransition"
    }

    /**
     Resend credit event notification

     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter resourceToken: (path) The unique identifier of the resource for which you want to resend a notification.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/journalentries&#x60; to retrieve existing journal entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/ledgerentries&#x60; to retrieve existing ledger entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments/{payment_token}&#x60; to retrieve existing payment transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/statements&#x60; to retrieve existing statement summary tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/delinquencystate/transitions&#x60; to retrieve existing delinquency state transition tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendWebhookEvent(eventType: EventType_resendWebhookEvent, resourceToken: String, completion: @escaping ((_ data: WebhookEventResendContainerResponse?,_ error: Error?) -> Void)) {
        resendWebhookEventWithRequestBuilder(eventType: eventType, resourceToken: resourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Resend credit event notification
     - POST /credit/webhooks/{event_type}/{resource_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "unused" : "unused"
}}]
     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter resourceToken: (path) The unique identifier of the resource for which you want to resend a notification.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/journalentries&#x60; to retrieve existing journal entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/ledgerentries&#x60; to retrieve existing ledger entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments/{payment_token}&#x60; to retrieve existing payment transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/statements&#x60; to retrieve existing statement summary tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/delinquencystate/transitions&#x60; to retrieve existing delinquency state transition tokens. 

     - returns: RequestBuilder<WebhookEventResendContainerResponse> 
     */
    open class func resendWebhookEventWithRequestBuilder(eventType: EventType_resendWebhookEvent, resourceToken: String) -> RequestBuilder<WebhookEventResendContainerResponse> {
        var path = "/credit/webhooks/{event_type}/{resource_token}"
        let eventTypePreEscape = "\(eventType.rawValue)"
        let eventTypePostEscape = eventTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_type}", with: eventTypePostEscape, options: .literal, range: nil)
        let resourceTokenPreEscape = "\(resourceToken)"
        let resourceTokenPostEscape = resourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_token}", with: resourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookEventResendContainerResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve delinquency state

     - parameter accountToken: (path) Unique identifier of the credit account for which you want to retrieve delinquency state details.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveDelinquencyState(accountToken: String, completion: @escaping ((_ data: DelinquencyStateResponse?,_ error: Error?) -> Void)) {
        retrieveDelinquencyStateWithRequestBuilder(accountToken: accountToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve delinquency state
     - GET /credit/accounts/{account_token}/delinquencystate

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "date_account_delinquent" : "2000-01-23T04:56:07.000+00:00",
  "total_past_due" : 3.616076749251911,
  "current_due" : 2.3021358869347655,
  "date_account_current" : "2000-01-23T04:56:07.000+00:00",
  "total_due" : 9.301444243932576,
  "is_delinquent" : true,
  "buckets" : [ {
    "past_due_carried_forward" : 5.962133916683182,
    "bucket_number" : 0,
    "current_due" : 6.027456183070403,
    "total_due" : 5.637376656633329,
    "days_past_due" : 1,
    "payment_due_date" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "past_due_carried_forward" : 5.962133916683182,
    "bucket_number" : 0,
    "current_due" : 6.027456183070403,
    "total_due" : 5.637376656633329,
    "days_past_due" : 1,
    "payment_due_date" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "account_token" : "account_token",
  "total_days_past_due" : 7
}}]
     - parameter accountToken: (path) Unique identifier of the credit account for which you want to retrieve delinquency state details.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 

     - returns: RequestBuilder<DelinquencyStateResponse> 
     */
    open class func retrieveDelinquencyStateWithRequestBuilder(accountToken: String) -> RequestBuilder<DelinquencyStateResponse> {
        var path = "/credit/accounts/{account_token}/delinquencystate"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DelinquencyStateResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve delinquency state transition

     - parameter accountToken: (path) Unique identifier of the credit account whose delinquency state transition you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter delinquencyTransitionToken: (path) Unique identifier of the delinquency state transition. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveDelinquencyTransition(accountToken: String, delinquencyTransitionToken: String, completion: @escaping ((_ data: DelinquencyTransitionResponse?,_ error: Error?) -> Void)) {
        retrieveDelinquencyTransitionWithRequestBuilder(accountToken: accountToken, delinquencyTransitionToken: delinquencyTransitionToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve delinquency state transition
     - GET /credit/accounts/{account_token}/delinquencystate/transitions/{delinquency_transition_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "total_past_due" : 5.637376656633329,
  "updated_time" : "2000-01-23T04:56:07.000+00:00",
  "original_status" : "CURRENT",
  "is_rolled_back" : true,
  "total_due" : 5.962133916683182,
  "impact_time" : "2000-01-23T04:56:07.000+00:00",
  "account_token" : "account_token",
  "oldest_payment_due_date" : "2000-01-23T04:56:07.000+00:00",
  "transition_trigger_reason" : "PAYMENT",
  "bucket_count" : 6.027456183070403,
  "token" : "token",
  "current_due" : 1.4658129805029452,
  "transition_trigger_time" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter accountToken: (path) Unique identifier of the credit account whose delinquency state transition you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter delinquencyTransitionToken: (path) Unique identifier of the delinquency state transition. 

     - returns: RequestBuilder<DelinquencyTransitionResponse> 
     */
    open class func retrieveDelinquencyTransitionWithRequestBuilder(accountToken: String, delinquencyTransitionToken: String) -> RequestBuilder<DelinquencyTransitionResponse> {
        var path = "/credit/accounts/{account_token}/delinquencystate/transitions/{delinquency_transition_token}"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let delinquencyTransitionTokenPreEscape = "\(delinquencyTransitionToken)"
        let delinquencyTransitionTokenPostEscape = delinquencyTransitionTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{delinquency_transition_token}", with: delinquencyTransitionTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DelinquencyTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_retrieveDelinquencyTransitions: String { 
        case impacttime = "impactTime"
        case impacttime_1 = "-impactTime"
    }

    /**
     List delinquency state transitions

     - parameter accountToken: (path) Unique identifier of the credit account whose delinquency state transitions you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;impactTime&#x60;, and not by the field names appearing in response bodies such as &#x60;impact_time&#x60;. (optional, default to -impactTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveDelinquencyTransitions(accountToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_retrieveDelinquencyTransitions? = nil, completion: @escaping ((_ data: DelinquencyTransitionsResponsePage?,_ error: Error?) -> Void)) {
        retrieveDelinquencyTransitionsWithRequestBuilder(accountToken: accountToken, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List delinquency state transitions
     - GET /credit/accounts/{account_token}/delinquencystate/transitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "total_past_due" : 5.637376656633329,
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "original_status" : "CURRENT",
    "is_rolled_back" : true,
    "total_due" : 5.962133916683182,
    "impact_time" : "2000-01-23T04:56:07.000+00:00",
    "account_token" : "account_token",
    "oldest_payment_due_date" : "2000-01-23T04:56:07.000+00:00",
    "transition_trigger_reason" : "PAYMENT",
    "bucket_count" : 6.027456183070403,
    "token" : "token",
    "current_due" : 1.4658129805029452,
    "transition_trigger_time" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "total_past_due" : 5.637376656633329,
    "updated_time" : "2000-01-23T04:56:07.000+00:00",
    "original_status" : "CURRENT",
    "is_rolled_back" : true,
    "total_due" : 5.962133916683182,
    "impact_time" : "2000-01-23T04:56:07.000+00:00",
    "account_token" : "account_token",
    "oldest_payment_due_date" : "2000-01-23T04:56:07.000+00:00",
    "transition_trigger_reason" : "PAYMENT",
    "bucket_count" : 6.027456183070403,
    "token" : "token",
    "current_due" : 1.4658129805029452,
    "transition_trigger_time" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "start_index" : 7,
  "count" : 0,
  "end_index" : 2
}}]
     - parameter accountToken: (path) Unique identifier of the credit account whose delinquency state transitions you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;impactTime&#x60;, and not by the field names appearing in response bodies such as &#x60;impact_time&#x60;. (optional, default to -impactTime)

     - returns: RequestBuilder<DelinquencyTransitionsResponsePage> 
     */
    open class func retrieveDelinquencyTransitionsWithRequestBuilder(accountToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_retrieveDelinquencyTransitions? = nil) -> RequestBuilder<DelinquencyTransitionsResponsePage> {
        var path = "/credit/accounts/{account_token}/delinquencystate/transitions"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<DelinquencyTransitionsResponsePage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
