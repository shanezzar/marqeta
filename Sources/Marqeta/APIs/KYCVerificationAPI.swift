//
// KYCVerificationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class KYCVerificationAPI {
    /**
     List KYC results for a business

     - parameter businessToken: (path) The unique identifier of the business resource for which you want to retrieve KYC verification results. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) The sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKycBusinessBusinesstoken(businessToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: KYCListResponse?,_ error: Error?) -> Void)) {
        getKycBusinessBusinesstokenWithRequestBuilder(businessToken: businessToken, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List KYC results for a business
     - GET /kyc/business/{business_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "result" : {
      "codes" : [ {
        "code" : "code",
        "message" : "message"
      }, {
        "code" : "code",
        "message" : "message"
      } ],
      "status" : "status"
    },
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "notes" : "notes",
    "reference_id" : "reference_id",
    "manual_override" : false,
    "user_token" : "user_token",
    "token" : "token"
  }, {
    "result" : {
      "codes" : [ {
        "code" : "code",
        "message" : "message"
      }, {
        "code" : "code",
        "message" : "message"
      } ],
      "status" : "status"
    },
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "notes" : "notes",
    "reference_id" : "reference_id",
    "manual_override" : false,
    "user_token" : "user_token",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter businessToken: (path) The unique identifier of the business resource for which you want to retrieve KYC verification results. 
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) The sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)

     - returns: RequestBuilder<KYCListResponse> 
     */
    open class func getKycBusinessBusinesstokenWithRequestBuilder(businessToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<KYCListResponse> {
        var path = "/kyc/business/{business_token}"
        let businessTokenPreEscape = "\(businessToken)"
        let businessTokenPostEscape = businessTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{business_token}", with: businessTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<KYCListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve KYC result

     - parameter token: (path) Unique identifier of the KYC verification for which you want to retrieve the result. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKycToken(token: String, completion: @escaping ((_ data: KycResponse?,_ error: Error?) -> Void)) {
        getKycTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve KYC result
     - GET /kyc/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "codes" : [ {
      "code" : "code",
      "message" : "message"
    }, {
      "code" : "code",
      "message" : "message"
    } ],
    "status" : "status"
  },
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "notes" : "notes",
  "reference_id" : "reference_id",
  "manual_override" : false,
  "user_token" : "user_token",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the KYC verification for which you want to retrieve the result. 

     - returns: RequestBuilder<KycResponse> 
     */
    open class func getKycTokenWithRequestBuilder(token: String) -> RequestBuilder<KycResponse> {
        var path = "/kyc/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<KycResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List KYC results for a user

     - parameter userToken: (path) Unique identifier of the user resource for which you want to retrieve KYC verification results. 
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKycUserUsertoken(userToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: KYCListResponse?,_ error: Error?) -> Void)) {
        getKycUserUsertokenWithRequestBuilder(userToken: userToken, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List KYC results for a user
     - GET /kyc/user/{user_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "result" : {
      "codes" : [ {
        "code" : "code",
        "message" : "message"
      }, {
        "code" : "code",
        "message" : "message"
      } ],
      "status" : "status"
    },
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "notes" : "notes",
    "reference_id" : "reference_id",
    "manual_override" : false,
    "user_token" : "user_token",
    "token" : "token"
  }, {
    "result" : {
      "codes" : [ {
        "code" : "code",
        "message" : "message"
      }, {
        "code" : "code",
        "message" : "message"
      } ],
      "status" : "status"
    },
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "notes" : "notes",
    "reference_id" : "reference_id",
    "manual_override" : false,
    "user_token" : "user_token",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter userToken: (path) Unique identifier of the user resource for which you want to retrieve KYC verification results. 
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)

     - returns: RequestBuilder<KYCListResponse> 
     */
    open class func getKycUserUsertokenWithRequestBuilder(userToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<KYCListResponse> {
        var path = "/kyc/user/{user_token}"
        let userTokenPreEscape = "\(userToken)"
        let userTokenPostEscape = userTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_token}", with: userTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<KYCListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Perform KYC verification

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKyc(body: KycRequest? = nil, completion: @escaping ((_ data: KycResponse?,_ error: Error?) -> Void)) {
        postKycWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Perform KYC verification
     - POST /kyc

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "codes" : [ {
      "code" : "code",
      "message" : "message"
    }, {
      "code" : "code",
      "message" : "message"
    } ],
    "status" : "status"
  },
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "notes" : "notes",
  "reference_id" : "reference_id",
  "manual_override" : false,
  "user_token" : "user_token",
  "token" : "token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<KycResponse> 
     */
    open class func postKycWithRequestBuilder(body: KycRequest? = nil) -> RequestBuilder<KycResponse> {
        let path = "/kyc"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<KycResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
