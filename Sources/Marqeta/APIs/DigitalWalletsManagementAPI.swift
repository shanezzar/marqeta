//
// DigitalWalletsManagementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DigitalWalletsManagementAPI {
    /**
     Create request for Apple Wallet web push provisioning

     - parameter body: (body)  
     - parameter reqSysId: (header) Random pseudo-unique value used for troubleshooting between multiple parties. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateApplePayWPPJWT(body: RequestForApplePayWppJWT, reqSysId: String, completion: @escaping ((_ data: WebPushProvisioningApplePayJWTResponse?,_ error: Error?) -> Void)) {
        generateApplePayWPPJWTWithRequestBuilder(body: body, reqSysId: reqSysId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create request for Apple Wallet web push provisioning
     - POST /digitalwallets/wpp/applePayJWT

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - responseHeaders: [req-sys-id(String)]
     - examples: [{contentType=application/json, example={
  "jws" : {
    "protected" : "protected",
    "payload" : "payload",
    "signature" : "5lD1znG2DD2DytqGUcSDOwJQMYbCGDCCCiXxyhpC1zOWTH1Y6jUJFAupl0jEud9nUvw3mmpuSt6zcAE1r4yb0w",
    "header" : {
      "kid" : "8dc7aed4-29e3-41e4-9cdb-673a05e6615c"
    }
  },
  "state" : "e2675f06-7e4d-11ec-90d6-0242ac120003"
}}]
     - parameter body: (body)  
     - parameter reqSysId: (header) Random pseudo-unique value used for troubleshooting between multiple parties. 

     - returns: RequestBuilder<WebPushProvisioningApplePayJWTResponse> 
     */
    open class func generateApplePayWPPJWTWithRequestBuilder(body: RequestForApplePayWppJWT, reqSysId: String) -> RequestBuilder<WebPushProvisioningApplePayJWTResponse> {
        let path = "/digitalwallets/wpp/applePayJWT"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "req-sys-id": reqSysId
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebPushProvisioningApplePayJWTResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     * enum for parameter embed
     */
    public enum Embed_getDigitalwallettokens: String { 
        case user = "user"
    }

    /**
     List digital wallet tokens

     - parameter count: (query) Number of digital wallet token resources to retrieve. (optional, default to 10)
     - parameter startIndex: (query) Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter startDate: (query) Date when the digital wallet token becomes active. (optional)
     - parameter endDate: (query) Expiration date of the digital wallet token. (optional)
     - parameter panReferenceId: (query) Unique identifier of the digital wallet token primary account number (PAN) within the card network. This value may vary, depending on the digital wallet. For example, the &#x60;pan_reference_id&#x60; may be different in Apple Wallet and Google Wallet for the same digital wallet token. (optional)
     - parameter tokenReferenceId: (query) Unique identifier of the digital wallet token within the card network. The &#x60;token_reference_id&#x60; is unique at the card network level. (optional)
     - parameter correlationId: (query) Unique value representing a tokenization request (Mastercard only). (optional)
     - parameter tokenType: (query) Comma-delimited list of digital wallet token types to display. (optional)
     - parameter tokenRequestorName: (query) Name of the token requestor within the card network.  *NOTE:* The list of example values for this field is maintained by the card networks and is subject to change. (optional)
     - parameter state: (query) Comma-delimited list of digital wallet token states to display. (optional)
     - parameter embed: (query) An optional embedded user object. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDigitalwallettokens(count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, startDate: String? = nil, endDate: String? = nil, panReferenceId: String? = nil, tokenReferenceId: String? = nil, correlationId: String? = nil, tokenType: String? = nil, tokenRequestorName: String? = nil, state: String? = nil, embed: Embed_getDigitalwallettokens? = nil, completion: @escaping ((_ data: DigitalWalletTokenListResponse?,_ error: Error?) -> Void)) {
        getDigitalwallettokensWithRequestBuilder(count: count, startIndex: startIndex, fields: fields, sortBy: sortBy, startDate: startDate, endDate: endDate, panReferenceId: panReferenceId, tokenReferenceId: tokenReferenceId, correlationId: correlationId, tokenType: tokenType, tokenRequestorName: tokenRequestorName, state: state, embed: embed).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List digital wallet tokens
     - GET /digitalwallettokens

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "issuer_eligibility_decision" : "issuer_eligibility_decision",
    "metadata" : {
      "issuer_product_config_id" : "issuer_product_config_id",
      "cardproduct_preferred_notification_language" : "cardproduct_preferred_notification_language"
    },
    "state_reason" : "state_reason",
    "address_verification" : {
      "zip" : "zip",
      "street_address" : "street_address",
      "name" : "name",
      "postal_code" : "postal_code"
    },
    "fulfillment_status" : "fulfillment_status",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "token_service_provider" : {
      "token_requestor_name" : "token_requestor_name",
      "token_pan" : "token_pan",
      "token_assurance_level" : "token_assurance_level",
      "token_reference_id" : "token_reference_id",
      "correlation_id" : "correlation_id",
      "token_requestor_id" : "token_requestor_id",
      "token_score" : "token_score",
      "token_eligibility_decision" : "token_eligibility_decision",
      "token_expiration" : "token_expiration",
      "token_type" : "token_type",
      "pan_reference_id" : "pan_reference_id"
    },
    "card_token" : "card_token",
    "state" : "state",
    "device" : {
      "language_code" : "language_code",
      "device_id" : "device_id",
      "name" : "name",
      "location" : "location",
      "phone_number" : "phone_number",
      "ip_address" : "ip_address",
      "type" : "type",
      "token" : "token"
    },
    "user" : {
      "country" : "country",
      "metadata" : {
        "key" : "metadata"
      },
      "business_token" : "business_token",
      "notes" : "notes",
      "gender" : "F",
      "city" : "city",
      "birth_date" : "birth_date",
      "account_holder_group_token" : "account_holder_group_token",
      "ssn" : "ssn",
      "id_card_expiration_date" : "id_card_expiration_date",
      "password" : "password",
      "company" : "company",
      "state" : "state",
      "first_name" : "first_name",
      "email" : "email",
      "authentication" : {
        "email_verified" : false,
        "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
        "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
        "last_password_update_channel" : "USER_CHANGE"
      },
      "honorific" : "honorific",
      "zip" : "zip",
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "address2" : "address2",
      "passport_expiration_date" : "passport_expiration_date",
      "address1" : "address1",
      "active" : false,
      "last_name" : "last_name",
      "ip_address" : "ip_address",
      "middle_name" : "middle_name",
      "corporate_card_holder" : false,
      "identifications" : [ {
        "expiration_date" : "expiration_date",
        "type" : "SSN",
        "value" : "value"
      }, {
        "expiration_date" : "expiration_date",
        "type" : "SSN",
        "value" : "value"
      } ],
      "token" : "token",
      "nationality" : "nationality",
      "phone" : "phone",
      "passport_number" : "passport_number",
      "id_card_number" : "id_card_number",
      "postal_code" : "postal_code",
      "uses_parent_account" : false,
      "parent_token" : "parent_token",
      "status" : "UNVERIFIED"
    },
    "wallet_provider_profile" : {
      "reason_code" : "reason_code",
      "recommendation_reasons" : [ "recommendation_reasons", "recommendation_reasons" ],
      "risk_assessment" : {
        "score" : "score",
        "version" : "version"
      },
      "pan_source" : "pan_source",
      "device_score" : "device_score",
      "account" : {
        "score" : "score",
        "email_address" : "email_address",
        "id" : "id"
      }
    }
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "issuer_eligibility_decision" : "issuer_eligibility_decision",
    "metadata" : {
      "issuer_product_config_id" : "issuer_product_config_id",
      "cardproduct_preferred_notification_language" : "cardproduct_preferred_notification_language"
    },
    "state_reason" : "state_reason",
    "address_verification" : {
      "zip" : "zip",
      "street_address" : "street_address",
      "name" : "name",
      "postal_code" : "postal_code"
    },
    "fulfillment_status" : "fulfillment_status",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "token_service_provider" : {
      "token_requestor_name" : "token_requestor_name",
      "token_pan" : "token_pan",
      "token_assurance_level" : "token_assurance_level",
      "token_reference_id" : "token_reference_id",
      "correlation_id" : "correlation_id",
      "token_requestor_id" : "token_requestor_id",
      "token_score" : "token_score",
      "token_eligibility_decision" : "token_eligibility_decision",
      "token_expiration" : "token_expiration",
      "token_type" : "token_type",
      "pan_reference_id" : "pan_reference_id"
    },
    "card_token" : "card_token",
    "state" : "state",
    "device" : {
      "language_code" : "language_code",
      "device_id" : "device_id",
      "name" : "name",
      "location" : "location",
      "phone_number" : "phone_number",
      "ip_address" : "ip_address",
      "type" : "type",
      "token" : "token"
    },
    "user" : {
      "country" : "country",
      "metadata" : {
        "key" : "metadata"
      },
      "business_token" : "business_token",
      "notes" : "notes",
      "gender" : "F",
      "city" : "city",
      "birth_date" : "birth_date",
      "account_holder_group_token" : "account_holder_group_token",
      "ssn" : "ssn",
      "id_card_expiration_date" : "id_card_expiration_date",
      "password" : "password",
      "company" : "company",
      "state" : "state",
      "first_name" : "first_name",
      "email" : "email",
      "authentication" : {
        "email_verified" : false,
        "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
        "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
        "last_password_update_channel" : "USER_CHANGE"
      },
      "honorific" : "honorific",
      "zip" : "zip",
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "address2" : "address2",
      "passport_expiration_date" : "passport_expiration_date",
      "address1" : "address1",
      "active" : false,
      "last_name" : "last_name",
      "ip_address" : "ip_address",
      "middle_name" : "middle_name",
      "corporate_card_holder" : false,
      "identifications" : [ {
        "expiration_date" : "expiration_date",
        "type" : "SSN",
        "value" : "value"
      }, {
        "expiration_date" : "expiration_date",
        "type" : "SSN",
        "value" : "value"
      } ],
      "token" : "token",
      "nationality" : "nationality",
      "phone" : "phone",
      "passport_number" : "passport_number",
      "id_card_number" : "id_card_number",
      "postal_code" : "postal_code",
      "uses_parent_account" : false,
      "parent_token" : "parent_token",
      "status" : "UNVERIFIED"
    },
    "wallet_provider_profile" : {
      "reason_code" : "reason_code",
      "recommendation_reasons" : [ "recommendation_reasons", "recommendation_reasons" ],
      "risk_assessment" : {
        "score" : "score",
        "version" : "version"
      },
      "pan_source" : "pan_source",
      "device_score" : "device_score",
      "account" : {
        "score" : "score",
        "email_address" : "email_address",
        "id" : "id"
      }
    }
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) Number of digital wallet token resources to retrieve. (optional, default to 10)
     - parameter startIndex: (query) Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter startDate: (query) Date when the digital wallet token becomes active. (optional)
     - parameter endDate: (query) Expiration date of the digital wallet token. (optional)
     - parameter panReferenceId: (query) Unique identifier of the digital wallet token primary account number (PAN) within the card network. This value may vary, depending on the digital wallet. For example, the &#x60;pan_reference_id&#x60; may be different in Apple Wallet and Google Wallet for the same digital wallet token. (optional)
     - parameter tokenReferenceId: (query) Unique identifier of the digital wallet token within the card network. The &#x60;token_reference_id&#x60; is unique at the card network level. (optional)
     - parameter correlationId: (query) Unique value representing a tokenization request (Mastercard only). (optional)
     - parameter tokenType: (query) Comma-delimited list of digital wallet token types to display. (optional)
     - parameter tokenRequestorName: (query) Name of the token requestor within the card network.  *NOTE:* The list of example values for this field is maintained by the card networks and is subject to change. (optional)
     - parameter state: (query) Comma-delimited list of digital wallet token states to display. (optional)
     - parameter embed: (query) An optional embedded user object. (optional)

     - returns: RequestBuilder<DigitalWalletTokenListResponse> 
     */
    open class func getDigitalwallettokensWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, startDate: String? = nil, endDate: String? = nil, panReferenceId: String? = nil, tokenReferenceId: String? = nil, correlationId: String? = nil, tokenType: String? = nil, tokenRequestorName: String? = nil, state: String? = nil, embed: Embed_getDigitalwallettokens? = nil) -> RequestBuilder<DigitalWalletTokenListResponse> {
        let path = "/digitalwallettokens"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy, 
                        "start_date": startDate, 
                        "end_date": endDate, 
                        "pan_reference_id": panReferenceId, 
                        "token_reference_id": tokenReferenceId, 
                        "correlation_id": correlationId, 
                        "token_type": tokenType, 
                        "token_requestor_name": tokenRequestorName, 
                        "state": state, 
                        "embed": embed?.rawValue
        ])


        let requestBuilder: RequestBuilder<DigitalWalletTokenListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List digital wallet tokens for card

     - parameter cardToken: (path) Unique identifier of the card. Used to minimize the need to exchange card details during subsequent calls, and also for troubleshooting. 
     - parameter count: (query) Number of digital wallet token resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDigitalwallettokensCardCardtoken(cardToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil, completion: @escaping ((_ data: DigitalWalletTokenListResponse?,_ error: Error?) -> Void)) {
        getDigitalwallettokensCardCardtokenWithRequestBuilder(cardToken: cardToken, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List digital wallet tokens for card
     - GET /digitalwallettokens/card/{card_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "issuer_eligibility_decision" : "issuer_eligibility_decision",
    "metadata" : {
      "issuer_product_config_id" : "issuer_product_config_id",
      "cardproduct_preferred_notification_language" : "cardproduct_preferred_notification_language"
    },
    "state_reason" : "state_reason",
    "address_verification" : {
      "zip" : "zip",
      "street_address" : "street_address",
      "name" : "name",
      "postal_code" : "postal_code"
    },
    "fulfillment_status" : "fulfillment_status",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "token_service_provider" : {
      "token_requestor_name" : "token_requestor_name",
      "token_pan" : "token_pan",
      "token_assurance_level" : "token_assurance_level",
      "token_reference_id" : "token_reference_id",
      "correlation_id" : "correlation_id",
      "token_requestor_id" : "token_requestor_id",
      "token_score" : "token_score",
      "token_eligibility_decision" : "token_eligibility_decision",
      "token_expiration" : "token_expiration",
      "token_type" : "token_type",
      "pan_reference_id" : "pan_reference_id"
    },
    "card_token" : "card_token",
    "state" : "state",
    "device" : {
      "language_code" : "language_code",
      "device_id" : "device_id",
      "name" : "name",
      "location" : "location",
      "phone_number" : "phone_number",
      "ip_address" : "ip_address",
      "type" : "type",
      "token" : "token"
    },
    "user" : {
      "country" : "country",
      "metadata" : {
        "key" : "metadata"
      },
      "business_token" : "business_token",
      "notes" : "notes",
      "gender" : "F",
      "city" : "city",
      "birth_date" : "birth_date",
      "account_holder_group_token" : "account_holder_group_token",
      "ssn" : "ssn",
      "id_card_expiration_date" : "id_card_expiration_date",
      "password" : "password",
      "company" : "company",
      "state" : "state",
      "first_name" : "first_name",
      "email" : "email",
      "authentication" : {
        "email_verified" : false,
        "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
        "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
        "last_password_update_channel" : "USER_CHANGE"
      },
      "honorific" : "honorific",
      "zip" : "zip",
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "address2" : "address2",
      "passport_expiration_date" : "passport_expiration_date",
      "address1" : "address1",
      "active" : false,
      "last_name" : "last_name",
      "ip_address" : "ip_address",
      "middle_name" : "middle_name",
      "corporate_card_holder" : false,
      "identifications" : [ {
        "expiration_date" : "expiration_date",
        "type" : "SSN",
        "value" : "value"
      }, {
        "expiration_date" : "expiration_date",
        "type" : "SSN",
        "value" : "value"
      } ],
      "token" : "token",
      "nationality" : "nationality",
      "phone" : "phone",
      "passport_number" : "passport_number",
      "id_card_number" : "id_card_number",
      "postal_code" : "postal_code",
      "uses_parent_account" : false,
      "parent_token" : "parent_token",
      "status" : "UNVERIFIED"
    },
    "wallet_provider_profile" : {
      "reason_code" : "reason_code",
      "recommendation_reasons" : [ "recommendation_reasons", "recommendation_reasons" ],
      "risk_assessment" : {
        "score" : "score",
        "version" : "version"
      },
      "pan_source" : "pan_source",
      "device_score" : "device_score",
      "account" : {
        "score" : "score",
        "email_address" : "email_address",
        "id" : "id"
      }
    }
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "issuer_eligibility_decision" : "issuer_eligibility_decision",
    "metadata" : {
      "issuer_product_config_id" : "issuer_product_config_id",
      "cardproduct_preferred_notification_language" : "cardproduct_preferred_notification_language"
    },
    "state_reason" : "state_reason",
    "address_verification" : {
      "zip" : "zip",
      "street_address" : "street_address",
      "name" : "name",
      "postal_code" : "postal_code"
    },
    "fulfillment_status" : "fulfillment_status",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "token_service_provider" : {
      "token_requestor_name" : "token_requestor_name",
      "token_pan" : "token_pan",
      "token_assurance_level" : "token_assurance_level",
      "token_reference_id" : "token_reference_id",
      "correlation_id" : "correlation_id",
      "token_requestor_id" : "token_requestor_id",
      "token_score" : "token_score",
      "token_eligibility_decision" : "token_eligibility_decision",
      "token_expiration" : "token_expiration",
      "token_type" : "token_type",
      "pan_reference_id" : "pan_reference_id"
    },
    "card_token" : "card_token",
    "state" : "state",
    "device" : {
      "language_code" : "language_code",
      "device_id" : "device_id",
      "name" : "name",
      "location" : "location",
      "phone_number" : "phone_number",
      "ip_address" : "ip_address",
      "type" : "type",
      "token" : "token"
    },
    "user" : {
      "country" : "country",
      "metadata" : {
        "key" : "metadata"
      },
      "business_token" : "business_token",
      "notes" : "notes",
      "gender" : "F",
      "city" : "city",
      "birth_date" : "birth_date",
      "account_holder_group_token" : "account_holder_group_token",
      "ssn" : "ssn",
      "id_card_expiration_date" : "id_card_expiration_date",
      "password" : "password",
      "company" : "company",
      "state" : "state",
      "first_name" : "first_name",
      "email" : "email",
      "authentication" : {
        "email_verified" : false,
        "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
        "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
        "last_password_update_channel" : "USER_CHANGE"
      },
      "honorific" : "honorific",
      "zip" : "zip",
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "address2" : "address2",
      "passport_expiration_date" : "passport_expiration_date",
      "address1" : "address1",
      "active" : false,
      "last_name" : "last_name",
      "ip_address" : "ip_address",
      "middle_name" : "middle_name",
      "corporate_card_holder" : false,
      "identifications" : [ {
        "expiration_date" : "expiration_date",
        "type" : "SSN",
        "value" : "value"
      }, {
        "expiration_date" : "expiration_date",
        "type" : "SSN",
        "value" : "value"
      } ],
      "token" : "token",
      "nationality" : "nationality",
      "phone" : "phone",
      "passport_number" : "passport_number",
      "id_card_number" : "id_card_number",
      "postal_code" : "postal_code",
      "uses_parent_account" : false,
      "parent_token" : "parent_token",
      "status" : "UNVERIFIED"
    },
    "wallet_provider_profile" : {
      "reason_code" : "reason_code",
      "recommendation_reasons" : [ "recommendation_reasons", "recommendation_reasons" ],
      "risk_assessment" : {
        "score" : "score",
        "version" : "version"
      },
      "pan_source" : "pan_source",
      "device_score" : "device_score",
      "account" : {
        "score" : "score",
        "email_address" : "email_address",
        "id" : "id"
      }
    }
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter cardToken: (path) Unique identifier of the card. Used to minimize the need to exchange card details during subsequent calls, and also for troubleshooting. 
     - parameter count: (query) Number of digital wallet token resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)

     - returns: RequestBuilder<DigitalWalletTokenListResponse> 
     */
    open class func getDigitalwallettokensCardCardtokenWithRequestBuilder(cardToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil) -> RequestBuilder<DigitalWalletTokenListResponse> {
        var path = "/digitalwallettokens/card/{card_token}"
        let cardTokenPreEscape = "\(cardToken)"
        let cardTokenPostEscape = cardTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{card_token}", with: cardTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<DigitalWalletTokenListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve digital wallet token

     - parameter token: (path) Unique identifier of the digital wallet token (DWT). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDigitalwallettokensToken(token: String, completion: @escaping ((_ data: DigitalWalletToken?,_ error: Error?) -> Void)) {
        getDigitalwallettokensTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve digital wallet token
     - GET /digitalwallettokens/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "issuer_eligibility_decision" : "issuer_eligibility_decision",
  "metadata" : {
    "issuer_product_config_id" : "issuer_product_config_id",
    "cardproduct_preferred_notification_language" : "cardproduct_preferred_notification_language"
  },
  "state_reason" : "state_reason",
  "address_verification" : {
    "zip" : "zip",
    "street_address" : "street_address",
    "name" : "name",
    "postal_code" : "postal_code"
  },
  "fulfillment_status" : "fulfillment_status",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "token_service_provider" : {
    "token_requestor_name" : "token_requestor_name",
    "token_pan" : "token_pan",
    "token_assurance_level" : "token_assurance_level",
    "token_reference_id" : "token_reference_id",
    "correlation_id" : "correlation_id",
    "token_requestor_id" : "token_requestor_id",
    "token_score" : "token_score",
    "token_eligibility_decision" : "token_eligibility_decision",
    "token_expiration" : "token_expiration",
    "token_type" : "token_type",
    "pan_reference_id" : "pan_reference_id"
  },
  "card_token" : "card_token",
  "state" : "state",
  "device" : {
    "language_code" : "language_code",
    "device_id" : "device_id",
    "name" : "name",
    "location" : "location",
    "phone_number" : "phone_number",
    "ip_address" : "ip_address",
    "type" : "type",
    "token" : "token"
  },
  "user" : {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "business_token" : "business_token",
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "authentication" : {
      "email_verified" : false,
      "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_channel" : "USER_CHANGE"
    },
    "honorific" : "honorific",
    "zip" : "zip",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : false,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token",
    "status" : "UNVERIFIED"
  },
  "wallet_provider_profile" : {
    "reason_code" : "reason_code",
    "recommendation_reasons" : [ "recommendation_reasons", "recommendation_reasons" ],
    "risk_assessment" : {
      "score" : "score",
      "version" : "version"
    },
    "pan_source" : "pan_source",
    "device_score" : "device_score",
    "account" : {
      "score" : "score",
      "email_address" : "email_address",
      "id" : "id"
    }
  }
}}]
     - parameter token: (path) Unique identifier of the digital wallet token (DWT). 

     - returns: RequestBuilder<DigitalWalletToken> 
     */
    open class func getDigitalwallettokensTokenWithRequestBuilder(token: String) -> RequestBuilder<DigitalWalletToken> {
        var path = "/digitalwallettokens/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DigitalWalletToken>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve digital wallet token PAN

     - parameter token: (path) Unique identifier of the digital wallet token (DWT). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDigitalwallettokensTokenShowtokenpan(token: String, completion: @escaping ((_ data: DigitalWalletToken?,_ error: Error?) -> Void)) {
        getDigitalwallettokensTokenShowtokenpanWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve digital wallet token PAN
     - GET /digitalwallettokens/{token}/showtokenpan

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "issuer_eligibility_decision" : "issuer_eligibility_decision",
  "metadata" : {
    "issuer_product_config_id" : "issuer_product_config_id",
    "cardproduct_preferred_notification_language" : "cardproduct_preferred_notification_language"
  },
  "state_reason" : "state_reason",
  "address_verification" : {
    "zip" : "zip",
    "street_address" : "street_address",
    "name" : "name",
    "postal_code" : "postal_code"
  },
  "fulfillment_status" : "fulfillment_status",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "token_service_provider" : {
    "token_requestor_name" : "token_requestor_name",
    "token_pan" : "token_pan",
    "token_assurance_level" : "token_assurance_level",
    "token_reference_id" : "token_reference_id",
    "correlation_id" : "correlation_id",
    "token_requestor_id" : "token_requestor_id",
    "token_score" : "token_score",
    "token_eligibility_decision" : "token_eligibility_decision",
    "token_expiration" : "token_expiration",
    "token_type" : "token_type",
    "pan_reference_id" : "pan_reference_id"
  },
  "card_token" : "card_token",
  "state" : "state",
  "device" : {
    "language_code" : "language_code",
    "device_id" : "device_id",
    "name" : "name",
    "location" : "location",
    "phone_number" : "phone_number",
    "ip_address" : "ip_address",
    "type" : "type",
    "token" : "token"
  },
  "user" : {
    "country" : "country",
    "metadata" : {
      "key" : "metadata"
    },
    "business_token" : "business_token",
    "notes" : "notes",
    "gender" : "F",
    "city" : "city",
    "birth_date" : "birth_date",
    "account_holder_group_token" : "account_holder_group_token",
    "ssn" : "ssn",
    "id_card_expiration_date" : "id_card_expiration_date",
    "password" : "password",
    "company" : "company",
    "state" : "state",
    "first_name" : "first_name",
    "email" : "email",
    "authentication" : {
      "email_verified" : false,
      "email_verified_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_time" : "2000-01-23T04:56:07.000+00:00",
      "last_password_update_channel" : "USER_CHANGE"
    },
    "honorific" : "honorific",
    "zip" : "zip",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "address2" : "address2",
    "passport_expiration_date" : "passport_expiration_date",
    "address1" : "address1",
    "active" : false,
    "last_name" : "last_name",
    "ip_address" : "ip_address",
    "middle_name" : "middle_name",
    "corporate_card_holder" : false,
    "identifications" : [ {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    }, {
      "expiration_date" : "expiration_date",
      "type" : "SSN",
      "value" : "value"
    } ],
    "token" : "token",
    "nationality" : "nationality",
    "phone" : "phone",
    "passport_number" : "passport_number",
    "id_card_number" : "id_card_number",
    "postal_code" : "postal_code",
    "uses_parent_account" : false,
    "parent_token" : "parent_token",
    "status" : "UNVERIFIED"
  },
  "wallet_provider_profile" : {
    "reason_code" : "reason_code",
    "recommendation_reasons" : [ "recommendation_reasons", "recommendation_reasons" ],
    "risk_assessment" : {
      "score" : "score",
      "version" : "version"
    },
    "pan_source" : "pan_source",
    "device_score" : "device_score",
    "account" : {
      "score" : "score",
      "email_address" : "email_address",
      "id" : "id"
    }
  }
}}]
     - parameter token: (path) Unique identifier of the digital wallet token (DWT). 

     - returns: RequestBuilder<DigitalWalletToken> 
     */
    open class func getDigitalwallettokensTokenShowtokenpanWithRequestBuilder(token: String) -> RequestBuilder<DigitalWalletToken> {
        var path = "/digitalwallettokens/{token}/showtokenpan"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DigitalWalletToken>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List transitions for digital wallet token

     - parameter token: (path) Unique identifier of the digital wallet token (DWT). 
     - parameter count: (query) Number of digital wallet transitions to retrieve. (optional, default to 5)
     - parameter startIndex: (query) The sort order index of the first digital wallet token in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -id)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDigitalwallettokentransitionsDigitalwallettokenToken(token: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: DigitalWalletTokenTransitionListResponse?,_ error: Error?) -> Void)) {
        getDigitalwallettokentransitionsDigitalwallettokenTokenWithRequestBuilder(token: token, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List transitions for digital wallet token
     - GET /digitalwallettokentransitions/digitalwallettoken/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "reason_code" : "00",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "fulfillment_status" : "DECISION_RED",
    "card_swap" : {
      "new_card_token" : "new_card_token",
      "previous_card_token" : "previous_card_token"
    },
    "channel" : "TOKEN_SERVICE_PROVIDER",
    "state" : "REQUESTED",
    "digital_wallet_token" : {
      "card_token" : "card_token",
      "token" : "token"
    },
    "type" : "type",
    "token" : "token"
  }, {
    "reason_code" : "00",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "fulfillment_status" : "DECISION_RED",
    "card_swap" : {
      "new_card_token" : "new_card_token",
      "previous_card_token" : "previous_card_token"
    },
    "channel" : "TOKEN_SERVICE_PROVIDER",
    "state" : "REQUESTED",
    "digital_wallet_token" : {
      "card_token" : "card_token",
      "token" : "token"
    },
    "type" : "type",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter token: (path) Unique identifier of the digital wallet token (DWT). 
     - parameter count: (query) Number of digital wallet transitions to retrieve. (optional, default to 5)
     - parameter startIndex: (query) The sort order index of the first digital wallet token in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -id)

     - returns: RequestBuilder<DigitalWalletTokenTransitionListResponse> 
     */
    open class func getDigitalwallettokentransitionsDigitalwallettokenTokenWithRequestBuilder(token: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<DigitalWalletTokenTransitionListResponse> {
        var path = "/digitalwallettokentransitions/digitalwallettoken/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<DigitalWalletTokenTransitionListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve digital wallet token transition

     - parameter token: (path) Unique identifier of the digital wallet token (DWT) transition. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDigitalwallettokentransitionsToken(token: String, fields: String? = nil, completion: @escaping ((_ data: DigitalWalletTokenTransitionResponse?,_ error: Error?) -> Void)) {
        getDigitalwallettokentransitionsTokenWithRequestBuilder(token: token, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve digital wallet token transition
     - GET /digitalwallettokentransitions/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "reason_code" : "00",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "reason" : "reason",
  "fulfillment_status" : "DECISION_RED",
  "card_swap" : {
    "new_card_token" : "new_card_token",
    "previous_card_token" : "previous_card_token"
  },
  "channel" : "TOKEN_SERVICE_PROVIDER",
  "state" : "REQUESTED",
  "digital_wallet_token" : {
    "card_token" : "card_token",
    "token" : "token"
  },
  "type" : "type",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the digital wallet token (DWT) transition. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<DigitalWalletTokenTransitionResponse> 
     */
    open class func getDigitalwallettokentransitionsTokenWithRequestBuilder(token: String, fields: String? = nil) -> RequestBuilder<DigitalWalletTokenTransitionResponse> {
        var path = "/digitalwallettokentransitions/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<DigitalWalletTokenTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create digital wallet token provisioning request for Google Wallet

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDigitalwalletprovisionrequestsAndroidpay(body: DigitalWalletAndroidPayProvisionRequest? = nil, completion: @escaping ((_ data: DigitalWalletAndroidPayProvisionResponse?,_ error: Error?) -> Void)) {
        postDigitalwalletprovisionrequestsAndroidpayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create digital wallet token provisioning request for Google Wallet
     - POST /digitalwalletprovisionrequests/androidpay

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "push_tokenize_request_data" : {
    "token_service_provider" : "token_service_provider",
    "opaque_payment_card" : "opaque_payment_card",
    "user_address" : {
      "zip" : "zip",
      "country" : "country",
      "address2" : "address2",
      "city" : "city",
      "phone" : "phone",
      "address1" : "address1",
      "name" : "name",
      "state" : "state",
      "postal_code" : "postal_code"
    },
    "display_name" : "display_name",
    "last_digits" : "last_digits",
    "network" : "network"
  },
  "card_token" : "card_token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DigitalWalletAndroidPayProvisionResponse> 
     */
    open class func postDigitalwalletprovisionrequestsAndroidpayWithRequestBuilder(body: DigitalWalletAndroidPayProvisionRequest? = nil) -> RequestBuilder<DigitalWalletAndroidPayProvisionResponse> {
        let path = "/digitalwalletprovisionrequests/androidpay"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DigitalWalletAndroidPayProvisionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create digital wallet token provisioning request for Apple Wallet

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDigitalwalletprovisionrequestsApplepay(body: DigitalWalletApplePayProvisionRequest? = nil, completion: @escaping ((_ data: DigitalWalletApplePayProvisionResponse?,_ error: Error?) -> Void)) {
        postDigitalwalletprovisionrequestsApplepayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create digital wallet token provisioning request for Apple Wallet
     - POST /digitalwalletprovisionrequests/applepay

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "ephemeral_public_key" : "ephemeral_public_key",
  "activation_data" : "activation_data",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "encrypted_pass_data" : "encrypted_pass_data",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "card_token" : "card_token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DigitalWalletApplePayProvisionResponse> 
     */
    open class func postDigitalwalletprovisionrequestsApplepayWithRequestBuilder(body: DigitalWalletApplePayProvisionRequest? = nil) -> RequestBuilder<DigitalWalletApplePayProvisionResponse> {
        let path = "/digitalwalletprovisionrequests/applepay"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DigitalWalletApplePayProvisionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create digital wallet token provisioning request for Samsung Wallet

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDigitalwalletprovisionrequestsSamsungpay(body: DigitalWalletSamsungPayProvisionRequest? = nil, completion: @escaping ((_ data: DigitalWalletSamsungPayProvisionResponse?,_ error: Error?) -> Void)) {
        postDigitalwalletprovisionrequestsSamsungpayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create digital wallet token provisioning request for Samsung Wallet
     - POST /digitalwalletprovisionrequests/samsungpay

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "push_tokenize_request_data" : {
    "token_service_provider" : "token_service_provider",
    "card_type" : "card_type",
    "display_name" : "display_name",
    "last_digits" : "last_digits",
    "extra_provision_payload" : "extra_provision_payload",
    "network" : "network"
  },
  "card_token" : "card_token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DigitalWalletSamsungPayProvisionResponse> 
     */
    open class func postDigitalwalletprovisionrequestsSamsungpayWithRequestBuilder(body: DigitalWalletSamsungPayProvisionRequest? = nil) -> RequestBuilder<DigitalWalletSamsungPayProvisionResponse> {
        let path = "/digitalwalletprovisionrequests/samsungpay"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DigitalWalletSamsungPayProvisionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create digital wallet token provisioning request for XPay

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDigitalwalletprovisionrequestsXPay(body: DigitalWalletXPayProvisionRequest? = nil, completion: @escaping ((_ data: DigitalWalletXPayProvisionResponse?,_ error: Error?) -> Void)) {
        postDigitalwalletprovisionrequestsXPayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create digital wallet token provisioning request for XPay
     - POST /digitalwalletprovisionrequests/xpay

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "push_tokenize_request_data" : {
    "token_service_provider" : "token_service_provider",
    "card_type" : "card_type",
    "display_name" : "display_name",
    "last_digits" : "last_digits",
    "extra_provision_payload" : "extra_provision_payload",
    "network" : "network"
  },
  "card_token" : "card_token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DigitalWalletXPayProvisionResponse> 
     */
    open class func postDigitalwalletprovisionrequestsXPayWithRequestBuilder(body: DigitalWalletXPayProvisionRequest? = nil) -> RequestBuilder<DigitalWalletXPayProvisionResponse> {
        let path = "/digitalwalletprovisionrequests/xpay"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DigitalWalletXPayProvisionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create digital wallet token transition

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDigitalwallettokentransitions(body: DigitalWalletTokenTransitionRequest? = nil, completion: @escaping ((_ data: DigitalWalletTokenTransitionResponse?,_ error: Error?) -> Void)) {
        postDigitalwallettokentransitionsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create digital wallet token transition
     - POST /digitalwallettokentransitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "reason_code" : "00",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "reason" : "reason",
  "fulfillment_status" : "DECISION_RED",
  "card_swap" : {
    "new_card_token" : "new_card_token",
    "previous_card_token" : "previous_card_token"
  },
  "channel" : "TOKEN_SERVICE_PROVIDER",
  "state" : "REQUESTED",
  "digital_wallet_token" : {
    "card_token" : "card_token",
    "token" : "token"
  },
  "type" : "type",
  "token" : "token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DigitalWalletTokenTransitionResponse> 
     */
    open class func postDigitalwallettokentransitionsWithRequestBuilder(body: DigitalWalletTokenTransitionRequest? = nil) -> RequestBuilder<DigitalWalletTokenTransitionResponse> {
        let path = "/digitalwallettokentransitions"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DigitalWalletTokenTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create request for Google Wallet web push provisioning

     - parameter body: (body)  
     - parameter reqSysId: (header) Random pseudo-unique value used for troubleshooting between multiple parties. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendOPCDataToGooglePay(body: SendingProvisioningDataToGooglePayBackendRequest, reqSysId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sendOPCDataToGooglePayWithRequestBuilder(body: body, reqSysId: reqSysId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create request for Google Wallet web push provisioning
     - POST /digitalwallets/wpp/googlePayPushProvisioningNotification

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - responseHeaders: [req-sys-id(String)]
     - parameter body: (body)  
     - parameter reqSysId: (header) Random pseudo-unique value used for troubleshooting between multiple parties. 

     - returns: RequestBuilder<Void> 
     */
    open class func sendOPCDataToGooglePayWithRequestBuilder(body: SendingProvisioningDataToGooglePayBackendRequest, reqSysId: String) -> RequestBuilder<Void> {
        let path = "/digitalwallets/wpp/googlePayPushProvisioningNotification"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "req-sys-id": reqSysId
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
