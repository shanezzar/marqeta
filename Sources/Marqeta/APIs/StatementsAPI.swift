//
// StatementsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class StatementsAPI {
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_getStatementFilesByAccount: String { 
        case createdtime = "createdTime"
        case createdtime_1 = "-createdTime"
    }

    /**
     List files for an account

     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve statement files.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter startDate: (query) The start date of the statement files to return. (optional)
     - parameter endDate: (query) The end date of the statement files to return. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStatementFilesByAccount(accountToken: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getStatementFilesByAccount? = nil, completion: @escaping ((_ data: StatementFilePage?,_ error: Error?) -> Void)) {
        getStatementFilesByAccountWithRequestBuilder(accountToken: accountToken, startDate: startDate, endDate: endDate, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List files for an account
     - GET /credit/accounts/{account_token}/statements/files

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "closing_date" : "2000-01-23T04:56:07.000+00:00",
    "signed_url" : "signed_url",
    "statement_summary_token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "account_token" : "account_token",
    "type" : "STATEMENT_PDF",
    "opening_date" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token"
  }, {
    "closing_date" : "2000-01-23T04:56:07.000+00:00",
    "signed_url" : "signed_url",
    "statement_summary_token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "account_token" : "account_token",
    "type" : "STATEMENT_PDF",
    "opening_date" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve statement files.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter startDate: (query) The start date of the statement files to return. (optional)
     - parameter endDate: (query) The end date of the statement files to return. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)

     - returns: RequestBuilder<StatementFilePage> 
     */
    open class func getStatementFilesByAccountWithRequestBuilder(accountToken: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getStatementFilesByAccount? = nil) -> RequestBuilder<StatementFilePage> {
        var path = "/credit/accounts/{account_token}/statements/files"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start_date": startDate?.encodeToJSON(), 
                        "end_date": endDate?.encodeToJSON(), 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<StatementFilePage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_getStatementSummariesByAccount: String { 
        case createdtime = "createdTime"
        case createdtime_1 = "-createdTime"
    }

    /**
     List account statement summaries

     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve statement summaries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter startDate: (query) Returns statements with a matching opening date.  If both &#x60;start_date&#x60; and &#x60;end_date&#x60; are specified, statements whose closing date falls between the start and end dates are returned. (optional)
     - parameter endDate: (query) Returns statements with a matching closing date.  If both &#x60;start_date&#x60; and &#x60;end_date&#x60; are specified, statements whose closing date falls between the start and end dates are returned. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStatementSummariesByAccount(accountToken: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getStatementSummariesByAccount? = nil, completion: @escaping ((_ data: StatementSummaryPage?,_ error: Error?) -> Void)) {
        getStatementSummariesByAccountWithRequestBuilder(accountToken: accountToken, startDate: startDate, endDate: endDate, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List account statement summaries
     - GET /credit/accounts/{account_token}/statements

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "closing_date" : "2000-01-23T04:56:07.000+00:00",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "fees" : 7.061401241503109,
    "purchases" : 7.386281948385884,
    "payments" : 4.145608029883936,
    "account_token" : "account_token",
    "past_due_amount" : 2.027123023002322,
    "cycle_type" : "BEGINNING_REVOLVING",
    "token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "credits" : 5.637376656633329,
    "interest" : 9.301444243932576,
    "closing_balance" : 1.4658129805029452,
    "credit_limit" : 5.962133916683182,
    "opening_balance" : 3.616076749251911,
    "available_credit" : 6.027456183070403,
    "days_in_billing_cycle" : 2,
    "opening_date" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "closing_date" : "2000-01-23T04:56:07.000+00:00",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "fees" : 7.061401241503109,
    "purchases" : 7.386281948385884,
    "payments" : 4.145608029883936,
    "account_token" : "account_token",
    "past_due_amount" : 2.027123023002322,
    "cycle_type" : "BEGINNING_REVOLVING",
    "token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "credits" : 5.637376656633329,
    "interest" : 9.301444243932576,
    "closing_balance" : 1.4658129805029452,
    "credit_limit" : 5.962133916683182,
    "opening_balance" : 3.616076749251911,
    "available_credit" : 6.027456183070403,
    "days_in_billing_cycle" : 2,
    "opening_date" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 1
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve statement summaries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter startDate: (query) Returns statements with a matching opening date.  If both &#x60;start_date&#x60; and &#x60;end_date&#x60; are specified, statements whose closing date falls between the start and end dates are returned. (optional)
     - parameter endDate: (query) Returns statements with a matching closing date.  If both &#x60;start_date&#x60; and &#x60;end_date&#x60; are specified, statements whose closing date falls between the start and end dates are returned. (optional)
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;. (optional, default to -createdTime)

     - returns: RequestBuilder<StatementSummaryPage> 
     */
    open class func getStatementSummariesByAccountWithRequestBuilder(accountToken: String, startDate: Date? = nil, endDate: Date? = nil, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getStatementSummariesByAccount? = nil) -> RequestBuilder<StatementSummaryPage> {
        var path = "/credit/accounts/{account_token}/statements"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start_date": startDate?.encodeToJSON(), 
                        "end_date": endDate?.encodeToJSON(), 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<StatementSummaryPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter expand
     */
    public enum Expand_listStatementJournalEntries: String { 
        case detailobject = "detailObject"
    }

    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listStatementJournalEntries: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List account statement journal entries

     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve the statement journal entries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve journal entries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 
     - parameter count: (query) Specifies the number of journal entries to return. (optional, default to 5)
     - parameter startIndex: (query) Specifies the sort order index from which to begin returning journal entries. (optional, default to 0)
     - parameter expand: (query) Embeds the specified object into the response. (optional)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listStatementJournalEntries(accountToken: String, statementSummaryToken: String, count: Int? = nil, startIndex: Int? = nil, expand: Expand_listStatementJournalEntries? = nil, sortBy: SortBy_listStatementJournalEntries? = nil, completion: @escaping ((_ data: JournalEntriesPage?,_ error: Error?) -> Void)) {
        listStatementJournalEntriesWithRequestBuilder(accountToken: accountToken, statementSummaryToken: statementSummaryToken, count: count, startIndex: startIndex, expand: expand, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List account statement journal entries
     - GET /credit/accounts/{account_token}/statements/{statement_summary_token}/journalentries

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 6.027456183070403,
    "impact_time" : "2000-01-23T04:56:07.000+00:00",
    "account_token" : "account_token",
    "detail_token" : "detail_token",
    "memo" : "Whole Foods Market",
    "type" : "`authorization.clearing`",
    "currency_code" : "USD",
    "token" : "token",
    "request_time" : "2000-01-23T04:56:07.000+00:00",
    "root_token" : "root_token",
    "card_token" : "card_token",
    "detail_object" : { },
    "id" : "id",
    "user_token" : "user_token",
    "related_token" : "related_token",
    "dispute_token" : "dispute_token",
    "group" : "PURCHASE",
    "status" : "PENDING"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 6.027456183070403,
    "impact_time" : "2000-01-23T04:56:07.000+00:00",
    "account_token" : "account_token",
    "detail_token" : "detail_token",
    "memo" : "Whole Foods Market",
    "type" : "`authorization.clearing`",
    "currency_code" : "USD",
    "token" : "token",
    "request_time" : "2000-01-23T04:56:07.000+00:00",
    "root_token" : "root_token",
    "card_token" : "card_token",
    "detail_object" : { },
    "id" : "id",
    "user_token" : "user_token",
    "related_token" : "related_token",
    "dispute_token" : "dispute_token",
    "group" : "PURCHASE",
    "status" : "PENDING"
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 1
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve the statement journal entries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve journal entries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 
     - parameter count: (query) Specifies the number of journal entries to return. (optional, default to 5)
     - parameter startIndex: (query) Specifies the sort order index from which to begin returning journal entries. (optional, default to 0)
     - parameter expand: (query) Embeds the specified object into the response. (optional)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to lastModifiedTime)

     - returns: RequestBuilder<JournalEntriesPage> 
     */
    open class func listStatementJournalEntriesWithRequestBuilder(accountToken: String, statementSummaryToken: String, count: Int? = nil, startIndex: Int? = nil, expand: Expand_listStatementJournalEntries? = nil, sortBy: SortBy_listStatementJournalEntries? = nil) -> RequestBuilder<JournalEntriesPage> {
        var path = "/credit/accounts/{account_token}/statements/{statement_summary_token}/journalentries"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let statementSummaryTokenPreEscape = "\(statementSummaryToken)"
        let statementSummaryTokenPostEscape = statementSummaryTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statement_summary_token}", with: statementSummaryTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "expand": expand?.rawValue, 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<JournalEntriesPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter expand
     */
    public enum Expand_listStatementLedgerEntries: String { 
        case detailobject = "detailObject"
    }

    /**
     * enum for parameter sortBy
     */
    public enum SortBy_listStatementLedgerEntries: String { 
        case lastmodifiedtime = "lastModifiedTime"
        case lastmodifiedtime_1 = "-lastModifiedTime"
    }

    /**
     List account statement ledger entries

     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve the statement ledger entries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve ledger entries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 
     - parameter expand: (query) Embeds the specified object into the response. (optional)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listStatementLedgerEntries(accountToken: String, statementSummaryToken: String, expand: Expand_listStatementLedgerEntries? = nil, sortBy: SortBy_listStatementLedgerEntries? = nil, completion: @escaping ((_ data: [LedgerEntry]?,_ error: Error?) -> Void)) {
        listStatementLedgerEntriesWithRequestBuilder(accountToken: accountToken, statementSummaryToken: statementSummaryToken, expand: expand, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List account statement ledger entries
     - GET /credit/accounts/{account_token}/statements/{statement_summary_token}/ledgerentries

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example=[ {
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 6.027456183070403,
  "impact_time" : "2000-01-23T04:56:07.000+00:00",
  "account_token" : "account_token",
  "detail_token" : "detail_token",
  "memo" : "Whole Foods Market",
  "type" : "`authorization.clearing`",
  "currency_code" : "USD",
  "token" : "token",
  "request_time" : "2000-01-23T04:56:07.000+00:00",
  "root_token" : "root_token",
  "card_token" : "card_token",
  "detail_object" : { },
  "id" : "id",
  "related_token" : "related_token",
  "dispute_token" : "dispute_token",
  "group" : "PURCHASE",
  "status" : "PENDING"
}, {
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 6.027456183070403,
  "impact_time" : "2000-01-23T04:56:07.000+00:00",
  "account_token" : "account_token",
  "detail_token" : "detail_token",
  "memo" : "Whole Foods Market",
  "type" : "`authorization.clearing`",
  "currency_code" : "USD",
  "token" : "token",
  "request_time" : "2000-01-23T04:56:07.000+00:00",
  "root_token" : "root_token",
  "card_token" : "card_token",
  "detail_object" : { },
  "id" : "id",
  "related_token" : "related_token",
  "dispute_token" : "dispute_token",
  "group" : "PURCHASE",
  "status" : "PENDING"
} ]}]
     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve the statement ledger entries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve ledger entries.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 
     - parameter expand: (query) Embeds the specified object into the response. (optional)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;. (optional, default to lastModifiedTime)

     - returns: RequestBuilder<[LedgerEntry]> 
     */
    open class func listStatementLedgerEntriesWithRequestBuilder(accountToken: String, statementSummaryToken: String, expand: Expand_listStatementLedgerEntries? = nil, sortBy: SortBy_listStatementLedgerEntries? = nil) -> RequestBuilder<[LedgerEntry]> {
        var path = "/credit/accounts/{account_token}/statements/{statement_summary_token}/ledgerentries"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let statementSummaryTokenPreEscape = "\(statementSummaryToken)"
        let statementSummaryTokenPostEscape = statementSummaryTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statement_summary_token}", with: statementSummaryTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "expand": expand?.rawValue, 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<[LedgerEntry]>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter eventType
     */
    public enum EventType_resendWebhookEvent: String { 
        case ledgerentry = "ledgerentry"
        case journalentry = "journalentry"
        case accounttransition = "accounttransition"
        case accountstatement = "accountstatement"
        case paymenttransition = "paymenttransition"
        case delinquencytransition = "delinquencytransition"
    }

    /**
     Resend credit event notification

     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter resourceToken: (path) The unique identifier of the resource for which you want to resend a notification.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/journalentries&#x60; to retrieve existing journal entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/ledgerentries&#x60; to retrieve existing ledger entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments/{payment_token}&#x60; to retrieve existing payment transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/statements&#x60; to retrieve existing statement summary tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/delinquencystate/transitions&#x60; to retrieve existing delinquency state transition tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendWebhookEvent(eventType: EventType_resendWebhookEvent, resourceToken: String, completion: @escaping ((_ data: WebhookEventResendContainerResponse?,_ error: Error?) -> Void)) {
        resendWebhookEventWithRequestBuilder(eventType: eventType, resourceToken: resourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Resend credit event notification
     - POST /credit/webhooks/{event_type}/{resource_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "unused" : "unused"
}}]
     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter resourceToken: (path) The unique identifier of the resource for which you want to resend a notification.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/journalentries&#x60; to retrieve existing journal entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/ledgerentries&#x60; to retrieve existing ledger entry tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/accounttransitions&#x60; to retrieve existing account transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{account_token}/payments/{payment_token}&#x60; to retrieve existing payment transition tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/statements&#x60; to retrieve existing statement summary tokens.  Send a &#x60;GET&#x60; request to &#x60;/accounts/{account_token}/delinquencystate/transitions&#x60; to retrieve existing delinquency state transition tokens. 

     - returns: RequestBuilder<WebhookEventResendContainerResponse> 
     */
    open class func resendWebhookEventWithRequestBuilder(eventType: EventType_resendWebhookEvent, resourceToken: String) -> RequestBuilder<WebhookEventResendContainerResponse> {
        var path = "/credit/webhooks/{event_type}/{resource_token}"
        let eventTypePreEscape = "\(eventType.rawValue)"
        let eventTypePostEscape = eventTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_type}", with: eventTypePostEscape, options: .literal, range: nil)
        let resourceTokenPreEscape = "\(resourceToken)"
        let resourceTokenPostEscape = resourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_token}", with: resourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookEventResendContainerResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List files for a statement summary

     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve statement files for a statement summary.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary whose statement files you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements&#x60; to retrieve existing statement summary tokens. 
     - parameter count: (query) The number of statement files to return. (optional, default to 5)
     - parameter startIndex: (query) Sort order index from which to begin returning files. (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveStatementFiles(accountToken: String, statementSummaryToken: String, count: Int? = nil, startIndex: Int? = nil, completion: @escaping ((_ data: StatementFilePage?,_ error: Error?) -> Void)) {
        retrieveStatementFilesWithRequestBuilder(accountToken: accountToken, statementSummaryToken: statementSummaryToken, count: count, startIndex: startIndex).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List files for a statement summary
     - GET /credit/accounts/{account_token}/statements/{statement_summary_token}/files

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "closing_date" : "2000-01-23T04:56:07.000+00:00",
    "signed_url" : "signed_url",
    "statement_summary_token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "account_token" : "account_token",
    "type" : "STATEMENT_PDF",
    "opening_date" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token"
  }, {
    "closing_date" : "2000-01-23T04:56:07.000+00:00",
    "signed_url" : "signed_url",
    "statement_summary_token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "account_token" : "account_token",
    "type" : "STATEMENT_PDF",
    "opening_date" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve statement files for a statement summary.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary whose statement files you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements&#x60; to retrieve existing statement summary tokens. 
     - parameter count: (query) The number of statement files to return. (optional, default to 5)
     - parameter startIndex: (query) Sort order index from which to begin returning files. (optional, default to 0)

     - returns: RequestBuilder<StatementFilePage> 
     */
    open class func retrieveStatementFilesWithRequestBuilder(accountToken: String, statementSummaryToken: String, count: Int? = nil, startIndex: Int? = nil) -> RequestBuilder<StatementFilePage> {
        var path = "/credit/accounts/{account_token}/statements/{statement_summary_token}/files"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let statementSummaryTokenPreEscape = "\(statementSummaryToken)"
        let statementSummaryTokenPostEscape = statementSummaryTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statement_summary_token}", with: statementSummaryTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<StatementFilePage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve account statement interest charges

     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve the statement interest charges.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve the interest charges.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveStatementInterestCharges(accountToken: String, statementSummaryToken: String, completion: @escaping ((_ data: StatementInterestChargesPage?,_ error: Error?) -> Void)) {
        retrieveStatementInterestChargesWithRequestBuilder(accountToken: accountToken, statementSummaryToken: statementSummaryToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve account statement interest charges
     - GET /credit/accounts/{account_token}/statements/{statement_summary_token}/interestcharges

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "amount" : 0.8008281904610115,
    "apr_type" : "GO_TO",
    "apr_value" : 60.27456183070403,
    "balance_type" : "PURCHASE",
    "balance_subject_to_interest_rate" : 1.4658129805029452
  }, {
    "amount" : 0.8008281904610115,
    "apr_type" : "GO_TO",
    "apr_value" : 60.27456183070403,
    "balance_type" : "PURCHASE",
    "balance_subject_to_interest_rate" : 1.4658129805029452
  } ],
  "statement_summary_token" : "statement_summary_token",
  "account_token" : "account_token"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve the statement interest charges.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve the interest charges.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 

     - returns: RequestBuilder<StatementInterestChargesPage> 
     */
    open class func retrieveStatementInterestChargesWithRequestBuilder(accountToken: String, statementSummaryToken: String) -> RequestBuilder<StatementInterestChargesPage> {
        var path = "/credit/accounts/{account_token}/statements/{statement_summary_token}/interestcharges"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let statementSummaryTokenPreEscape = "\(statementSummaryToken)"
        let statementSummaryTokenPostEscape = statementSummaryTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statement_summary_token}", with: statementSummaryTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StatementInterestChargesPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve account statement payment information

     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve the statement payment information.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve the payment information.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveStatementPaymentInfo(accountToken: String, statementSummaryToken: String, completion: @escaping ((_ data: StatementPaymentInfo?,_ error: Error?) -> Void)) {
        retrieveStatementPaymentInfoWithRequestBuilder(accountToken: accountToken, statementSummaryToken: statementSummaryToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve account statement payment information
     - GET /credit/accounts/{account_token}/statements/{statement_summary_token}/paymentinfo

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "new_statement_balance" : 6.027456183070403,
  "statement_summary_token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "warnings" : [ {
    "disclosure" : "NEGATIVE_OR_NO_AMORTIZATION",
    "pay_off_period" : 1,
    "total_paid" : 7.061401241503109,
    "interest_paid" : 5.962133916683182,
    "type" : "MIN_PAYMENT",
    "period_type" : "MONTH",
    "monthly_payment" : 5.637376656633329
  }, {
    "disclosure" : "NEGATIVE_OR_NO_AMORTIZATION",
    "pay_off_period" : 1,
    "total_paid" : 7.061401241503109,
    "interest_paid" : 5.962133916683182,
    "type" : "MIN_PAYMENT",
    "period_type" : "MONTH",
    "monthly_payment" : 5.637376656633329
  } ],
  "payment_due_date" : "2000-01-23T04:56:07.000+00:00",
  "three_year_savings" : 1.4658129805029452,
  "minimum_payment_due" : 0.8008281904610115,
  "payment_cutoff_date" : "2000-01-23T04:56:07.000+00:00",
  "token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve the statement payment information.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve the payment information.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 

     - returns: RequestBuilder<StatementPaymentInfo> 
     */
    open class func retrieveStatementPaymentInfoWithRequestBuilder(accountToken: String, statementSummaryToken: String) -> RequestBuilder<StatementPaymentInfo> {
        var path = "/credit/accounts/{account_token}/statements/{statement_summary_token}/paymentinfo"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let statementSummaryTokenPreEscape = "\(statementSummaryToken)"
        let statementSummaryTokenPostEscape = statementSummaryTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statement_summary_token}", with: statementSummaryTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StatementPaymentInfo>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve account statement rewards

     - parameter accountToken: (path) The unique identifier of the credit account from which to retrieve statement rewards.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve rewards.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveStatementReward(accountToken: String, statementSummaryToken: String, completion: @escaping ((_ data: StatementReward?,_ error: Error?) -> Void)) {
        retrieveStatementRewardWithRequestBuilder(accountToken: accountToken, statementSummaryToken: statementSummaryToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve account statement rewards
     - GET /credit/accounts/{account_token}/statements/{statement_summary_token}/rewards

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "current_billing_cycle_reward" : 0.8008281904610115,
  "previous_billing_cycle_reward" : 6.027456183070403,
  "token" : "token"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account from which to retrieve statement rewards.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve rewards.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 

     - returns: RequestBuilder<StatementReward> 
     */
    open class func retrieveStatementRewardWithRequestBuilder(accountToken: String, statementSummaryToken: String) -> RequestBuilder<StatementReward> {
        var path = "/credit/accounts/{account_token}/statements/{statement_summary_token}/rewards"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let statementSummaryTokenPreEscape = "\(statementSummaryToken)"
        let statementSummaryTokenPostEscape = statementSummaryTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statement_summary_token}", with: statementSummaryTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StatementReward>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve account statement summary

     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve a statement summary.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveStatementSummary(accountToken: String, statementSummaryToken: String, completion: @escaping ((_ data: StatementSummary?,_ error: Error?) -> Void)) {
        retrieveStatementSummaryWithRequestBuilder(accountToken: accountToken, statementSummaryToken: statementSummaryToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve account statement summary
     - GET /credit/accounts/{account_token}/statements/{statement_summary_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "closing_date" : "2000-01-23T04:56:07.000+00:00",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "fees" : 7.061401241503109,
  "purchases" : 7.386281948385884,
  "payments" : 4.145608029883936,
  "account_token" : "account_token",
  "past_due_amount" : 2.027123023002322,
  "cycle_type" : "BEGINNING_REVOLVING",
  "token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "credits" : 5.637376656633329,
  "interest" : 9.301444243932576,
  "closing_balance" : 1.4658129805029452,
  "credit_limit" : 5.962133916683182,
  "opening_balance" : 3.616076749251911,
  "available_credit" : 6.027456183070403,
  "days_in_billing_cycle" : 2,
  "opening_date" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to retrieve a statement summary.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 

     - returns: RequestBuilder<StatementSummary> 
     */
    open class func retrieveStatementSummaryWithRequestBuilder(accountToken: String, statementSummaryToken: String) -> RequestBuilder<StatementSummary> {
        var path = "/credit/accounts/{account_token}/statements/{statement_summary_token}"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let statementSummaryTokenPreEscape = "\(statementSummaryToken)"
        let statementSummaryTokenPostEscape = statementSummaryTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statement_summary_token}", with: statementSummaryTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StatementSummary>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve account statement year-to-date totals

     - parameter accountToken: (path) The unique identifier of the credit account from which to retrieve statement year-to-date totals.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve year-to-date totals.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveYearToDateForStatementSummary(accountToken: String, statementSummaryToken: String, completion: @escaping ((_ data: YearToDate?,_ error: Error?) -> Void)) {
        retrieveYearToDateForStatementSummaryWithRequestBuilder(accountToken: accountToken, statementSummaryToken: statementSummaryToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve account statement year-to-date totals
     - GET /credit/accounts/{account_token}/statements/{statement_summary_token}/yeartodate

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "statement_token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "total_interest" : 6.027456183070403,
  "total_fees" : 0.8008281904610115,
  "account_token" : "account_token",
  "token" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account from which to retrieve statement year-to-date totals.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter statementSummaryToken: (path) The unique identifier of the statement summary from which to retrieve year-to-date totals.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts/{token}/statements/&#x60; to retrieve existing statement summary tokens. 

     - returns: RequestBuilder<YearToDate> 
     */
    open class func retrieveYearToDateForStatementSummaryWithRequestBuilder(accountToken: String, statementSummaryToken: String) -> RequestBuilder<YearToDate> {
        var path = "/credit/accounts/{account_token}/statements/{statement_summary_token}/yeartodate"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let statementSummaryTokenPreEscape = "\(statementSummaryToken)"
        let statementSummaryTokenPostEscape = statementSummaryTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statement_summary_token}", with: statementSummaryTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<YearToDate>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
