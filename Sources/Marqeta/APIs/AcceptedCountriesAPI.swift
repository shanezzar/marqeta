//
// AcceptedCountriesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AcceptedCountriesAPI {
    /**
     List accepted countries objects

     - parameter count: (query) Number of accepted countries objects to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter name: (query) Name of the accepted countries object. (optional)
     - parameter whitelist: (query) Specifies if the accepted countries object is an allow list. (optional)
     - parameter searchType: (query) Specifies the type of search you want to perform. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on).  Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort.  Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;.  Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order.  Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAcceptedcountries(count: Int? = nil, startIndex: Int? = nil, name: String? = nil, whitelist: Bool? = nil, searchType: String? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: AcceptedCountriesListResponse?,_ error: Error?) -> Void)) {
        getAcceptedcountriesWithRequestBuilder(count: count, startIndex: startIndex, name: name, whitelist: whitelist, searchType: searchType, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List accepted countries objects
     - GET /acceptedcountries

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "is_whitelist" : false,
    "name" : "name",
    "country_codes" : [ "country_codes", "country_codes" ],
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "is_whitelist" : false,
    "name" : "name",
    "country_codes" : [ "country_codes", "country_codes" ],
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) Number of accepted countries objects to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter name: (query) Name of the accepted countries object. (optional)
     - parameter whitelist: (query) Specifies if the accepted countries object is an allow list. (optional)
     - parameter searchType: (query) Specifies the type of search you want to perform. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on).  Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort.  Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;.  Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order.  Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<AcceptedCountriesListResponse> 
     */
    open class func getAcceptedcountriesWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, name: String? = nil, whitelist: Bool? = nil, searchType: String? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<AcceptedCountriesListResponse> {
        let path = "/acceptedcountries"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "name": name, 
                        "whitelist": whitelist, 
                        "search_type": searchType, 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<AcceptedCountriesListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve an accepted countries object

     - parameter token: (path) Unique identifier of the accepted countries object. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAcceptedcountriesToken(token: String, fields: String? = nil, completion: @escaping ((_ data: AcceptedCountriesModel?,_ error: Error?) -> Void)) {
        getAcceptedcountriesTokenWithRequestBuilder(token: token, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve an accepted countries object
     - GET /acceptedcountries/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "is_whitelist" : false,
  "name" : "name",
  "country_codes" : [ "country_codes", "country_codes" ],
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the accepted countries object. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<AcceptedCountriesModel> 
     */
    open class func getAcceptedcountriesTokenWithRequestBuilder(token: String, fields: String? = nil) -> RequestBuilder<AcceptedCountriesModel> {
        var path = "/acceptedcountries/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<AcceptedCountriesModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
