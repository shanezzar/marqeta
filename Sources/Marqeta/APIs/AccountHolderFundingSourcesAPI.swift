//
// AccountHolderFundingSourcesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AccountHolderFundingSourcesAPI {
    /**
     Retrieve linked funding source balance

     - parameter fundingSourceToken: (path) Funding source token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchPartnerLinkedFundingSourceBalance(fundingSourceToken: String, completion: @escaping ((_ data: LinkedAccountBalanceResponse?,_ error: Error?) -> Void)) {
        getAchPartnerLinkedFundingSourceBalanceWithRequestBuilder(fundingSourceToken: fundingSourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve linked funding source balance
     - GET /fundingsources/ach/partner/{funding_source_token}/balance

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_balance" : 0.8008281904610115,
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "processor_token" : "processor_token",
  "available_balance" : 6.027456183070403,
  "balance_iso_currency_code" : "balance_iso_currency_code"
}}]
     - parameter fundingSourceToken: (path) Funding source token 

     - returns: RequestBuilder<LinkedAccountBalanceResponse> 
     */
    open class func getAchPartnerLinkedFundingSourceBalanceWithRequestBuilder(fundingSourceToken: String) -> RequestBuilder<LinkedAccountBalanceResponse> {
        var path = "/fundingsources/ach/partner/{funding_source_token}/balance"
        let fundingSourceTokenPreEscape = "\(fundingSourceToken)"
        let fundingSourceTokenPostEscape = fundingSourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{funding_source_token}", with: fundingSourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LinkedAccountBalanceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve ACH source

     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundingsourcesAchFundingsourcetoken(fundingSourceToken: String, completion: @escaping ((_ data: AchResponseModel?,_ error: Error?) -> Void)) {
        getFundingsourcesAchFundingsourcetokenWithRequestBuilder(fundingSourceToken: fundingSourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve ACH source
     - GET /fundingsources/ach/{funding_source_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_type" : "account_type",
  "account_suffix" : "account_suffix",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "date_verified" : "2000-01-23T04:56:07.000+00:00",
  "active" : false,
  "verification_notes" : "verification_notes",
  "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
  "verification_status" : "verification_status",
  "partner_account_link_reference_token" : "partner_account_link_reference_token",
  "token" : "token",
  "name_on_account" : "name_on_account",
  "partner" : "partner",
  "verification_override" : false,
  "bank_name" : "bank_name",
  "user_token" : "user_token",
  "is_default_account" : false
}}]
     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 

     - returns: RequestBuilder<AchResponseModel> 
     */
    open class func getFundingsourcesAchFundingsourcetokenWithRequestBuilder(fundingSourceToken: String) -> RequestBuilder<AchResponseModel> {
        var path = "/fundingsources/ach/{funding_source_token}"
        let fundingSourceTokenPreEscape = "\(fundingSourceToken)"
        let fundingSourceTokenPostEscape = fundingSourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{funding_source_token}", with: fundingSourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AchResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve ACH verification amounts

     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundingsourcesAchFundingsourcetokenVerificationamounts(fundingSourceToken: String, completion: @escaping ((_ data: AchVerificationModel?,_ error: Error?) -> Void)) {
        getFundingsourcesAchFundingsourcetokenVerificationamountsWithRequestBuilder(fundingSourceToken: fundingSourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve ACH verification amounts
     - GET /fundingsources/ach/{funding_source_token}/verificationamounts

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "verify_amount1" : 0.8008281904610115,
  "verify_amount2" : 6.027456183070403,
  "active" : false
}}]
     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 

     - returns: RequestBuilder<AchVerificationModel> 
     */
    open class func getFundingsourcesAchFundingsourcetokenVerificationamountsWithRequestBuilder(fundingSourceToken: String) -> RequestBuilder<AchVerificationModel> {
        var path = "/fundingsources/ach/{funding_source_token}/verificationamounts"
        let fundingSourceTokenPreEscape = "\(fundingSourceToken)"
        let fundingSourceTokenPostEscape = fundingSourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{funding_source_token}", with: fundingSourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AchVerificationModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List sources for business

     - parameter businessToken: (path) Unique identifier of the business account holder. 
     - parameter type: (query) Type of funding source to return: ACH or payment card. Leave unspecified to return both types. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundingsourcesBusinessBusinesstoken(businessToken: String, type: String? = nil, fields: String? = nil, completion: @escaping ((_ data: FundingAccountListResponse?,_ error: Error?) -> Void)) {
        getFundingsourcesBusinessBusinesstokenWithRequestBuilder(businessToken: businessToken, type: type, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List sources for business
     - GET /fundingsources/business/{business_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "account_type" : "account_type",
    "account_suffix" : "account_suffix",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "date_verified" : "2000-01-23T04:56:07.000+00:00",
    "active" : false,
    "verification_notes" : "verification_notes",
    "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
    "type" : "type",
    "verification_status" : "verification_status",
    "link_partner_account_reference_token" : "link_partner_account_reference_token",
    "token" : "token",
    "name_on_account" : "name_on_account",
    "partner" : "partner",
    "verification_override" : false,
    "exp_date" : "exp_date",
    "user_token" : "user_token",
    "is_default_account" : false
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "account_type" : "account_type",
    "account_suffix" : "account_suffix",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "date_verified" : "2000-01-23T04:56:07.000+00:00",
    "active" : false,
    "verification_notes" : "verification_notes",
    "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
    "type" : "type",
    "verification_status" : "verification_status",
    "link_partner_account_reference_token" : "link_partner_account_reference_token",
    "token" : "token",
    "name_on_account" : "name_on_account",
    "partner" : "partner",
    "verification_override" : false,
    "exp_date" : "exp_date",
    "user_token" : "user_token",
    "is_default_account" : false
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter businessToken: (path) Unique identifier of the business account holder. 
     - parameter type: (query) Type of funding source to return: ACH or payment card. Leave unspecified to return both types. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<FundingAccountListResponse> 
     */
    open class func getFundingsourcesBusinessBusinesstokenWithRequestBuilder(businessToken: String, type: String? = nil, fields: String? = nil) -> RequestBuilder<FundingAccountListResponse> {
        var path = "/fundingsources/business/{business_token}"
        let businessTokenPreEscape = "\(businessToken)"
        let businessTokenPostEscape = businessTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{business_token}", with: businessTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "type": type, 
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<FundingAccountListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve payment card source

     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundingsourcesPaymentcardFundingsourcetoken(fundingSourceToken: String, completion: @escaping ((_ data: PaymentCardResponseModel?,_ error: Error?) -> Void)) {
        getFundingsourcesPaymentcardFundingsourcetokenWithRequestBuilder(fundingSourceToken: fundingSourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve payment card source
     - GET /fundingsources/paymentcard/{funding_source_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_type" : "account_type",
  "account_suffix" : "account_suffix",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "active" : false,
  "exp_date" : "exp_date",
  "user_token" : "user_token",
  "type" : "type",
  "is_default_account" : false,
  "token" : "token"
}}]
     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 

     - returns: RequestBuilder<PaymentCardResponseModel> 
     */
    open class func getFundingsourcesPaymentcardFundingsourcetokenWithRequestBuilder(fundingSourceToken: String) -> RequestBuilder<PaymentCardResponseModel> {
        var path = "/fundingsources/paymentcard/{funding_source_token}"
        let fundingSourceTokenPreEscape = "\(fundingSourceToken)"
        let fundingSourceTokenPostEscape = fundingSourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{funding_source_token}", with: fundingSourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentCardResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List sources for user

     - parameter userToken: (path) Unique identifier of the user account holder. 
     - parameter type: (query) Type of funding source to retrieve, ACH or payment card. Leave unspecified to return both types. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundingsourcesUserUsertoken(userToken: String, type: String? = nil, fields: String? = nil, completion: @escaping ((_ data: FundingAccountListResponse?,_ error: Error?) -> Void)) {
        getFundingsourcesUserUsertokenWithRequestBuilder(userToken: userToken, type: type, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List sources for user
     - GET /fundingsources/user/{user_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "account_type" : "account_type",
    "account_suffix" : "account_suffix",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "date_verified" : "2000-01-23T04:56:07.000+00:00",
    "active" : false,
    "verification_notes" : "verification_notes",
    "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
    "type" : "type",
    "verification_status" : "verification_status",
    "link_partner_account_reference_token" : "link_partner_account_reference_token",
    "token" : "token",
    "name_on_account" : "name_on_account",
    "partner" : "partner",
    "verification_override" : false,
    "exp_date" : "exp_date",
    "user_token" : "user_token",
    "is_default_account" : false
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "account_type" : "account_type",
    "account_suffix" : "account_suffix",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "date_verified" : "2000-01-23T04:56:07.000+00:00",
    "active" : false,
    "verification_notes" : "verification_notes",
    "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
    "type" : "type",
    "verification_status" : "verification_status",
    "link_partner_account_reference_token" : "link_partner_account_reference_token",
    "token" : "token",
    "name_on_account" : "name_on_account",
    "partner" : "partner",
    "verification_override" : false,
    "exp_date" : "exp_date",
    "user_token" : "user_token",
    "is_default_account" : false
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter userToken: (path) Unique identifier of the user account holder. 
     - parameter type: (query) Type of funding source to retrieve, ACH or payment card. Leave unspecified to return both types. (optional)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<FundingAccountListResponse> 
     */
    open class func getFundingsourcesUserUsertokenWithRequestBuilder(userToken: String, type: String? = nil, fields: String? = nil) -> RequestBuilder<FundingAccountListResponse> {
        var path = "/fundingsources/user/{user_token}"
        let userTokenPreEscape = "\(userToken)"
        let userTokenPostEscape = userTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_token}", with: userTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "type": type, 
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<FundingAccountListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create ACH source

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFundingsourcesAch(body: AchModel? = nil, completion: @escaping ((_ data: AchResponseModel?,_ error: Error?) -> Void)) {
        postFundingsourcesAchWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create ACH source
     - POST /fundingsources/ach

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_type" : "account_type",
  "account_suffix" : "account_suffix",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "date_verified" : "2000-01-23T04:56:07.000+00:00",
  "active" : false,
  "verification_notes" : "verification_notes",
  "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
  "verification_status" : "verification_status",
  "partner_account_link_reference_token" : "partner_account_link_reference_token",
  "token" : "token",
  "name_on_account" : "name_on_account",
  "partner" : "partner",
  "verification_override" : false,
  "bank_name" : "bank_name",
  "user_token" : "user_token",
  "is_default_account" : false
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<AchResponseModel> 
     */
    open class func postFundingsourcesAchWithRequestBuilder(body: AchModel? = nil) -> RequestBuilder<AchResponseModel> {
        let path = "/fundingsources/ach"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AchResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create ACH source

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFundingsourcesAchPartner(body: AchPartnerRequestModel? = nil, completion: @escaping ((_ data: AchResponseModel?,_ error: Error?) -> Void)) {
        postFundingsourcesAchPartnerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create ACH source
     - POST /fundingsources/ach/partner

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_type" : "account_type",
  "account_suffix" : "account_suffix",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "date_verified" : "2000-01-23T04:56:07.000+00:00",
  "active" : false,
  "verification_notes" : "verification_notes",
  "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
  "verification_status" : "verification_status",
  "partner_account_link_reference_token" : "partner_account_link_reference_token",
  "token" : "token",
  "name_on_account" : "name_on_account",
  "partner" : "partner",
  "verification_override" : false,
  "bank_name" : "bank_name",
  "user_token" : "user_token",
  "is_default_account" : false
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<AchResponseModel> 
     */
    open class func postFundingsourcesAchPartnerWithRequestBuilder(body: AchPartnerRequestModel? = nil) -> RequestBuilder<AchResponseModel> {
        let path = "/fundingsources/ach/partner"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AchResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create payment card source

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFundingsourcesPaymentcard(body: TokenRequest? = nil, completion: @escaping ((_ data: PaymentCardResponseModel?,_ error: Error?) -> Void)) {
        postFundingsourcesPaymentcardWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create payment card source
     - POST /fundingsources/paymentcard

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_type" : "account_type",
  "account_suffix" : "account_suffix",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "active" : false,
  "exp_date" : "exp_date",
  "user_token" : "user_token",
  "type" : "type",
  "is_default_account" : false,
  "token" : "token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<PaymentCardResponseModel> 
     */
    open class func postFundingsourcesPaymentcardWithRequestBuilder(body: TokenRequest? = nil) -> RequestBuilder<PaymentCardResponseModel> {
        let path = "/fundingsources/paymentcard"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentCardResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Verify or update ACH source

     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFundingsourcesAchFundingsourcetoken(fundingSourceToken: String, body: AchVerificationModel? = nil, completion: @escaping ((_ data: AchResponseModel?,_ error: Error?) -> Void)) {
        putFundingsourcesAchFundingsourcetokenWithRequestBuilder(fundingSourceToken: fundingSourceToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Verify or update ACH source
     - PUT /fundingsources/ach/{funding_source_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_type" : "account_type",
  "account_suffix" : "account_suffix",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "date_verified" : "2000-01-23T04:56:07.000+00:00",
  "active" : false,
  "verification_notes" : "verification_notes",
  "date_sent_for_verification" : "2000-01-23T04:56:07.000+00:00",
  "verification_status" : "verification_status",
  "partner_account_link_reference_token" : "partner_account_link_reference_token",
  "token" : "token",
  "name_on_account" : "name_on_account",
  "partner" : "partner",
  "verification_override" : false,
  "bank_name" : "bank_name",
  "user_token" : "user_token",
  "is_default_account" : false
}}]
     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<AchResponseModel> 
     */
    open class func putFundingsourcesAchFundingsourcetokenWithRequestBuilder(fundingSourceToken: String, body: AchVerificationModel? = nil) -> RequestBuilder<AchResponseModel> {
        var path = "/fundingsources/ach/{funding_source_token}"
        let fundingSourceTokenPreEscape = "\(fundingSourceToken)"
        let fundingSourceTokenPostEscape = fundingSourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{funding_source_token}", with: fundingSourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AchResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update payment card source

     - parameter body: (body) Payment card 
     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFundingsourcesFundingsourcetoken(body: TokenUpdateRequest, fundingSourceToken: String, completion: @escaping ((_ data: PaymentCardResponseModel?,_ error: Error?) -> Void)) {
        putFundingsourcesFundingsourcetokenWithRequestBuilder(body: body, fundingSourceToken: fundingSourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update payment card source
     - PUT /fundingsources/paymentcard/{funding_source_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_type" : "account_type",
  "account_suffix" : "account_suffix",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "active" : false,
  "exp_date" : "exp_date",
  "user_token" : "user_token",
  "type" : "type",
  "is_default_account" : false,
  "token" : "token"
}}]
     - parameter body: (body) Payment card 
     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 

     - returns: RequestBuilder<PaymentCardResponseModel> 
     */
    open class func putFundingsourcesFundingsourcetokenWithRequestBuilder(body: TokenUpdateRequest, fundingSourceToken: String) -> RequestBuilder<PaymentCardResponseModel> {
        var path = "/fundingsources/paymentcard/{funding_source_token}"
        let fundingSourceTokenPreEscape = "\(fundingSourceToken)"
        let fundingSourceTokenPostEscape = fundingSourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{funding_source_token}", with: fundingSourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentCardResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Configures a default funding source

     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFundingsourcesFundingsourcetokenDefault(fundingSourceToken: String, completion: @escaping ((_ data: PaymentCardResponseModel?,_ error: Error?) -> Void)) {
        putFundingsourcesFundingsourcetokenDefaultWithRequestBuilder(fundingSourceToken: fundingSourceToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Configures a default funding source
     - PUT /fundingsources/{funding_source_token}/default

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "account_type" : "account_type",
  "account_suffix" : "account_suffix",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "active" : false,
  "exp_date" : "exp_date",
  "user_token" : "user_token",
  "type" : "type",
  "is_default_account" : false,
  "token" : "token"
}}]
     - parameter fundingSourceToken: (path) Unique identifier of the funding source. 

     - returns: RequestBuilder<PaymentCardResponseModel> 
     */
    open class func putFundingsourcesFundingsourcetokenDefaultWithRequestBuilder(fundingSourceToken: String) -> RequestBuilder<PaymentCardResponseModel> {
        var path = "/fundingsources/{funding_source_token}/default"
        let fundingSourceTokenPreEscape = "\(fundingSourceToken)"
        let fundingSourceTokenPostEscape = fundingSourceTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{funding_source_token}", with: fundingSourceTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PaymentCardResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
