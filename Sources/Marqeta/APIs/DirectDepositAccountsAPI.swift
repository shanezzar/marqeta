//
// DirectDepositAccountsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DirectDepositAccountsAPI {
    /**
     Creates new direct deposit account for cardholder.

     - parameter body: (body) Create direct deposit account for cardholder 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAccount(body: DirectDepositAccountRequest, completion: @escaping ((_ data: DirectDepositAccountResponse?,_ error: Error?) -> Void)) {
        createAccountWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates new direct deposit account for cardholder.
     - POST /depositaccounts
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "account_number" : "account_number",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "allow_immediate_credit" : false,
  "state" : "state",
  "user_token" : "user_token",
  "routing_number" : "routing_number",
  "type" : "type",
  "token" : "token"
}}]
     - parameter body: (body) Create direct deposit account for cardholder 

     - returns: RequestBuilder<DirectDepositAccountResponse> 
     */
    open class func createAccountWithRequestBuilder(body: DirectDepositAccountRequest) -> RequestBuilder<DirectDepositAccountResponse> {
        let path = "/depositaccounts"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DirectDepositAccountResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Creates new transition for a direct deposit account.

     - parameter body: (body) Create transition for direct deposit account 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTransition(body: DirectDepositAccountTransitionRequest, completion: @escaping ((_ data: DirectDepositAccountTransitionResponse?,_ error: Error?) -> Void)) {
        createTransitionWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates new transition for a direct deposit account.
     - POST /depositaccounts/transitions
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "reason" : "reason",
  "business_token" : "business_token",
  "account_token" : "account_token",
  "channel" : "channel",
  "state" : "state",
  "user_token" : "user_token",
  "token" : "token"
}}]
     - parameter body: (body) Create transition for direct deposit account 

     - returns: RequestBuilder<DirectDepositAccountTransitionResponse> 
     */
    open class func createTransitionWithRequestBuilder(body: DirectDepositAccountTransitionRequest) -> RequestBuilder<DirectDepositAccountTransitionResponse> {
        let path = "/depositaccounts/transitions"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DirectDepositAccountTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Get direct deposit account transition list for card holder.

     - parameter token: (path) Get CDD info for a specific DDA token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCDDInfo(token: String, completion: @escaping ((_ data: CustomerDueDiligenceResponse?,_ error: Error?) -> Void)) {
        getCDDInfoWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get direct deposit account transition list for card holder.
     - GET /depositaccounts/{token}/cdd
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "bank" : "bank",
  "answer" : "answer",
  "question" : "question",
  "account_token" : "account_token",
  "type" : "type",
  "token" : "token"
}}]
     - parameter token: (path) Get CDD info for a specific DDA token 

     - returns: RequestBuilder<CustomerDueDiligenceResponse> 
     */
    open class func getCDDInfoWithRequestBuilder(token: String) -> RequestBuilder<CustomerDueDiligenceResponse> {
        var path = "/depositaccounts/{token}/cdd"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CustomerDueDiligenceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get direct deposit account.

     - parameter token: (path) Get specific direct deposit account 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDirectDepositAccount(token: String, completion: @escaping ((_ data: DirectDepositAccountResponse?,_ error: Error?) -> Void)) {
        getDirectDepositAccountWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get direct deposit account.
     - GET /depositaccounts/{token}
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "account_number" : "account_number",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "allow_immediate_credit" : false,
  "state" : "state",
  "user_token" : "user_token",
  "routing_number" : "routing_number",
  "type" : "type",
  "token" : "token"
}}]
     - parameter token: (path) Get specific direct deposit account 

     - returns: RequestBuilder<DirectDepositAccountResponse> 
     */
    open class func getDirectDepositAccountWithRequestBuilder(token: String) -> RequestBuilder<DirectDepositAccountResponse> {
        var path = "/depositaccounts/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DirectDepositAccountResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get direct deposit account transition.

     - parameter token: (path) Get specific direct deposit account transition 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDirectDepositAccountTransition(token: String, completion: @escaping ((_ data: DirectDepositAccountTransitionResponse?,_ error: Error?) -> Void)) {
        getDirectDepositAccountTransitionWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get direct deposit account transition.
     - GET /depositaccounts/transitions/{token}
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "reason" : "reason",
  "business_token" : "business_token",
  "account_token" : "account_token",
  "channel" : "channel",
  "state" : "state",
  "user_token" : "user_token",
  "token" : "token"
}}]
     - parameter token: (path) Get specific direct deposit account transition 

     - returns: RequestBuilder<DirectDepositAccountTransitionResponse> 
     */
    open class func getDirectDepositAccountTransitionWithRequestBuilder(token: String) -> RequestBuilder<DirectDepositAccountTransitionResponse> {
        var path = "/depositaccounts/transitions/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DirectDepositAccountTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get direct deposit account transition list for card holder.

     - parameter userToken: (path) Get direct deposit account transition list for user 
     - parameter count: (query) Number of users to retrieve (optional, default to 5)
     - parameter startIndex: (query) Start index (optional, default to 0)
     - parameter sortBy: (query) Sort order (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransitionList(userToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil, completion: @escaping ((_ data: DirectDepositAccountTransitionResponse?,_ error: Error?) -> Void)) {
        getTransitionListWithRequestBuilder(userToken: userToken, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get direct deposit account transition list for card holder.
     - GET /depositaccounts/{user_token}/transitions
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "reason" : "reason",
  "business_token" : "business_token",
  "account_token" : "account_token",
  "channel" : "channel",
  "state" : "state",
  "user_token" : "user_token",
  "token" : "token"
}}]
     - parameter userToken: (path) Get direct deposit account transition list for user 
     - parameter count: (query) Number of users to retrieve (optional, default to 5)
     - parameter startIndex: (query) Start index (optional, default to 0)
     - parameter sortBy: (query) Sort order (optional, default to -createdTime)

     - returns: RequestBuilder<DirectDepositAccountTransitionResponse> 
     */
    open class func getTransitionListWithRequestBuilder(userToken: String, count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil) -> RequestBuilder<DirectDepositAccountTransitionResponse> {
        var path = "/depositaccounts/{user_token}/transitions"
        let userTokenPreEscape = "\(userToken)"
        let userTokenPostEscape = userTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_token}", with: userTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<DirectDepositAccountTransitionResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter state
     */
    public enum State_getUserDirectDepositAccounts: String { 
        case active = "ACTIVE"
        case suspended = "SUSPENDED"
        case terminated = "TERMINATED"
        case unsupported = "UNSUPPORTED"
        case unactivated = "UNACTIVATED"
        case limited = "LIMITED"
    }

    /**
     List all specific direct deposit accounts.

     - parameter token: (path) Get specific direct deposit account 
     - parameter count: (query) Number of users to retrieve (optional, default to 5)
     - parameter startIndex: (query) Start index (optional, default to 0)
     - parameter sortBy: (query) Sort order (optional, default to -lastModifiedTime)
     - parameter state: (query) Direct deposit account status (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserDirectDepositAccounts(token: String, count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil, state: State_getUserDirectDepositAccounts? = nil, completion: @escaping ((_ data: DirectDepositAccountListResponse?,_ error: Error?) -> Void)) {
        getUserDirectDepositAccountsWithRequestBuilder(token: token, count: count, startIndex: startIndex, sortBy: sortBy, state: state).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all specific direct deposit accounts.
     - GET /depositaccounts/user/{token}
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "account_number" : "account_number",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "allow_immediate_credit" : false,
    "state" : "state",
    "user_token" : "user_token",
    "routing_number" : "routing_number",
    "type" : "type",
    "token" : "token"
  }, {
    "account_number" : "account_number",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "business_token" : "business_token",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "allow_immediate_credit" : false,
    "state" : "state",
    "user_token" : "user_token",
    "routing_number" : "routing_number",
    "type" : "type",
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter token: (path) Get specific direct deposit account 
     - parameter count: (query) Number of users to retrieve (optional, default to 5)
     - parameter startIndex: (query) Start index (optional, default to 0)
     - parameter sortBy: (query) Sort order (optional, default to -lastModifiedTime)
     - parameter state: (query) Direct deposit account status (optional)

     - returns: RequestBuilder<DirectDepositAccountListResponse> 
     */
    open class func getUserDirectDepositAccountsWithRequestBuilder(token: String, count: Int? = nil, startIndex: Int? = nil, sortBy: String? = nil, state: State_getUserDirectDepositAccounts? = nil) -> RequestBuilder<DirectDepositAccountListResponse> {
        var path = "/depositaccounts/user/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy, 
                        "state": state?.rawValue
        ])


        let requestBuilder: RequestBuilder<DirectDepositAccountListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get User for Plain Text Account Number

     - parameter accountNumber: (path) Get user associated with direct deposit account number 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserForDirectDepositAccount(accountNumber: String, completion: @escaping ((_ data: DirectDepositAccountResponse?,_ error: Error?) -> Void)) {
        getUserForDirectDepositAccountWithRequestBuilder(accountNumber: accountNumber).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get User for Plain Text Account Number
     - GET /depositaccounts/account/{account_number}/user
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "account_number" : "account_number",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "allow_immediate_credit" : false,
  "state" : "state",
  "user_token" : "user_token",
  "routing_number" : "routing_number",
  "type" : "type",
  "token" : "token"
}}]
     - parameter accountNumber: (path) Get user associated with direct deposit account number 

     - returns: RequestBuilder<DirectDepositAccountResponse> 
     */
    open class func getUserForDirectDepositAccountWithRequestBuilder(accountNumber: String) -> RequestBuilder<DirectDepositAccountResponse> {
        var path = "/depositaccounts/account/{account_number}/user"
        let accountNumberPreEscape = "\(accountNumber)"
        let accountNumberPostEscape = accountNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_number}", with: accountNumberPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DirectDepositAccountResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update direct deposit account.

     - parameter body: (body) Update direct deposit account 
     - parameter token: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: DepositAccountUpdateRequest, token: String, completion: @escaping ((_ data: DirectDepositAccountResponse?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update direct deposit account.
     - PUT /depositaccounts/{token}
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "account_number" : "account_number",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "business_token" : "business_token",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "allow_immediate_credit" : false,
  "state" : "state",
  "user_token" : "user_token",
  "routing_number" : "routing_number",
  "type" : "type",
  "token" : "token"
}}]
     - parameter body: (body) Update direct deposit account 
     - parameter token: (path)  

     - returns: RequestBuilder<DirectDepositAccountResponse> 
     */
    open class func updateWithRequestBuilder(body: DepositAccountUpdateRequest, token: String) -> RequestBuilder<DirectDepositAccountResponse> {
        var path = "/depositaccounts/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DirectDepositAccountResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update CDD answers for Direct Deposit Account

     - parameter body: (body) Update CDD answers 
     - parameter token: (path)  
     - parameter cddtoken: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCDDInfo(body: CustomerDueDiligenceUpdateResponse, token: String, cddtoken: String, completion: @escaping ((_ data: CustomerDueDiligenceResponse?,_ error: Error?) -> Void)) {
        updateCDDInfoWithRequestBuilder(body: body, token: token, cddtoken: cddtoken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update CDD answers for Direct Deposit Account
     - PUT /depositaccounts/{token}/cdd/{cddtoken}
     - 

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "bank" : "bank",
  "answer" : "answer",
  "question" : "question",
  "account_token" : "account_token",
  "type" : "type",
  "token" : "token"
}}]
     - parameter body: (body) Update CDD answers 
     - parameter token: (path)  
     - parameter cddtoken: (path)  

     - returns: RequestBuilder<CustomerDueDiligenceResponse> 
     */
    open class func updateCDDInfoWithRequestBuilder(body: CustomerDueDiligenceUpdateResponse, token: String, cddtoken: String) -> RequestBuilder<CustomerDueDiligenceResponse> {
        var path = "/depositaccounts/{token}/cdd/{cddtoken}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let cddtokenPreEscape = "\(cddtoken)"
        let cddtokenPostEscape = cddtokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cddtoken}", with: cddtokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CustomerDueDiligenceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
