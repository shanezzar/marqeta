//
// FundingViaACHBetaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class FundingViaACHBetaAPI {
    /**
     List ACH transfers

     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter userToken: (query) Unique identifier of the user resource. (optional)
     - parameter businessToken: (query) Unique identifier of the business resource. (optional)
     - parameter fundingSourceToken: (query) Unique identifier of the funding source. (optional)
     - parameter statuses: (query) Comma-delimited list of bank transfer statuses. (optional)
     - parameter sortBy: (query) Field on which to sort Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter expand: (query) Returns the full funding source object when &#x60;fundingsource&#x60; is passed. Otherwise, returns the funding source token. (optional)
     - parameter fundingSourceType: (query) Funding source type to filter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBanktransfersAch(count: Int? = nil, startIndex: Int? = nil, userToken: String? = nil, businessToken: String? = nil, fundingSourceToken: String? = nil, statuses: String? = nil, sortBy: String? = nil, expand: String? = nil, fundingSourceType: String? = nil, completion: @escaping ((_ data: BankTransferListResponse?,_ error: Error?) -> Void)) {
        getBanktransfersAchWithRequestBuilder(count: count, startIndex: startIndex, userToken: userToken, businessToken: businessToken, fundingSourceToken: fundingSourceToken, statuses: statuses, sortBy: sortBy, expand: expand, fundingSourceType: fundingSourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List ACH transfers
     - GET /banktransfers/ach

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.6127456183070403,
    "return_reason" : "return_reason",
    "transfer_speed" : "STANDARD",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "batch_number" : "batch_number",
    "channel" : "API",
    "memo" : "memo",
    "transitions" : [ {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason",
      "amount" : 0.14658129805029452,
      "return_reason" : "return_reason",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "transaction_jit_token" : "transaction_jit_token",
      "batch_number" : "batch_number",
      "bank_transfer_token" : "bank_transfer_token",
      "channel" : "API",
      "transaction_token" : "transaction_token",
      "token" : "token",
      "reversal_after_45_days" : true,
      "effective_date" : "2000-01-23T04:56:07.000+00:00",
      "return_code" : "return_code",
      "program_reserve_token" : "program_reserve_token",
      "status" : "PENDING"
    }, {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason",
      "amount" : 0.14658129805029452,
      "return_reason" : "return_reason",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "transaction_jit_token" : "transaction_jit_token",
      "batch_number" : "batch_number",
      "bank_transfer_token" : "bank_transfer_token",
      "channel" : "API",
      "transaction_token" : "transaction_token",
      "token" : "token",
      "reversal_after_45_days" : true,
      "effective_date" : "2000-01-23T04:56:07.000+00:00",
      "return_code" : "return_code",
      "program_reserve_token" : "program_reserve_token",
      "status" : "PENDING"
    } ],
    "type" : "PUSH",
    "created_by" : "created_by",
    "currency_code" : "currency_code",
    "funding_source_token" : "funding_source_token",
    "standard_entry_class_code" : "WEB",
    "token" : "token",
    "statement_descriptor" : "statement_descriptor",
    "return_code" : "return_code",
    "status" : "INITIATED"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.6127456183070403,
    "return_reason" : "return_reason",
    "transfer_speed" : "STANDARD",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "batch_number" : "batch_number",
    "channel" : "API",
    "memo" : "memo",
    "transitions" : [ {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason",
      "amount" : 0.14658129805029452,
      "return_reason" : "return_reason",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "transaction_jit_token" : "transaction_jit_token",
      "batch_number" : "batch_number",
      "bank_transfer_token" : "bank_transfer_token",
      "channel" : "API",
      "transaction_token" : "transaction_token",
      "token" : "token",
      "reversal_after_45_days" : true,
      "effective_date" : "2000-01-23T04:56:07.000+00:00",
      "return_code" : "return_code",
      "program_reserve_token" : "program_reserve_token",
      "status" : "PENDING"
    }, {
      "created_time" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason",
      "amount" : 0.14658129805029452,
      "return_reason" : "return_reason",
      "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
      "transaction_jit_token" : "transaction_jit_token",
      "batch_number" : "batch_number",
      "bank_transfer_token" : "bank_transfer_token",
      "channel" : "API",
      "transaction_token" : "transaction_token",
      "token" : "token",
      "reversal_after_45_days" : true,
      "effective_date" : "2000-01-23T04:56:07.000+00:00",
      "return_code" : "return_code",
      "program_reserve_token" : "program_reserve_token",
      "status" : "PENDING"
    } ],
    "type" : "PUSH",
    "created_by" : "created_by",
    "currency_code" : "currency_code",
    "funding_source_token" : "funding_source_token",
    "standard_entry_class_code" : "WEB",
    "token" : "token",
    "statement_descriptor" : "statement_descriptor",
    "return_code" : "return_code",
    "status" : "INITIATED"
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 5
}}]
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter userToken: (query) Unique identifier of the user resource. (optional)
     - parameter businessToken: (query) Unique identifier of the business resource. (optional)
     - parameter fundingSourceToken: (query) Unique identifier of the funding source. (optional)
     - parameter statuses: (query) Comma-delimited list of bank transfer statuses. (optional)
     - parameter sortBy: (query) Field on which to sort Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter expand: (query) Returns the full funding source object when &#x60;fundingsource&#x60; is passed. Otherwise, returns the funding source token. (optional)
     - parameter fundingSourceType: (query) Funding source type to filter. (optional)

     - returns: RequestBuilder<BankTransferListResponse> 
     */
    open class func getBanktransfersAchWithRequestBuilder(count: Int? = nil, startIndex: Int? = nil, userToken: String? = nil, businessToken: String? = nil, fundingSourceToken: String? = nil, statuses: String? = nil, sortBy: String? = nil, expand: String? = nil, fundingSourceType: String? = nil) -> RequestBuilder<BankTransferListResponse> {
        let path = "/banktransfers/ach"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "user_token": userToken, 
                        "business_token": businessToken, 
                        "funding_source_token": fundingSourceToken, 
                        "statuses": statuses, 
                        "sort_by": sortBy, 
                        "expand": expand, 
                        "funding_source_type": fundingSourceType
        ])


        let requestBuilder: RequestBuilder<BankTransferListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve ACH transfer

     - parameter token: (path) Unique identifier of the bank transfer. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBanktransfersAchToken(token: String, completion: @escaping ((_ data: BankTransferResponseModel?,_ error: Error?) -> Void)) {
        getBanktransfersAchTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve ACH transfer
     - GET /banktransfers/ach/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.6127456183070403,
  "return_reason" : "return_reason",
  "transfer_speed" : "STANDARD",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "batch_number" : "batch_number",
  "channel" : "API",
  "memo" : "memo",
  "transitions" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "amount" : 0.14658129805029452,
    "return_reason" : "return_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "transaction_jit_token" : "transaction_jit_token",
    "batch_number" : "batch_number",
    "bank_transfer_token" : "bank_transfer_token",
    "channel" : "API",
    "transaction_token" : "transaction_token",
    "token" : "token",
    "reversal_after_45_days" : true,
    "effective_date" : "2000-01-23T04:56:07.000+00:00",
    "return_code" : "return_code",
    "program_reserve_token" : "program_reserve_token",
    "status" : "PENDING"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "amount" : 0.14658129805029452,
    "return_reason" : "return_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "transaction_jit_token" : "transaction_jit_token",
    "batch_number" : "batch_number",
    "bank_transfer_token" : "bank_transfer_token",
    "channel" : "API",
    "transaction_token" : "transaction_token",
    "token" : "token",
    "reversal_after_45_days" : true,
    "effective_date" : "2000-01-23T04:56:07.000+00:00",
    "return_code" : "return_code",
    "program_reserve_token" : "program_reserve_token",
    "status" : "PENDING"
  } ],
  "type" : "PUSH",
  "created_by" : "created_by",
  "currency_code" : "currency_code",
  "funding_source_token" : "funding_source_token",
  "standard_entry_class_code" : "WEB",
  "token" : "token",
  "statement_descriptor" : "statement_descriptor",
  "return_code" : "return_code",
  "status" : "INITIATED"
}}]
     - parameter token: (path) Unique identifier of the bank transfer. 

     - returns: RequestBuilder<BankTransferResponseModel> 
     */
    open class func getBanktransfersAchTokenWithRequestBuilder(token: String) -> RequestBuilder<BankTransferResponseModel> {
        var path = "/banktransfers/ach/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BankTransferResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List ACH transfer transitions

     - parameter count: (query) Number of bank transfer transitions to retrieve. (optional, default to 5)
     - parameter token: (query) Unique identifier of the bank transfer transition. (optional)
     - parameter bankTransferToken: (query) Unique identifier of the bank transfer. (optional)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields lastModifiedTime or createdTime. Prefix the field name with a hyphen (-) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter statuses: (query) Comma-delimited list of bank transfer states to display. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBanktransfersAchTransitions(count: Int? = nil, token: String? = nil, bankTransferToken: String? = nil, startIndex: Int? = nil, sortBy: String? = nil, statuses: String? = nil, completion: @escaping ((_ data: BankTransferTransitionListResponse?,_ error: Error?) -> Void)) {
        getBanktransfersAchTransitionsWithRequestBuilder(count: count, token: token, bankTransferToken: bankTransferToken, startIndex: startIndex, sortBy: sortBy, statuses: statuses).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List ACH transfer transitions
     - GET /banktransfers/ach/transitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "amount" : 0.14658129805029452,
    "return_reason" : "return_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "transaction_jit_token" : "transaction_jit_token",
    "batch_number" : "batch_number",
    "bank_transfer_token" : "bank_transfer_token",
    "channel" : "API",
    "transaction_token" : "transaction_token",
    "token" : "token",
    "reversal_after_45_days" : true,
    "effective_date" : "2000-01-23T04:56:07.000+00:00",
    "return_code" : "return_code",
    "program_reserve_token" : "program_reserve_token",
    "status" : "PENDING"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "amount" : 0.14658129805029452,
    "return_reason" : "return_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "transaction_jit_token" : "transaction_jit_token",
    "batch_number" : "batch_number",
    "bank_transfer_token" : "bank_transfer_token",
    "channel" : "API",
    "transaction_token" : "transaction_token",
    "token" : "token",
    "reversal_after_45_days" : true,
    "effective_date" : "2000-01-23T04:56:07.000+00:00",
    "return_code" : "return_code",
    "program_reserve_token" : "program_reserve_token",
    "status" : "PENDING"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter count: (query) Number of bank transfer transitions to retrieve. (optional, default to 5)
     - parameter token: (query) Unique identifier of the bank transfer transition. (optional)
     - parameter bankTransferToken: (query) Unique identifier of the bank transfer. (optional)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields lastModifiedTime or createdTime. Prefix the field name with a hyphen (-) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter statuses: (query) Comma-delimited list of bank transfer states to display. (optional)

     - returns: RequestBuilder<BankTransferTransitionListResponse> 
     */
    open class func getBanktransfersAchTransitionsWithRequestBuilder(count: Int? = nil, token: String? = nil, bankTransferToken: String? = nil, startIndex: Int? = nil, sortBy: String? = nil, statuses: String? = nil) -> RequestBuilder<BankTransferTransitionListResponse> {
        let path = "/banktransfers/ach/transitions"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "token": token, 
                        "bank_transfer_token": bankTransferToken, 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy, 
                        "statuses": statuses
        ])


        let requestBuilder: RequestBuilder<BankTransferTransitionListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create ACH transfer

     - parameter body: (body) Create bank transfer request model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postBanktransfersAch(body: BankTransferRequestModel, completion: @escaping ((_ data: BankTransferResponseModel?,_ error: Error?) -> Void)) {
        postBanktransfersAchWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create ACH transfer
     - POST /banktransfers/ach

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.6127456183070403,
  "return_reason" : "return_reason",
  "transfer_speed" : "STANDARD",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "batch_number" : "batch_number",
  "channel" : "API",
  "memo" : "memo",
  "transitions" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "amount" : 0.14658129805029452,
    "return_reason" : "return_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "transaction_jit_token" : "transaction_jit_token",
    "batch_number" : "batch_number",
    "bank_transfer_token" : "bank_transfer_token",
    "channel" : "API",
    "transaction_token" : "transaction_token",
    "token" : "token",
    "reversal_after_45_days" : true,
    "effective_date" : "2000-01-23T04:56:07.000+00:00",
    "return_code" : "return_code",
    "program_reserve_token" : "program_reserve_token",
    "status" : "PENDING"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason",
    "amount" : 0.14658129805029452,
    "return_reason" : "return_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "transaction_jit_token" : "transaction_jit_token",
    "batch_number" : "batch_number",
    "bank_transfer_token" : "bank_transfer_token",
    "channel" : "API",
    "transaction_token" : "transaction_token",
    "token" : "token",
    "reversal_after_45_days" : true,
    "effective_date" : "2000-01-23T04:56:07.000+00:00",
    "return_code" : "return_code",
    "program_reserve_token" : "program_reserve_token",
    "status" : "PENDING"
  } ],
  "type" : "PUSH",
  "created_by" : "created_by",
  "currency_code" : "currency_code",
  "funding_source_token" : "funding_source_token",
  "standard_entry_class_code" : "WEB",
  "token" : "token",
  "statement_descriptor" : "statement_descriptor",
  "return_code" : "return_code",
  "status" : "INITIATED"
}}]
     - parameter body: (body) Create bank transfer request model 

     - returns: RequestBuilder<BankTransferResponseModel> 
     */
    open class func postBanktransfersAchWithRequestBuilder(body: BankTransferRequestModel) -> RequestBuilder<BankTransferResponseModel> {
        let path = "/banktransfers/ach"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BankTransferResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create ACH transfer transition

     - parameter body: (body) Create bank transfer transition request model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postBanktransfersAchTransitions(body: BankTransferTransitionRequestModel, completion: @escaping ((_ data: BankTransferTransitionResponseModel?,_ error: Error?) -> Void)) {
        postBanktransfersAchTransitionsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create ACH transfer transition
     - POST /banktransfers/ach/transitions

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "reason" : "reason",
  "amount" : 0.14658129805029452,
  "return_reason" : "return_reason",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "transaction_jit_token" : "transaction_jit_token",
  "batch_number" : "batch_number",
  "bank_transfer_token" : "bank_transfer_token",
  "channel" : "API",
  "transaction_token" : "transaction_token",
  "token" : "token",
  "reversal_after_45_days" : true,
  "effective_date" : "2000-01-23T04:56:07.000+00:00",
  "return_code" : "return_code",
  "program_reserve_token" : "program_reserve_token",
  "status" : "PENDING"
}}]
     - parameter body: (body) Create bank transfer transition request model 

     - returns: RequestBuilder<BankTransferTransitionResponseModel> 
     */
    open class func postBanktransfersAchTransitionsWithRequestBuilder(body: BankTransferTransitionRequestModel) -> RequestBuilder<BankTransferTransitionResponseModel> {
        let path = "/banktransfers/ach/transitions"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BankTransferTransitionResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
