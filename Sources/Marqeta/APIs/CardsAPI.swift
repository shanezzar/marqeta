//
// CardsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CardsAPI {
    /**
     List cards by last 4 digits of PAN

     - parameter lastFour: (query) Last four digits of the primary account number (PAN) of the card you want to locate. 
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCards(lastFour: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: CardListResponse?,_ error: Error?) -> Void)) {
        getCardsWithRequestBuilder(lastFour: lastFour, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List cards by last 4 digits of PAN
     - GET /cards

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "expedite" : false,
    "metadata" : {
      "key" : "metadata"
    },
    "fulfillment_status" : "ISSUED",
    "contactless_exemption_counter" : 6,
    "instrument_type" : "PHYSICAL_MSR",
    "contactless_exemption_total_amount" : 1.4658129805029452,
    "bulk_issuance_token" : "bulk_issuance_token",
    "card_product_token" : "card_product_token",
    "new_pan_from_card_token" : "new_pan_from_card_token",
    "last_four" : "last_four",
    "state" : "ACTIVE",
    "user_token" : "user_token",
    "pan" : "pan",
    "barcode" : "barcode",
    "activation_actions" : {
      "swap_digital_wallet_tokens_from_card_token" : "swap_digital_wallet_tokens_from_card_token",
      "terminate_reissued_source_card" : true
    },
    "cvv_number" : "cvv_number",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "translate_pin_from_card_token" : "translate_pin_from_card_token",
    "state_reason" : "state_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_is_set" : false,
    "expiration_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "reissue_pan_from_card_token" : "reissue_pan_from_card_token",
    "chip_cvv_number" : "chip_cvv_number",
    "expiration" : "expiration",
    "fulfillment" : {
      "shipping" : {
        "care_of_line" : "care_of_line",
        "method" : "LOCAL_MAIL",
        "recipient_address" : {
          "zip" : "zip",
          "country" : "country",
          "address2" : "address2",
          "city" : "city",
          "phone" : "phone",
          "address1" : "address1",
          "last_name" : "last_name",
          "state" : "state",
          "middle_name" : "middle_name",
          "postal_code" : "postal_code",
          "first_name" : "first_name"
        }
      },
      "card_fulfillment_reason" : "NEW",
      "card_personalization" : {
        "carrier" : {
          "message_file" : "message_file",
          "logo_file" : "logo_file",
          "message_line" : "message_line",
          "template_id" : "template_id",
          "logo_thumbnail_file" : "logo_thumbnail_file"
        },
        "images" : {
          "carrier" : {
            "message_1" : "message_1",
            "name" : "name"
          },
          "signature" : {
            "name" : "name"
          },
          "carrier_return_window" : {
            "name" : "name"
          },
          "card" : {
            "name" : "name",
            "thermal_color" : "thermal_color"
          }
        },
        "text" : {
          "name_line_1" : {
            "value" : "value"
          }
        },
        "perso_type" : "EMBOSS"
      }
    }
  }, {
    "expedite" : false,
    "metadata" : {
      "key" : "metadata"
    },
    "fulfillment_status" : "ISSUED",
    "contactless_exemption_counter" : 6,
    "instrument_type" : "PHYSICAL_MSR",
    "contactless_exemption_total_amount" : 1.4658129805029452,
    "bulk_issuance_token" : "bulk_issuance_token",
    "card_product_token" : "card_product_token",
    "new_pan_from_card_token" : "new_pan_from_card_token",
    "last_four" : "last_four",
    "state" : "ACTIVE",
    "user_token" : "user_token",
    "pan" : "pan",
    "barcode" : "barcode",
    "activation_actions" : {
      "swap_digital_wallet_tokens_from_card_token" : "swap_digital_wallet_tokens_from_card_token",
      "terminate_reissued_source_card" : true
    },
    "cvv_number" : "cvv_number",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "translate_pin_from_card_token" : "translate_pin_from_card_token",
    "state_reason" : "state_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_is_set" : false,
    "expiration_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "reissue_pan_from_card_token" : "reissue_pan_from_card_token",
    "chip_cvv_number" : "chip_cvv_number",
    "expiration" : "expiration",
    "fulfillment" : {
      "shipping" : {
        "care_of_line" : "care_of_line",
        "method" : "LOCAL_MAIL",
        "recipient_address" : {
          "zip" : "zip",
          "country" : "country",
          "address2" : "address2",
          "city" : "city",
          "phone" : "phone",
          "address1" : "address1",
          "last_name" : "last_name",
          "state" : "state",
          "middle_name" : "middle_name",
          "postal_code" : "postal_code",
          "first_name" : "first_name"
        }
      },
      "card_fulfillment_reason" : "NEW",
      "card_personalization" : {
        "carrier" : {
          "message_file" : "message_file",
          "logo_file" : "logo_file",
          "message_line" : "message_line",
          "template_id" : "template_id",
          "logo_thumbnail_file" : "logo_thumbnail_file"
        },
        "images" : {
          "carrier" : {
            "message_1" : "message_1",
            "name" : "name"
          },
          "signature" : {
            "name" : "name"
          },
          "carrier_return_window" : {
            "name" : "name"
          },
          "card" : {
            "name" : "name",
            "thermal_color" : "thermal_color"
          }
        },
        "text" : {
          "name_line_1" : {
            "value" : "value"
          }
        },
        "perso_type" : "EMBOSS"
      }
    }
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 5
}}]
     - parameter lastFour: (query) Last four digits of the primary account number (PAN) of the card you want to locate. 
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<CardListResponse> 
     */
    open class func getCardsWithRequestBuilder(lastFour: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<CardListResponse> {
        let path = "/cards"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "last_four": lastFour, 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<CardListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve card by barcode

     - parameter barcode: (path) Barcode of the card to retrieve. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCardsBarcodeBarcode(barcode: String, fields: String? = nil, completion: @escaping ((_ data: CardResponse?,_ error: Error?) -> Void)) {
        getCardsBarcodeBarcodeWithRequestBuilder(barcode: barcode, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve card by barcode
     - GET /cards/barcode/{barcode}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "expedite" : false,
  "metadata" : {
    "key" : "metadata"
  },
  "fulfillment_status" : "ISSUED",
  "contactless_exemption_counter" : 6,
  "instrument_type" : "PHYSICAL_MSR",
  "contactless_exemption_total_amount" : 1.4658129805029452,
  "bulk_issuance_token" : "bulk_issuance_token",
  "card_product_token" : "card_product_token",
  "new_pan_from_card_token" : "new_pan_from_card_token",
  "last_four" : "last_four",
  "state" : "ACTIVE",
  "user_token" : "user_token",
  "pan" : "pan",
  "barcode" : "barcode",
  "activation_actions" : {
    "swap_digital_wallet_tokens_from_card_token" : "swap_digital_wallet_tokens_from_card_token",
    "terminate_reissued_source_card" : true
  },
  "cvv_number" : "cvv_number",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "translate_pin_from_card_token" : "translate_pin_from_card_token",
  "state_reason" : "state_reason",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "pin_is_set" : false,
  "expiration_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "reissue_pan_from_card_token" : "reissue_pan_from_card_token",
  "chip_cvv_number" : "chip_cvv_number",
  "expiration" : "expiration",
  "fulfillment" : {
    "shipping" : {
      "care_of_line" : "care_of_line",
      "method" : "LOCAL_MAIL",
      "recipient_address" : {
        "zip" : "zip",
        "country" : "country",
        "address2" : "address2",
        "city" : "city",
        "phone" : "phone",
        "address1" : "address1",
        "last_name" : "last_name",
        "state" : "state",
        "middle_name" : "middle_name",
        "postal_code" : "postal_code",
        "first_name" : "first_name"
      }
    },
    "card_fulfillment_reason" : "NEW",
    "card_personalization" : {
      "carrier" : {
        "message_file" : "message_file",
        "logo_file" : "logo_file",
        "message_line" : "message_line",
        "template_id" : "template_id",
        "logo_thumbnail_file" : "logo_thumbnail_file"
      },
      "images" : {
        "carrier" : {
          "message_1" : "message_1",
          "name" : "name"
        },
        "signature" : {
          "name" : "name"
        },
        "carrier_return_window" : {
          "name" : "name"
        },
        "card" : {
          "name" : "name",
          "thermal_color" : "thermal_color"
        }
      },
      "text" : {
        "name_line_1" : {
          "value" : "value"
        }
      },
      "perso_type" : "EMBOSS"
    }
  }
}}]
     - parameter barcode: (path) Barcode of the card to retrieve. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<CardResponse> 
     */
    open class func getCardsBarcodeBarcodeWithRequestBuilder(barcode: String, fields: String? = nil) -> RequestBuilder<CardResponse> {
        var path = "/cards/barcode/{barcode}"
        let barcodePreEscape = "\(barcode)"
        let barcodePostEscape = barcodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{barcode}", with: barcodePostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<CardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve card

     - parameter token: (path) Unique identifier of the card you want to retrieve. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter expand: (query) Embeds the associated object of the specified type into the response, for all &#x60;GET /cards&#x60; endpoints. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCardsToken(token: String, fields: String? = nil, expand: String? = nil, completion: @escaping ((_ data: CardResponse?,_ error: Error?) -> Void)) {
        getCardsTokenWithRequestBuilder(token: token, fields: fields, expand: expand).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve card
     - GET /cards/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "expedite" : false,
  "metadata" : {
    "key" : "metadata"
  },
  "fulfillment_status" : "ISSUED",
  "contactless_exemption_counter" : 6,
  "instrument_type" : "PHYSICAL_MSR",
  "contactless_exemption_total_amount" : 1.4658129805029452,
  "bulk_issuance_token" : "bulk_issuance_token",
  "card_product_token" : "card_product_token",
  "new_pan_from_card_token" : "new_pan_from_card_token",
  "last_four" : "last_four",
  "state" : "ACTIVE",
  "user_token" : "user_token",
  "pan" : "pan",
  "barcode" : "barcode",
  "activation_actions" : {
    "swap_digital_wallet_tokens_from_card_token" : "swap_digital_wallet_tokens_from_card_token",
    "terminate_reissued_source_card" : true
  },
  "cvv_number" : "cvv_number",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "translate_pin_from_card_token" : "translate_pin_from_card_token",
  "state_reason" : "state_reason",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "pin_is_set" : false,
  "expiration_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "reissue_pan_from_card_token" : "reissue_pan_from_card_token",
  "chip_cvv_number" : "chip_cvv_number",
  "expiration" : "expiration",
  "fulfillment" : {
    "shipping" : {
      "care_of_line" : "care_of_line",
      "method" : "LOCAL_MAIL",
      "recipient_address" : {
        "zip" : "zip",
        "country" : "country",
        "address2" : "address2",
        "city" : "city",
        "phone" : "phone",
        "address1" : "address1",
        "last_name" : "last_name",
        "state" : "state",
        "middle_name" : "middle_name",
        "postal_code" : "postal_code",
        "first_name" : "first_name"
      }
    },
    "card_fulfillment_reason" : "NEW",
    "card_personalization" : {
      "carrier" : {
        "message_file" : "message_file",
        "logo_file" : "logo_file",
        "message_line" : "message_line",
        "template_id" : "template_id",
        "logo_thumbnail_file" : "logo_thumbnail_file"
      },
      "images" : {
        "carrier" : {
          "message_1" : "message_1",
          "name" : "name"
        },
        "signature" : {
          "name" : "name"
        },
        "carrier_return_window" : {
          "name" : "name"
        },
        "card" : {
          "name" : "name",
          "thermal_color" : "thermal_color"
        }
      },
      "text" : {
        "name_line_1" : {
          "value" : "value"
        }
      },
      "perso_type" : "EMBOSS"
    }
  }
}}]
     - parameter token: (path) Unique identifier of the card you want to retrieve. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter expand: (query) Embeds the associated object of the specified type into the response, for all &#x60;GET /cards&#x60; endpoints. (optional)

     - returns: RequestBuilder<CardResponse> 
     */
    open class func getCardsTokenWithRequestBuilder(token: String, fields: String? = nil, expand: String? = nil) -> RequestBuilder<CardResponse> {
        var path = "/cards/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields": fields, 
                        "expand": expand
        ])


        let requestBuilder: RequestBuilder<CardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Show card PAN

     - parameter token: (path) Unique identifier of the card whose primary account number (PAN) you want to retrieve. Send a &#x60;GET&#x60; request to &#x60;/cards&#x60; to retrieve card tokens. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter showCvvNumber: (query) Set to &#x60;true&#x60; to show the CVV2 number in the response. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCardsTokenShowpan(token: String, fields: String? = nil, showCvvNumber: Bool? = nil, completion: @escaping ((_ data: CardResponse?,_ error: Error?) -> Void)) {
        getCardsTokenShowpanWithRequestBuilder(token: token, fields: fields, showCvvNumber: showCvvNumber).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Show card PAN
     - GET /cards/{token}/showpan

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "expedite" : false,
  "metadata" : {
    "key" : "metadata"
  },
  "fulfillment_status" : "ISSUED",
  "contactless_exemption_counter" : 6,
  "instrument_type" : "PHYSICAL_MSR",
  "contactless_exemption_total_amount" : 1.4658129805029452,
  "bulk_issuance_token" : "bulk_issuance_token",
  "card_product_token" : "card_product_token",
  "new_pan_from_card_token" : "new_pan_from_card_token",
  "last_four" : "last_four",
  "state" : "ACTIVE",
  "user_token" : "user_token",
  "pan" : "pan",
  "barcode" : "barcode",
  "activation_actions" : {
    "swap_digital_wallet_tokens_from_card_token" : "swap_digital_wallet_tokens_from_card_token",
    "terminate_reissued_source_card" : true
  },
  "cvv_number" : "cvv_number",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "translate_pin_from_card_token" : "translate_pin_from_card_token",
  "state_reason" : "state_reason",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "pin_is_set" : false,
  "expiration_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "reissue_pan_from_card_token" : "reissue_pan_from_card_token",
  "chip_cvv_number" : "chip_cvv_number",
  "expiration" : "expiration",
  "fulfillment" : {
    "shipping" : {
      "care_of_line" : "care_of_line",
      "method" : "LOCAL_MAIL",
      "recipient_address" : {
        "zip" : "zip",
        "country" : "country",
        "address2" : "address2",
        "city" : "city",
        "phone" : "phone",
        "address1" : "address1",
        "last_name" : "last_name",
        "state" : "state",
        "middle_name" : "middle_name",
        "postal_code" : "postal_code",
        "first_name" : "first_name"
      }
    },
    "card_fulfillment_reason" : "NEW",
    "card_personalization" : {
      "carrier" : {
        "message_file" : "message_file",
        "logo_file" : "logo_file",
        "message_line" : "message_line",
        "template_id" : "template_id",
        "logo_thumbnail_file" : "logo_thumbnail_file"
      },
      "images" : {
        "carrier" : {
          "message_1" : "message_1",
          "name" : "name"
        },
        "signature" : {
          "name" : "name"
        },
        "carrier_return_window" : {
          "name" : "name"
        },
        "card" : {
          "name" : "name",
          "thermal_color" : "thermal_color"
        }
      },
      "text" : {
        "name_line_1" : {
          "value" : "value"
        }
      },
      "perso_type" : "EMBOSS"
    }
  }
}}]
     - parameter token: (path) Unique identifier of the card whose primary account number (PAN) you want to retrieve. Send a &#x60;GET&#x60; request to &#x60;/cards&#x60; to retrieve card tokens. 
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter showCvvNumber: (query) Set to &#x60;true&#x60; to show the CVV2 number in the response. (optional)

     - returns: RequestBuilder<CardResponse> 
     */
    open class func getCardsTokenShowpanWithRequestBuilder(token: String, fields: String? = nil, showCvvNumber: Bool? = nil) -> RequestBuilder<CardResponse> {
        var path = "/cards/{token}/showpan"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields": fields, 
                        "show_cvv_number": showCvvNumber
        ])


        let requestBuilder: RequestBuilder<CardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List cards for user

     - parameter token: (path) Unique identifier of the user whose cards you want to list. Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens. 
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCardsUserToken(token: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: CardListResponse?,_ error: Error?) -> Void)) {
        getCardsUserTokenWithRequestBuilder(token: token, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List cards for user
     - GET /cards/user/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "expedite" : false,
    "metadata" : {
      "key" : "metadata"
    },
    "fulfillment_status" : "ISSUED",
    "contactless_exemption_counter" : 6,
    "instrument_type" : "PHYSICAL_MSR",
    "contactless_exemption_total_amount" : 1.4658129805029452,
    "bulk_issuance_token" : "bulk_issuance_token",
    "card_product_token" : "card_product_token",
    "new_pan_from_card_token" : "new_pan_from_card_token",
    "last_four" : "last_four",
    "state" : "ACTIVE",
    "user_token" : "user_token",
    "pan" : "pan",
    "barcode" : "barcode",
    "activation_actions" : {
      "swap_digital_wallet_tokens_from_card_token" : "swap_digital_wallet_tokens_from_card_token",
      "terminate_reissued_source_card" : true
    },
    "cvv_number" : "cvv_number",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "translate_pin_from_card_token" : "translate_pin_from_card_token",
    "state_reason" : "state_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_is_set" : false,
    "expiration_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "reissue_pan_from_card_token" : "reissue_pan_from_card_token",
    "chip_cvv_number" : "chip_cvv_number",
    "expiration" : "expiration",
    "fulfillment" : {
      "shipping" : {
        "care_of_line" : "care_of_line",
        "method" : "LOCAL_MAIL",
        "recipient_address" : {
          "zip" : "zip",
          "country" : "country",
          "address2" : "address2",
          "city" : "city",
          "phone" : "phone",
          "address1" : "address1",
          "last_name" : "last_name",
          "state" : "state",
          "middle_name" : "middle_name",
          "postal_code" : "postal_code",
          "first_name" : "first_name"
        }
      },
      "card_fulfillment_reason" : "NEW",
      "card_personalization" : {
        "carrier" : {
          "message_file" : "message_file",
          "logo_file" : "logo_file",
          "message_line" : "message_line",
          "template_id" : "template_id",
          "logo_thumbnail_file" : "logo_thumbnail_file"
        },
        "images" : {
          "carrier" : {
            "message_1" : "message_1",
            "name" : "name"
          },
          "signature" : {
            "name" : "name"
          },
          "carrier_return_window" : {
            "name" : "name"
          },
          "card" : {
            "name" : "name",
            "thermal_color" : "thermal_color"
          }
        },
        "text" : {
          "name_line_1" : {
            "value" : "value"
          }
        },
        "perso_type" : "EMBOSS"
      }
    }
  }, {
    "expedite" : false,
    "metadata" : {
      "key" : "metadata"
    },
    "fulfillment_status" : "ISSUED",
    "contactless_exemption_counter" : 6,
    "instrument_type" : "PHYSICAL_MSR",
    "contactless_exemption_total_amount" : 1.4658129805029452,
    "bulk_issuance_token" : "bulk_issuance_token",
    "card_product_token" : "card_product_token",
    "new_pan_from_card_token" : "new_pan_from_card_token",
    "last_four" : "last_four",
    "state" : "ACTIVE",
    "user_token" : "user_token",
    "pan" : "pan",
    "barcode" : "barcode",
    "activation_actions" : {
      "swap_digital_wallet_tokens_from_card_token" : "swap_digital_wallet_tokens_from_card_token",
      "terminate_reissued_source_card" : true
    },
    "cvv_number" : "cvv_number",
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "translate_pin_from_card_token" : "translate_pin_from_card_token",
    "state_reason" : "state_reason",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_is_set" : false,
    "expiration_time" : "2000-01-23T04:56:07.000+00:00",
    "token" : "token",
    "reissue_pan_from_card_token" : "reissue_pan_from_card_token",
    "chip_cvv_number" : "chip_cvv_number",
    "expiration" : "expiration",
    "fulfillment" : {
      "shipping" : {
        "care_of_line" : "care_of_line",
        "method" : "LOCAL_MAIL",
        "recipient_address" : {
          "zip" : "zip",
          "country" : "country",
          "address2" : "address2",
          "city" : "city",
          "phone" : "phone",
          "address1" : "address1",
          "last_name" : "last_name",
          "state" : "state",
          "middle_name" : "middle_name",
          "postal_code" : "postal_code",
          "first_name" : "first_name"
        }
      },
      "card_fulfillment_reason" : "NEW",
      "card_personalization" : {
        "carrier" : {
          "message_file" : "message_file",
          "logo_file" : "logo_file",
          "message_line" : "message_line",
          "template_id" : "template_id",
          "logo_thumbnail_file" : "logo_thumbnail_file"
        },
        "images" : {
          "carrier" : {
            "message_1" : "message_1",
            "name" : "name"
          },
          "signature" : {
            "name" : "name"
          },
          "carrier_return_window" : {
            "name" : "name"
          },
          "card" : {
            "name" : "name",
            "thermal_color" : "thermal_color"
          }
        },
        "text" : {
          "name_line_1" : {
            "value" : "value"
          }
        },
        "perso_type" : "EMBOSS"
      }
    }
  } ],
  "start_index" : 5,
  "count" : 0,
  "end_index" : 5
}}]
     - parameter token: (path) Unique identifier of the user whose cards you want to list. Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens. 
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -lastModifiedTime)

     - returns: RequestBuilder<CardListResponse> 
     */
    open class func getCardsUserTokenWithRequestBuilder(token: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<CardListResponse> {
        var path = "/cards/user/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<CardListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create card

     - parameter body: (body)  (optional)
     - parameter showCvvNumber: (query) Set to &#x60;true&#x60; to show the CVV2 number in the response. (optional, default to false)
     - parameter showPan: (query) Set to &#x60;true&#x60; to show the full primary account number (PAN) in the response. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCards(body: CardRequest? = nil, showCvvNumber: Bool? = nil, showPan: Bool? = nil, completion: @escaping ((_ data: CardResponse?,_ error: Error?) -> Void)) {
        postCardsWithRequestBuilder(body: body, showCvvNumber: showCvvNumber, showPan: showPan).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create card
     - POST /cards

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "expedite" : false,
  "metadata" : {
    "key" : "metadata"
  },
  "fulfillment_status" : "ISSUED",
  "contactless_exemption_counter" : 6,
  "instrument_type" : "PHYSICAL_MSR",
  "contactless_exemption_total_amount" : 1.4658129805029452,
  "bulk_issuance_token" : "bulk_issuance_token",
  "card_product_token" : "card_product_token",
  "new_pan_from_card_token" : "new_pan_from_card_token",
  "last_four" : "last_four",
  "state" : "ACTIVE",
  "user_token" : "user_token",
  "pan" : "pan",
  "barcode" : "barcode",
  "activation_actions" : {
    "swap_digital_wallet_tokens_from_card_token" : "swap_digital_wallet_tokens_from_card_token",
    "terminate_reissued_source_card" : true
  },
  "cvv_number" : "cvv_number",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "translate_pin_from_card_token" : "translate_pin_from_card_token",
  "state_reason" : "state_reason",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "pin_is_set" : false,
  "expiration_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "reissue_pan_from_card_token" : "reissue_pan_from_card_token",
  "chip_cvv_number" : "chip_cvv_number",
  "expiration" : "expiration",
  "fulfillment" : {
    "shipping" : {
      "care_of_line" : "care_of_line",
      "method" : "LOCAL_MAIL",
      "recipient_address" : {
        "zip" : "zip",
        "country" : "country",
        "address2" : "address2",
        "city" : "city",
        "phone" : "phone",
        "address1" : "address1",
        "last_name" : "last_name",
        "state" : "state",
        "middle_name" : "middle_name",
        "postal_code" : "postal_code",
        "first_name" : "first_name"
      }
    },
    "card_fulfillment_reason" : "NEW",
    "card_personalization" : {
      "carrier" : {
        "message_file" : "message_file",
        "logo_file" : "logo_file",
        "message_line" : "message_line",
        "template_id" : "template_id",
        "logo_thumbnail_file" : "logo_thumbnail_file"
      },
      "images" : {
        "carrier" : {
          "message_1" : "message_1",
          "name" : "name"
        },
        "signature" : {
          "name" : "name"
        },
        "carrier_return_window" : {
          "name" : "name"
        },
        "card" : {
          "name" : "name",
          "thermal_color" : "thermal_color"
        }
      },
      "text" : {
        "name_line_1" : {
          "value" : "value"
        }
      },
      "perso_type" : "EMBOSS"
    }
  }
}}]
     - parameter body: (body)  (optional)
     - parameter showCvvNumber: (query) Set to &#x60;true&#x60; to show the CVV2 number in the response. (optional, default to false)
     - parameter showPan: (query) Set to &#x60;true&#x60; to show the full primary account number (PAN) in the response. (optional, default to false)

     - returns: RequestBuilder<CardResponse> 
     */
    open class func postCardsWithRequestBuilder(body: CardRequest? = nil, showCvvNumber: Bool? = nil, showPan: Bool? = nil) -> RequestBuilder<CardResponse> {
        let path = "/cards"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "show_cvv_number": showCvvNumber, 
                        "show_pan": showPan
        ])


        let requestBuilder: RequestBuilder<CardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Retrieve card by PAN

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCardsGetbypan(body: PanRequest? = nil, completion: @escaping ((_ data: PanResponse?,_ error: Error?) -> Void)) {
        postCardsGetbypanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve card by PAN
     - POST /cards/getbypan

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "card_token" : "card_token",
  "user_token" : "user_token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<PanResponse> 
     */
    open class func postCardsGetbypanWithRequestBuilder(body: PanRequest? = nil) -> RequestBuilder<PanResponse> {
        let path = "/cards/getbypan"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PanResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update card

     - parameter token: (path) Unique identifier of the card you want to update. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCardsToken(token: String, body: CardUpdateRequest? = nil, completion: @escaping ((_ data: CardResponse?,_ error: Error?) -> Void)) {
        putCardsTokenWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update card
     - PUT /cards/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "expedite" : false,
  "metadata" : {
    "key" : "metadata"
  },
  "fulfillment_status" : "ISSUED",
  "contactless_exemption_counter" : 6,
  "instrument_type" : "PHYSICAL_MSR",
  "contactless_exemption_total_amount" : 1.4658129805029452,
  "bulk_issuance_token" : "bulk_issuance_token",
  "card_product_token" : "card_product_token",
  "new_pan_from_card_token" : "new_pan_from_card_token",
  "last_four" : "last_four",
  "state" : "ACTIVE",
  "user_token" : "user_token",
  "pan" : "pan",
  "barcode" : "barcode",
  "activation_actions" : {
    "swap_digital_wallet_tokens_from_card_token" : "swap_digital_wallet_tokens_from_card_token",
    "terminate_reissued_source_card" : true
  },
  "cvv_number" : "cvv_number",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "translate_pin_from_card_token" : "translate_pin_from_card_token",
  "state_reason" : "state_reason",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "pin_is_set" : false,
  "expiration_time" : "2000-01-23T04:56:07.000+00:00",
  "token" : "token",
  "reissue_pan_from_card_token" : "reissue_pan_from_card_token",
  "chip_cvv_number" : "chip_cvv_number",
  "expiration" : "expiration",
  "fulfillment" : {
    "shipping" : {
      "care_of_line" : "care_of_line",
      "method" : "LOCAL_MAIL",
      "recipient_address" : {
        "zip" : "zip",
        "country" : "country",
        "address2" : "address2",
        "city" : "city",
        "phone" : "phone",
        "address1" : "address1",
        "last_name" : "last_name",
        "state" : "state",
        "middle_name" : "middle_name",
        "postal_code" : "postal_code",
        "first_name" : "first_name"
      }
    },
    "card_fulfillment_reason" : "NEW",
    "card_personalization" : {
      "carrier" : {
        "message_file" : "message_file",
        "logo_file" : "logo_file",
        "message_line" : "message_line",
        "template_id" : "template_id",
        "logo_thumbnail_file" : "logo_thumbnail_file"
      },
      "images" : {
        "carrier" : {
          "message_1" : "message_1",
          "name" : "name"
        },
        "signature" : {
          "name" : "name"
        },
        "carrier_return_window" : {
          "name" : "name"
        },
        "card" : {
          "name" : "name",
          "thermal_color" : "thermal_color"
        }
      },
      "text" : {
        "name_line_1" : {
          "value" : "value"
        }
      },
      "perso_type" : "EMBOSS"
    }
  }
}}]
     - parameter token: (path) Unique identifier of the card you want to update. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<CardResponse> 
     */
    open class func putCardsTokenWithRequestBuilder(token: String, body: CardUpdateRequest? = nil) -> RequestBuilder<CardResponse> {
        var path = "/cards/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CardResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
