//
// ProgramGatewayFundingSourcesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ProgramGatewayFundingSourcesAPI {
    /**
     Retrieve program gateway source

     - parameter token: (path) Unique identifier of the program gateway funding source. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundingsourcesProgramgatewayToken(token: String, completion: @escaping ((_ data: GatewayProgramFundingSourceResponse?,_ error: Error?) -> Void)) {
        getFundingsourcesProgramgatewayTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve program gateway source
     - GET /fundingsources/programgateway/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "basic_auth_password" : "basic_auth_password",
  "timeout_millis" : 0,
  "active" : true,
  "custom_header" : {
    "key" : "custom_header"
  },
  "version" : "version",
  "url" : "url",
  "token" : "token",
  "name" : "name",
  "basic_auth_username" : "basic_auth_username",
  "use_mtls" : false,
  "account" : "account"
}}]
     - parameter token: (path) Unique identifier of the program gateway funding source. 

     - returns: RequestBuilder<GatewayProgramFundingSourceResponse> 
     */
    open class func getFundingsourcesProgramgatewayTokenWithRequestBuilder(token: String) -> RequestBuilder<GatewayProgramFundingSourceResponse> {
        var path = "/fundingsources/programgateway/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GatewayProgramFundingSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create program gateway source

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFundingsourcesProgramgateway(body: GatewayProgramFundingSourceRequest? = nil, completion: @escaping ((_ data: GatewayProgramFundingSourceResponse?,_ error: Error?) -> Void)) {
        postFundingsourcesProgramgatewayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create program gateway source
     - POST /fundingsources/programgateway

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "basic_auth_password" : "basic_auth_password",
  "timeout_millis" : 0,
  "active" : true,
  "custom_header" : {
    "key" : "custom_header"
  },
  "version" : "version",
  "url" : "url",
  "token" : "token",
  "name" : "name",
  "basic_auth_username" : "basic_auth_username",
  "use_mtls" : false,
  "account" : "account"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<GatewayProgramFundingSourceResponse> 
     */
    open class func postFundingsourcesProgramgatewayWithRequestBuilder(body: GatewayProgramFundingSourceRequest? = nil) -> RequestBuilder<GatewayProgramFundingSourceResponse> {
        let path = "/fundingsources/programgateway"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GatewayProgramFundingSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update program gateway source custom headers

     - parameter token: (path) Unique identifier of the program gateway funding source. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFundingsourcesProgramgatewayCustomHeaderToken(token: String, body: GatewayProgramCustomHeaderUpdateRequest? = nil, completion: @escaping ((_ data: GatewayProgramFundingSourceResponse?,_ error: Error?) -> Void)) {
        putFundingsourcesProgramgatewayCustomHeaderTokenWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update program gateway source custom headers
     - PUT /fundingsources/programgateway/customheaders/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "basic_auth_password" : "basic_auth_password",
  "timeout_millis" : 0,
  "active" : true,
  "custom_header" : {
    "key" : "custom_header"
  },
  "version" : "version",
  "url" : "url",
  "token" : "token",
  "name" : "name",
  "basic_auth_username" : "basic_auth_username",
  "use_mtls" : false,
  "account" : "account"
}}]
     - parameter token: (path) Unique identifier of the program gateway funding source. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<GatewayProgramFundingSourceResponse> 
     */
    open class func putFundingsourcesProgramgatewayCustomHeaderTokenWithRequestBuilder(token: String, body: GatewayProgramCustomHeaderUpdateRequest? = nil) -> RequestBuilder<GatewayProgramFundingSourceResponse> {
        var path = "/fundingsources/programgateway/customheaders/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GatewayProgramFundingSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update program gateway source

     - parameter token: (path) Unique identifier of the program gateway funding source. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFundingsourcesProgramgatewayToken(token: String, body: GatewayProgramFundingSourceUpdateRequest? = nil, completion: @escaping ((_ data: GatewayProgramFundingSourceResponse?,_ error: Error?) -> Void)) {
        putFundingsourcesProgramgatewayTokenWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update program gateway source
     - PUT /fundingsources/programgateway/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "basic_auth_password" : "basic_auth_password",
  "timeout_millis" : 0,
  "active" : true,
  "custom_header" : {
    "key" : "custom_header"
  },
  "version" : "version",
  "url" : "url",
  "token" : "token",
  "name" : "name",
  "basic_auth_username" : "basic_auth_username",
  "use_mtls" : false,
  "account" : "account"
}}]
     - parameter token: (path) Unique identifier of the program gateway funding source. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<GatewayProgramFundingSourceResponse> 
     */
    open class func putFundingsourcesProgramgatewayTokenWithRequestBuilder(token: String, body: GatewayProgramFundingSourceUpdateRequest? = nil) -> RequestBuilder<GatewayProgramFundingSourceResponse> {
        var path = "/fundingsources/programgateway/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GatewayProgramFundingSourceResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
