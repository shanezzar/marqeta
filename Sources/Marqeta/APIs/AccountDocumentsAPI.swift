//
// AccountDocumentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AccountDocumentsAPI {
    /**
     List documents

     - parameter accountToken: (path) The unique identifier of the credit account for which you want to get documents.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountDocuments(accountToken: String, completion: @escaping ((_ data: AccountDocumentsResponse?,_ error: Error?) -> Void)) {
        getAccountDocumentsWithRequestBuilder(accountToken: accountToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List documents
     - GET /credit/accounts/{account_token}/documents

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "account_statement" : {
    "asset_urls" : {
      "pdf" : "pdf",
      "png" : "png",
      "html" : "html"
    },
    "asset_token" : "asset_token",
    "accepted_at" : "2000-01-23T04:56:07.000+00:00",
    "effective_from" : "2000-01-23T04:56:07.000+00:00"
  }
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which you want to get documents.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 

     - returns: RequestBuilder<AccountDocumentsResponse> 
     */
    open class func getAccountDocumentsWithRequestBuilder(accountToken: String) -> RequestBuilder<AccountDocumentsResponse> {
        var path = "/credit/accounts/{account_token}/documents"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountDocumentsResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve document

     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve a specific type of document.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter documentType: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDocumentByAccountAndType(accountToken: String, documentType: AccountAndDocumentAssetType, completion: @escaping ((_ data: AccountDocumentResponse?,_ error: Error?) -> Void)) {
        getDocumentByAccountAndTypeWithRequestBuilder(accountToken: accountToken, documentType: documentType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve document
     - GET /credit/accounts/{account_token}/documents/{document_type}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "asset_urls" : {
    "pdf" : "pdf",
    "png" : "png",
    "html" : "html"
  },
  "asset_token" : "asset_token",
  "accepted_at" : "2000-01-23T04:56:07.000+00:00",
  "effective_from" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which to retrieve a specific type of document.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter documentType: (path)  

     - returns: RequestBuilder<AccountDocumentResponse> 
     */
    open class func getDocumentByAccountAndTypeWithRequestBuilder(accountToken: String, documentType: AccountAndDocumentAssetType) -> RequestBuilder<AccountDocumentResponse> {
        var path = "/credit/accounts/{account_token}/documents/{document_type}"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let documentTypePreEscape = "\(documentType)"
        let documentTypePostEscape = documentTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{document_type}", with: documentTypePostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountDocumentResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_getDocumentHistoryByAccountAndType: String { 
        case effectivedate = "effectiveDate"
        case effectivedate_1 = "-effectiveDate"
    }

    /**
     Retrieve document history

     - parameter accountToken: (path) The unique identifier of the credit account for which to get document history.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter documentType: (path)  
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;effectiveDate&#x60;, and not by the field names appearing in response bodies such as &#x60;effective_date&#x60;. (optional, default to -effectiveDate)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDocumentHistoryByAccountAndType(accountToken: String, documentType: AccountAndDocumentAssetType, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getDocumentHistoryByAccountAndType? = nil, completion: @escaping ((_ data: AccountDocumentsPage?,_ error: Error?) -> Void)) {
        getDocumentHistoryByAccountAndTypeWithRequestBuilder(accountToken: accountToken, documentType: documentType, count: count, startIndex: startIndex, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve document history
     - GET /credit/accounts/{account_token}/documents/{document_type}/history

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : true,
  "data" : [ {
    "asset_urls" : {
      "pdf" : "pdf",
      "png" : "png",
      "html" : "html"
    },
    "asset_token" : "asset_token",
    "accepted_at" : "2000-01-23T04:56:07.000+00:00",
    "effective_from" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "asset_urls" : {
      "pdf" : "pdf",
      "png" : "png",
      "html" : "html"
    },
    "asset_token" : "asset_token",
    "accepted_at" : "2000-01-23T04:56:07.000+00:00",
    "effective_from" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter accountToken: (path) The unique identifier of the credit account for which to get document history.  Send a &#x60;GET&#x60; request to &#x60;/credit/accounts&#x60; to retrieve existing credit account tokens. 
     - parameter documentType: (path)  
     - parameter count: (query) The number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter sortBy: (query) Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;effectiveDate&#x60;, and not by the field names appearing in response bodies such as &#x60;effective_date&#x60;. (optional, default to -effectiveDate)

     - returns: RequestBuilder<AccountDocumentsPage> 
     */
    open class func getDocumentHistoryByAccountAndTypeWithRequestBuilder(accountToken: String, documentType: AccountAndDocumentAssetType, count: Int? = nil, startIndex: Int? = nil, sortBy: SortBy_getDocumentHistoryByAccountAndType? = nil) -> RequestBuilder<AccountDocumentsPage> {
        var path = "/credit/accounts/{account_token}/documents/{document_type}/history"
        let accountTokenPreEscape = "\(accountToken)"
        let accountTokenPostEscape = accountTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_token}", with: accountTokenPostEscape, options: .literal, range: nil)
        let documentTypePreEscape = "\(documentType)"
        let documentTypePostEscape = documentTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{document_type}", with: documentTypePostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "sort_by": sortBy?.rawValue
        ])


        let requestBuilder: RequestBuilder<AccountDocumentsPage>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
