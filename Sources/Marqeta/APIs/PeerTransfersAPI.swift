//
// PeerTransfersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PeerTransfersAPI {
    /**
     Retrieve peer transfer

     - parameter token: (path) Unique identifier of the peer transfer. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPeertransfersToken(token: String, completion: @escaping ((_ data: PeerTransferResponse?,_ error: Error?) -> Void)) {
        getPeertransfersTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve peer transfer
     - GET /peertransfers/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "recipient_business_token" : "recipient_business_token",
  "sender_user_token" : "sender_user_token",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "recipient_user_token" : "recipient_user_token",
  "sender_business_token" : "sender_business_token",
  "memo" : "memo",
  "currency_code" : "currency_code",
  "tags" : "tags",
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the peer transfer. 

     - returns: RequestBuilder<PeerTransferResponse> 
     */
    open class func getPeertransfersTokenWithRequestBuilder(token: String) -> RequestBuilder<PeerTransferResponse> {
        var path = "/peertransfers/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PeerTransferResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List peer transfers by account holder

     - parameter userOrBusinessToken: (path) Existing user or business token.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens or to &#x60;/businesses&#x60; to retrieve business tokens. 
     - parameter count: (query) Number of peer transfer resources to retrieve. (optional, default to 25)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPeertransfersUserUserorbusinesstoken(userOrBusinessToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, completion: @escaping ((_ data: PeerTransferResponse?,_ error: Error?) -> Void)) {
        getPeertransfersUserUserorbusinesstokenWithRequestBuilder(userOrBusinessToken: userOrBusinessToken, count: count, startIndex: startIndex, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List peer transfers by account holder
     - GET /peertransfers/user/{user_or_business_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "recipient_business_token" : "recipient_business_token",
  "sender_user_token" : "sender_user_token",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "recipient_user_token" : "recipient_user_token",
  "sender_business_token" : "sender_business_token",
  "memo" : "memo",
  "currency_code" : "currency_code",
  "tags" : "tags",
  "token" : "token"
}}]
     - parameter userOrBusinessToken: (path) Existing user or business token.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens or to &#x60;/businesses&#x60; to retrieve business tokens. 
     - parameter count: (query) Number of peer transfer resources to retrieve. (optional, default to 25)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<PeerTransferResponse> 
     */
    open class func getPeertransfersUserUserorbusinesstokenWithRequestBuilder(userOrBusinessToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil) -> RequestBuilder<PeerTransferResponse> {
        var path = "/peertransfers/user/{user_or_business_token}"
        let userOrBusinessTokenPreEscape = "\(userOrBusinessToken)"
        let userOrBusinessTokenPostEscape = userOrBusinessTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_or_business_token}", with: userOrBusinessTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<PeerTransferResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List received peer transfers

     - parameter userOrBusinessToken: (path) Existing user or business token.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens or to &#x60;/businesses&#x60; to retrieve business tokens. 
     - parameter count: (query) Number of peer transfer resources to retrieve. (optional, default to 25)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPeertransfersUserUserorbusinesstokenRecipient(userOrBusinessToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, completion: @escaping ((_ data: PeerTransferResponse?,_ error: Error?) -> Void)) {
        getPeertransfersUserUserorbusinesstokenRecipientWithRequestBuilder(userOrBusinessToken: userOrBusinessToken, count: count, startIndex: startIndex, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List received peer transfers
     - GET /peertransfers/user/{user_or_business_token}/recipient

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "recipient_business_token" : "recipient_business_token",
  "sender_user_token" : "sender_user_token",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "recipient_user_token" : "recipient_user_token",
  "sender_business_token" : "sender_business_token",
  "memo" : "memo",
  "currency_code" : "currency_code",
  "tags" : "tags",
  "token" : "token"
}}]
     - parameter userOrBusinessToken: (path) Existing user or business token.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens or to &#x60;/businesses&#x60; to retrieve business tokens. 
     - parameter count: (query) Number of peer transfer resources to retrieve. (optional, default to 25)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<PeerTransferResponse> 
     */
    open class func getPeertransfersUserUserorbusinesstokenRecipientWithRequestBuilder(userOrBusinessToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil) -> RequestBuilder<PeerTransferResponse> {
        var path = "/peertransfers/user/{user_or_business_token}/recipient"
        let userOrBusinessTokenPreEscape = "\(userOrBusinessToken)"
        let userOrBusinessTokenPostEscape = userOrBusinessTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_or_business_token}", with: userOrBusinessTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<PeerTransferResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List sent peer transfers

     - parameter userOrBusinessToken: (path) Existing user or business token.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens or to &#x60;/businesses&#x60; to retrieve business tokens. 
     - parameter count: (query) Number of peer transfer resources to retrieve. (optional, default to 25)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPeertransfersUserUserorbusinesstokenSender(userOrBusinessToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, completion: @escaping ((_ data: PeerTransferResponse?,_ error: Error?) -> Void)) {
        getPeertransfersUserUserorbusinesstokenSenderWithRequestBuilder(userOrBusinessToken: userOrBusinessToken, count: count, startIndex: startIndex, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List sent peer transfers
     - GET /peertransfers/user/{user_or_business_token}/sender

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "recipient_business_token" : "recipient_business_token",
  "sender_user_token" : "sender_user_token",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "recipient_user_token" : "recipient_user_token",
  "sender_business_token" : "sender_business_token",
  "memo" : "memo",
  "currency_code" : "currency_code",
  "tags" : "tags",
  "token" : "token"
}}]
     - parameter userOrBusinessToken: (path) Existing user or business token.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens or to &#x60;/businesses&#x60; to retrieve business tokens. 
     - parameter count: (query) Number of peer transfer resources to retrieve. (optional, default to 25)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)

     - returns: RequestBuilder<PeerTransferResponse> 
     */
    open class func getPeertransfersUserUserorbusinesstokenSenderWithRequestBuilder(userOrBusinessToken: String, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil) -> RequestBuilder<PeerTransferResponse> {
        var path = "/peertransfers/user/{user_or_business_token}/sender"
        let userOrBusinessTokenPreEscape = "\(userOrBusinessToken)"
        let userOrBusinessTokenPostEscape = userOrBusinessTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_or_business_token}", with: userOrBusinessTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields
        ])


        let requestBuilder: RequestBuilder<PeerTransferResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create peer transfer

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPeertransfers(body: PeerTransferRequest? = nil, completion: @escaping ((_ data: PeerTransferResponse?,_ error: Error?) -> Void)) {
        postPeertransfersWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create peer transfer
     - POST /peertransfers

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "recipient_business_token" : "recipient_business_token",
  "sender_user_token" : "sender_user_token",
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 0.8008281904610115,
  "recipient_user_token" : "recipient_user_token",
  "sender_business_token" : "sender_business_token",
  "memo" : "memo",
  "currency_code" : "currency_code",
  "tags" : "tags",
  "token" : "token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<PeerTransferResponse> 
     */
    open class func postPeertransfersWithRequestBuilder(body: PeerTransferRequest? = nil) -> RequestBuilder<PeerTransferResponse> {
        let path = "/peertransfers"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PeerTransferResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
