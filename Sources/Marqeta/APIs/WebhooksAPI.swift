//
// WebhooksAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class WebhooksAPI {
    /**
     List webhooks

     - parameter active: (query) Set to &#x60;true&#x60; to return only active webhook configurations. (optional, default to false)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebhooks(active: Bool? = nil, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil, completion: @escaping ((_ data: WebhookResponseModelListResponse?,_ error: Error?) -> Void)) {
        getWebhooksWithRequestBuilder(active: active, count: count, startIndex: startIndex, fields: fields, sortBy: sortBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List webhooks
     - GET /webhooks

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "is_more" : false,
  "data" : [ {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : true,
    "config" : {
      "basic_auth_password" : "basic_auth_password",
      "basic_auth_username" : "basic_auth_username",
      "custom_header" : {
        "key" : "custom_header"
      },
      "secret" : "secret",
      "use_mtls" : false,
      "url" : "url"
    },
    "events" : [ "events", "events" ],
    "token" : "token"
  }, {
    "created_time" : "2000-01-23T04:56:07.000+00:00",
    "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "active" : true,
    "config" : {
      "basic_auth_password" : "basic_auth_password",
      "basic_auth_username" : "basic_auth_username",
      "custom_header" : {
        "key" : "custom_header"
      },
      "secret" : "secret",
      "use_mtls" : false,
      "url" : "url"
    },
    "events" : [ "events", "events" ],
    "token" : "token"
  } ],
  "start_index" : 1,
  "count" : 0,
  "end_index" : 6
}}]
     - parameter active: (query) Set to &#x60;true&#x60; to return only active webhook configurations. (optional, default to false)
     - parameter count: (query) Number of resources to retrieve. (optional, default to 5)
     - parameter startIndex: (query) Sort order index of the first resource in the returned array. (optional, default to 0)
     - parameter fields: (query) Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     - parameter sortBy: (query) Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to -createdTime)

     - returns: RequestBuilder<WebhookResponseModelListResponse> 
     */
    open class func getWebhooksWithRequestBuilder(active: Bool? = nil, count: Int? = nil, startIndex: Int? = nil, fields: String? = nil, sortBy: String? = nil) -> RequestBuilder<WebhookResponseModelListResponse> {
        let path = "/webhooks"
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "active": active, 
                        "count": count?.encodeToJSON(), 
                        "start_index": startIndex?.encodeToJSON(), 
                        "fields": fields, 
                        "sort_by": sortBy
        ])


        let requestBuilder: RequestBuilder<WebhookResponseModelListResponse>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve webhook

     - parameter token: (path) Unique identifier of the webhook. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebhooksToken(token: String, completion: @escaping ((_ data: WebhookResponseModel?,_ error: Error?) -> Void)) {
        getWebhooksTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve webhook
     - GET /webhooks/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "config" : {
    "basic_auth_password" : "basic_auth_password",
    "basic_auth_username" : "basic_auth_username",
    "custom_header" : {
      "key" : "custom_header"
    },
    "secret" : "secret",
    "use_mtls" : false,
    "url" : "url"
  },
  "events" : [ "events", "events" ],
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the webhook. 

     - returns: RequestBuilder<WebhookResponseModel> 
     */
    open class func getWebhooksTokenWithRequestBuilder(token: String) -> RequestBuilder<WebhookResponseModel> {
        var path = "/webhooks/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create webhook

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebhooks(body: WebhookRequestModel? = nil, completion: @escaping ((_ data: WebhookResponseModel?,_ error: Error?) -> Void)) {
        postWebhooksWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create webhook
     - POST /webhooks

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "config" : {
    "basic_auth_password" : "basic_auth_password",
    "basic_auth_username" : "basic_auth_username",
    "custom_header" : {
      "key" : "custom_header"
    },
    "secret" : "secret",
    "use_mtls" : false,
    "url" : "url"
  },
  "events" : [ "events", "events" ],
  "token" : "token"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<WebhookResponseModel> 
     */
    open class func postWebhooksWithRequestBuilder(body: WebhookRequestModel? = nil) -> RequestBuilder<WebhookResponseModel> {
        let path = "/webhooks"
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter eventType
     */
    public enum EventType_postWebhooksTokenEventtypeEventtoken: String { 
        case chargebacktransition = "chargebacktransition"
        case digitalwallettokentransition = "digitalwallettokentransition"
        case cardtransition = "cardtransition"
        case usertransition = "usertransition"
        case businesstransition = "businesstransition"
        case transaction = "transaction"
        case threedstransition = "threedstransition"
    }

    /**
     Resend event notification

     - parameter token: (path) Unique identifier of the webhook. 
     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter eventToken: (path) Unique identifier of the event for which you want to resend a notification. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebhooksTokenEventtypeEventtoken(token: String, eventType: EventType_postWebhooksTokenEventtypeEventtoken, eventToken: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postWebhooksTokenEventtypeEventtokenWithRequestBuilder(token: token, eventType: eventType, eventToken: eventToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Resend event notification
     - POST /webhooks/{token}/{event_type}/{event_token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - parameter token: (path) Unique identifier of the webhook. 
     - parameter eventType: (path) Specifies the type of event you want to resend. 
     - parameter eventToken: (path) Unique identifier of the event for which you want to resend a notification. 

     - returns: RequestBuilder<Void> 
     */
    open class func postWebhooksTokenEventtypeEventtokenWithRequestBuilder(token: String, eventType: EventType_postWebhooksTokenEventtypeEventtoken, eventToken: String) -> RequestBuilder<Void> {
        var path = "/webhooks/{token}/{event_type}/{event_token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let eventTypePreEscape = "\(eventType.rawValue)"
        let eventTypePostEscape = eventTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_type}", with: eventTypePostEscape, options: .literal, range: nil)
        let eventTokenPreEscape = "\(eventToken)"
        let eventTokenPostEscape = eventTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_token}", with: eventTokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = Marqeta.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Ping webhook

     - parameter token: (path) Unique identifier of the webhook. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebhooksTokenPing(token: String, completion: @escaping ((_ data: WebhookPingModel?,_ error: Error?) -> Void)) {
        postWebhooksTokenPingWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Ping webhook
     - POST /webhooks/{token}/ping

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "pings" : [ {
    "payload" : "payload",
    "token" : "token"
  }, {
    "payload" : "payload",
    "token" : "token"
  } ]
}}]
     - parameter token: (path) Unique identifier of the webhook. 

     - returns: RequestBuilder<WebhookPingModel> 
     */
    open class func postWebhooksTokenPingWithRequestBuilder(token: String) -> RequestBuilder<WebhookPingModel> {
        var path = "/webhooks/{token}/ping"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookPingModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update webhook custom headers

     - parameter token: (path) Unique identifier of the webhook. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putWebhooksCustomHeadersToken(token: String, body: WebhookUpdateCustomHeaderRequest? = nil, completion: @escaping ((_ data: WebhookResponseModel?,_ error: Error?) -> Void)) {
        putWebhooksCustomHeadersTokenWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update webhook custom headers
     - PUT /webhooks/customheaders/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "config" : {
    "basic_auth_password" : "basic_auth_password",
    "basic_auth_username" : "basic_auth_username",
    "custom_header" : {
      "key" : "custom_header"
    },
    "secret" : "secret",
    "use_mtls" : false,
    "url" : "url"
  },
  "events" : [ "events", "events" ],
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the webhook. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<WebhookResponseModel> 
     */
    open class func putWebhooksCustomHeadersTokenWithRequestBuilder(token: String, body: WebhookUpdateCustomHeaderRequest? = nil) -> RequestBuilder<WebhookResponseModel> {
        var path = "/webhooks/customheaders/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update webhook

     - parameter token: (path) Unique identifier of the webhook. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putWebhooksToken(token: String, body: WebhookBaseModel? = nil, completion: @escaping ((_ data: WebhookResponseModel?,_ error: Error?) -> Void)) {
        putWebhooksTokenWithRequestBuilder(token: token, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update webhook
     - PUT /webhooks/{token}

     - BASIC:
       - type: http
       - name: mqAppAndAccessToken
     - examples: [{contentType=application/json, example={
  "created_time" : "2000-01-23T04:56:07.000+00:00",
  "last_modified_time" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "active" : true,
  "config" : {
    "basic_auth_password" : "basic_auth_password",
    "basic_auth_username" : "basic_auth_username",
    "custom_header" : {
      "key" : "custom_header"
    },
    "secret" : "secret",
    "use_mtls" : false,
    "url" : "url"
  },
  "events" : [ "events", "events" ],
  "token" : "token"
}}]
     - parameter token: (path) Unique identifier of the webhook. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<WebhookResponseModel> 
     */
    open class func putWebhooksTokenWithRequestBuilder(token: String, body: WebhookBaseModel? = nil) -> RequestBuilder<WebhookResponseModel> {
        var path = "/webhooks/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = Marqeta.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponseModel>.Type = Marqeta.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
